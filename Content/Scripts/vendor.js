/**
 * @license AngularJS v1.5.8
 * (c) 2010-2016 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular) {'use strict';

var ELEMENT_NODE = 1;
var COMMENT_NODE = 8;

var ADD_CLASS_SUFFIX = '-add';
var REMOVE_CLASS_SUFFIX = '-remove';
var EVENT_CLASS_PREFIX = 'ng-';
var ACTIVE_CLASS_SUFFIX = '-active';
var PREPARE_CLASS_SUFFIX = '-prepare';

var NG_ANIMATE_CLASSNAME = 'ng-animate';
var NG_ANIMATE_CHILDREN_DATA = '$$ngAnimateChildren';

// Detect proper transitionend/animationend event names.
var CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;

// If unprefixed events are not supported but webkit-prefixed are, use the latter.
// Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.
// Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`
// but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.
// Register both events in case `window.onanimationend` is not supported because of that,
// do the same for `transitionend` as Safari is likely to exhibit similar behavior.
// Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit
// therefore there is no reason to test anymore for other vendor prefixes:
// http://caniuse.com/#search=transition
if ((window.ontransitionend === void 0) && (window.onwebkittransitionend !== void 0)) {
  CSS_PREFIX = '-webkit-';
  TRANSITION_PROP = 'WebkitTransition';
  TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';
} else {
  TRANSITION_PROP = 'transition';
  TRANSITIONEND_EVENT = 'transitionend';
}

if ((window.onanimationend === void 0) && (window.onwebkitanimationend !== void 0)) {
  CSS_PREFIX = '-webkit-';
  ANIMATION_PROP = 'WebkitAnimation';
  ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';
} else {
  ANIMATION_PROP = 'animation';
  ANIMATIONEND_EVENT = 'animationend';
}

var DURATION_KEY = 'Duration';
var PROPERTY_KEY = 'Property';
var DELAY_KEY = 'Delay';
var TIMING_KEY = 'TimingFunction';
var ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';
var ANIMATION_PLAYSTATE_KEY = 'PlayState';
var SAFE_FAST_FORWARD_DURATION_VALUE = 9999;

var ANIMATION_DELAY_PROP = ANIMATION_PROP + DELAY_KEY;
var ANIMATION_DURATION_PROP = ANIMATION_PROP + DURATION_KEY;
var TRANSITION_DELAY_PROP = TRANSITION_PROP + DELAY_KEY;
var TRANSITION_DURATION_PROP = TRANSITION_PROP + DURATION_KEY;

var ngMinErr = angular.$$minErr('ng');
function assertArg(arg, name, reason) {
  if (!arg) {
    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
  }
  return arg;
}

function mergeClasses(a,b) {
  if (!a && !b) return '';
  if (!a) return b;
  if (!b) return a;
  if (isArray(a)) a = a.join(' ');
  if (isArray(b)) b = b.join(' ');
  return a + ' ' + b;
}

function packageStyles(options) {
  var styles = {};
  if (options && (options.to || options.from)) {
    styles.to = options.to;
    styles.from = options.from;
  }
  return styles;
}

function pendClasses(classes, fix, isPrefix) {
  var className = '';
  classes = isArray(classes)
      ? classes
      : classes && isString(classes) && classes.length
          ? classes.split(/\s+/)
          : [];
  forEach(classes, function(klass, i) {
    if (klass && klass.length > 0) {
      className += (i > 0) ? ' ' : '';
      className += isPrefix ? fix + klass
                            : klass + fix;
    }
  });
  return className;
}

function removeFromArray(arr, val) {
  var index = arr.indexOf(val);
  if (val >= 0) {
    arr.splice(index, 1);
  }
}

function stripCommentsFromElement(element) {
  if (element instanceof jqLite) {
    switch (element.length) {
      case 0:
        return element;

      case 1:
        // there is no point of stripping anything if the element
        // is the only element within the jqLite wrapper.
        // (it's important that we retain the element instance.)
        if (element[0].nodeType === ELEMENT_NODE) {
          return element;
        }
        break;

      default:
        return jqLite(extractElementNode(element));
    }
  }

  if (element.nodeType === ELEMENT_NODE) {
    return jqLite(element);
  }
}

function extractElementNode(element) {
  if (!element[0]) return element;
  for (var i = 0; i < element.length; i++) {
    var elm = element[i];
    if (elm.nodeType == ELEMENT_NODE) {
      return elm;
    }
  }
}

function $$addClass($$jqLite, element, className) {
  forEach(element, function(elm) {
    $$jqLite.addClass(elm, className);
  });
}

function $$removeClass($$jqLite, element, className) {
  forEach(element, function(elm) {
    $$jqLite.removeClass(elm, className);
  });
}

function applyAnimationClassesFactory($$jqLite) {
  return function(element, options) {
    if (options.addClass) {
      $$addClass($$jqLite, element, options.addClass);
      options.addClass = null;
    }
    if (options.removeClass) {
      $$removeClass($$jqLite, element, options.removeClass);
      options.removeClass = null;
    }
  };
}

function prepareAnimationOptions(options) {
  options = options || {};
  if (!options.$$prepared) {
    var domOperation = options.domOperation || noop;
    options.domOperation = function() {
      options.$$domOperationFired = true;
      domOperation();
      domOperation = noop;
    };
    options.$$prepared = true;
  }
  return options;
}

function applyAnimationStyles(element, options) {
  applyAnimationFromStyles(element, options);
  applyAnimationToStyles(element, options);
}

function applyAnimationFromStyles(element, options) {
  if (options.from) {
    element.css(options.from);
    options.from = null;
  }
}

function applyAnimationToStyles(element, options) {
  if (options.to) {
    element.css(options.to);
    options.to = null;
  }
}

function mergeAnimationDetails(element, oldAnimation, newAnimation) {
  var target = oldAnimation.options || {};
  var newOptions = newAnimation.options || {};

  var toAdd = (target.addClass || '') + ' ' + (newOptions.addClass || '');
  var toRemove = (target.removeClass || '') + ' ' + (newOptions.removeClass || '');
  var classes = resolveElementClasses(element.attr('class'), toAdd, toRemove);

  if (newOptions.preparationClasses) {
    target.preparationClasses = concatWithSpace(newOptions.preparationClasses, target.preparationClasses);
    delete newOptions.preparationClasses;
  }

  // noop is basically when there is no callback; otherwise something has been set
  var realDomOperation = target.domOperation !== noop ? target.domOperation : null;

  extend(target, newOptions);

  // TODO(matsko or sreeramu): proper fix is to maintain all animation callback in array and call at last,but now only leave has the callback so no issue with this.
  if (realDomOperation) {
    target.domOperation = realDomOperation;
  }

  if (classes.addClass) {
    target.addClass = classes.addClass;
  } else {
    target.addClass = null;
  }

  if (classes.removeClass) {
    target.removeClass = classes.removeClass;
  } else {
    target.removeClass = null;
  }

  oldAnimation.addClass = target.addClass;
  oldAnimation.removeClass = target.removeClass;

  return target;
}

function resolveElementClasses(existing, toAdd, toRemove) {
  var ADD_CLASS = 1;
  var REMOVE_CLASS = -1;

  var flags = {};
  existing = splitClassesToLookup(existing);

  toAdd = splitClassesToLookup(toAdd);
  forEach(toAdd, function(value, key) {
    flags[key] = ADD_CLASS;
  });

  toRemove = splitClassesToLookup(toRemove);
  forEach(toRemove, function(value, key) {
    flags[key] = flags[key] === ADD_CLASS ? null : REMOVE_CLASS;
  });

  var classes = {
    addClass: '',
    removeClass: ''
  };

  forEach(flags, function(val, klass) {
    var prop, allow;
    if (val === ADD_CLASS) {
      prop = 'addClass';
      allow = !existing[klass] || existing[klass + REMOVE_CLASS_SUFFIX];
    } else if (val === REMOVE_CLASS) {
      prop = 'removeClass';
      allow = existing[klass] || existing[klass + ADD_CLASS_SUFFIX];
    }
    if (allow) {
      if (classes[prop].length) {
        classes[prop] += ' ';
      }
      classes[prop] += klass;
    }
  });

  function splitClassesToLookup(classes) {
    if (isString(classes)) {
      classes = classes.split(' ');
    }

    var obj = {};
    forEach(classes, function(klass) {
      // sometimes the split leaves empty string values
      // incase extra spaces were applied to the options
      if (klass.length) {
        obj[klass] = true;
      }
    });
    return obj;
  }

  return classes;
}

function getDomNode(element) {
  return (element instanceof jqLite) ? element[0] : element;
}

function applyGeneratedPreparationClasses(element, event, options) {
  var classes = '';
  if (event) {
    classes = pendClasses(event, EVENT_CLASS_PREFIX, true);
  }
  if (options.addClass) {
    classes = concatWithSpace(classes, pendClasses(options.addClass, ADD_CLASS_SUFFIX));
  }
  if (options.removeClass) {
    classes = concatWithSpace(classes, pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX));
  }
  if (classes.length) {
    options.preparationClasses = classes;
    element.addClass(classes);
  }
}

function clearGeneratedClasses(element, options) {
  if (options.preparationClasses) {
    element.removeClass(options.preparationClasses);
    options.preparationClasses = null;
  }
  if (options.activeClasses) {
    element.removeClass(options.activeClasses);
    options.activeClasses = null;
  }
}

function blockTransitions(node, duration) {
  // we use a negative delay value since it performs blocking
  // yet it doesn't kill any existing transitions running on the
  // same element which makes this safe for class-based animations
  var value = duration ? '-' + duration + 's' : '';
  applyInlineStyle(node, [TRANSITION_DELAY_PROP, value]);
  return [TRANSITION_DELAY_PROP, value];
}

function blockKeyframeAnimations(node, applyBlock) {
  var value = applyBlock ? 'paused' : '';
  var key = ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY;
  applyInlineStyle(node, [key, value]);
  return [key, value];
}

function applyInlineStyle(node, styleTuple) {
  var prop = styleTuple[0];
  var value = styleTuple[1];
  node.style[prop] = value;
}

function concatWithSpace(a,b) {
  if (!a) return b;
  if (!b) return a;
  return a + ' ' + b;
}

var $$rAFSchedulerFactory = ['$$rAF', function($$rAF) {
  var queue, cancelFn;

  function scheduler(tasks) {
    // we make a copy since RAFScheduler mutates the state
    // of the passed in array variable and this would be difficult
    // to track down on the outside code
    queue = queue.concat(tasks);
    nextTick();
  }

  queue = scheduler.queue = [];

  /* waitUntilQuiet does two things:
   * 1. It will run the FINAL `fn` value only when an uncanceled RAF has passed through
   * 2. It will delay the next wave of tasks from running until the quiet `fn` has run.
   *
   * The motivation here is that animation code can request more time from the scheduler
   * before the next wave runs. This allows for certain DOM properties such as classes to
   * be resolved in time for the next animation to run.
   */
  scheduler.waitUntilQuiet = function(fn) {
    if (cancelFn) cancelFn();

    cancelFn = $$rAF(function() {
      cancelFn = null;
      fn();
      nextTick();
    });
  };

  return scheduler;

  function nextTick() {
    if (!queue.length) return;

    var items = queue.shift();
    for (var i = 0; i < items.length; i++) {
      items[i]();
    }

    if (!cancelFn) {
      $$rAF(function() {
        if (!cancelFn) nextTick();
      });
    }
  }
}];

/**
 * @ngdoc directive
 * @name ngAnimateChildren
 * @restrict AE
 * @element ANY
 *
 * @description
 *
 * ngAnimateChildren allows you to specify that children of this element should animate even if any
 * of the children's parents are currently animating. By default, when an element has an active `enter`, `leave`, or `move`
 * (structural) animation, child elements that also have an active structural animation are not animated.
 *
 * Note that even if `ngAnimteChildren` is set, no child animations will run when the parent element is removed from the DOM (`leave` animation).
 *
 *
 * @param {string} ngAnimateChildren If the value is empty, `true` or `on`,
 *     then child animations are allowed. If the value is `false`, child animations are not allowed.
 *
 * @example
 * <example module="ngAnimateChildren" name="ngAnimateChildren" deps="angular-animate.js" animations="true">
     <file name="index.html">
       <div ng-controller="mainController as main">
         <label>Show container? <input type="checkbox" ng-model="main.enterElement" /></label>
         <label>Animate children? <input type="checkbox" ng-model="main.animateChildren" /></label>
         <hr>
         <div ng-animate-children="{{main.animateChildren}}">
           <div ng-if="main.enterElement" class="container">
             List of items:
             <div ng-repeat="item in [0, 1, 2, 3]" class="item">Item {{item}}</div>
           </div>
         </div>
       </div>
     </file>
     <file name="animations.css">

      .container.ng-enter,
      .container.ng-leave {
        transition: all ease 1.5s;
      }

      .container.ng-enter,
      .container.ng-leave-active {
        opacity: 0;
      }

      .container.ng-leave,
      .container.ng-enter-active {
        opacity: 1;
      }

      .item {
        background: firebrick;
        color: #FFF;
        margin-bottom: 10px;
      }

      .item.ng-enter,
      .item.ng-leave {
        transition: transform 1.5s ease;
      }

      .item.ng-enter {
        transform: translateX(50px);
      }

      .item.ng-enter-active {
        transform: translateX(0);
      }
    </file>
    <file name="script.js">
      angular.module('ngAnimateChildren', ['ngAnimate'])
        .controller('mainController', function() {
          this.animateChildren = false;
          this.enterElement = false;
        });
    </file>
  </example>
 */
var $$AnimateChildrenDirective = ['$interpolate', function($interpolate) {
  return {
    link: function(scope, element, attrs) {
      var val = attrs.ngAnimateChildren;
      if (isString(val) && val.length === 0) { //empty attribute
        element.data(NG_ANIMATE_CHILDREN_DATA, true);
      } else {
        // Interpolate and set the value, so that it is available to
        // animations that run right after compilation
        setData($interpolate(val)(scope));
        attrs.$observe('ngAnimateChildren', setData);
      }

      function setData(value) {
        value = value === 'on' || value === 'true';
        element.data(NG_ANIMATE_CHILDREN_DATA, value);
      }
    }
  };
}];

var ANIMATE_TIMER_KEY = '$$animateCss';

/**
 * @ngdoc service
 * @name $animateCss
 * @kind object
 *
 * @description
 * The `$animateCss` service is a useful utility to trigger customized CSS-based transitions/keyframes
 * from a JavaScript-based animation or directly from a directive. The purpose of `$animateCss` is NOT
 * to side-step how `$animate` and ngAnimate work, but the goal is to allow pre-existing animations or
 * directives to create more complex animations that can be purely driven using CSS code.
 *
 * Note that only browsers that support CSS transitions and/or keyframe animations are capable of
 * rendering animations triggered via `$animateCss` (bad news for IE9 and lower).
 *
 * ## Usage
 * Once again, `$animateCss` is designed to be used inside of a registered JavaScript animation that
 * is powered by ngAnimate. It is possible to use `$animateCss` directly inside of a directive, however,
 * any automatic control over cancelling animations and/or preventing animations from being run on
 * child elements will not be handled by Angular. For this to work as expected, please use `$animate` to
 * trigger the animation and then setup a JavaScript animation that injects `$animateCss` to trigger
 * the CSS animation.
 *
 * The example below shows how we can create a folding animation on an element using `ng-if`:
 *
 * ```html
 * <!-- notice the `fold-animation` CSS class -->
 * <div ng-if="onOff" class="fold-animation">
 *   This element will go BOOM
 * </div>
 * <button ng-click="onOff=true">Fold In</button>
 * ```
 *
 * Now we create the **JavaScript animation** that will trigger the CSS transition:
 *
 * ```js
 * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {
 *   return {
 *     enter: function(element, doneFn) {
 *       var height = element[0].offsetHeight;
 *       return $animateCss(element, {
 *         from: { height:'0px' },
 *         to: { height:height + 'px' },
 *         duration: 1 // one second
 *       });
 *     }
 *   }
 * }]);
 * ```
 *
 * ## More Advanced Uses
 *
 * `$animateCss` is the underlying code that ngAnimate uses to power **CSS-based animations** behind the scenes. Therefore CSS hooks
 * like `.ng-EVENT`, `.ng-EVENT-active`, `.ng-EVENT-stagger` are all features that can be triggered using `$animateCss` via JavaScript code.
 *
 * This also means that just about any combination of adding classes, removing classes, setting styles, dynamically setting a keyframe animation,
 * applying a hardcoded duration or delay value, changing the animation easing or applying a stagger animation are all options that work with
 * `$animateCss`. The service itself is smart enough to figure out the combination of options and examine the element styling properties in order
 * to provide a working animation that will run in CSS.
 *
 * The example below showcases a more advanced version of the `.fold-animation` from the example above:
 *
 * ```js
 * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {
 *   return {
 *     enter: function(element, doneFn) {
 *       var height = element[0].offsetHeight;
 *       return $animateCss(element, {
 *         addClass: 'red large-text pulse-twice',
 *         easing: 'ease-out',
 *         from: { height:'0px' },
 *         to: { height:height + 'px' },
 *         duration: 1 // one second
 *       });
 *     }
 *   }
 * }]);
 * ```
 *
 * Since we're adding/removing CSS classes then the CSS transition will also pick those up:
 *
 * ```css
 * /&#42; since a hardcoded duration value of 1 was provided in the JavaScript animation code,
 * the CSS classes below will be transitioned despite them being defined as regular CSS classes &#42;/
 * .red { background:red; }
 * .large-text { font-size:20px; }
 *
 * /&#42; we can also use a keyframe animation and $animateCss will make it work alongside the transition &#42;/
 * .pulse-twice {
 *   animation: 0.5s pulse linear 2;
 *   -webkit-animation: 0.5s pulse linear 2;
 * }
 *
 * @keyframes pulse {
 *   from { transform: scale(0.5); }
 *   to { transform: scale(1.5); }
 * }
 *
 * @-webkit-keyframes pulse {
 *   from { -webkit-transform: scale(0.5); }
 *   to { -webkit-transform: scale(1.5); }
 * }
 * ```
 *
 * Given this complex combination of CSS classes, styles and options, `$animateCss` will figure everything out and make the animation happen.
 *
 * ## How the Options are handled
 *
 * `$animateCss` is very versatile and intelligent when it comes to figuring out what configurations to apply to the element to ensure the animation
 * works with the options provided. Say for example we were adding a class that contained a keyframe value and we wanted to also animate some inline
 * styles using the `from` and `to` properties.
 *
 * ```js
 * var animator = $animateCss(element, {
 *   from: { background:'red' },
 *   to: { background:'blue' }
 * });
 * animator.start();
 * ```
 *
 * ```css
 * .rotating-animation {
 *   animation:0.5s rotate linear;
 *   -webkit-animation:0.5s rotate linear;
 * }
 *
 * @keyframes rotate {
 *   from { transform: rotate(0deg); }
 *   to { transform: rotate(360deg); }
 * }
 *
 * @-webkit-keyframes rotate {
 *   from { -webkit-transform: rotate(0deg); }
 *   to { -webkit-transform: rotate(360deg); }
 * }
 * ```
 *
 * The missing pieces here are that we do not have a transition set (within the CSS code nor within the `$animateCss` options) and the duration of the animation is
 * going to be detected from what the keyframe styles on the CSS class are. In this event, `$animateCss` will automatically create an inline transition
 * style matching the duration detected from the keyframe style (which is present in the CSS class that is being added) and then prepare both the transition
 * and keyframe animations to run in parallel on the element. Then when the animation is underway the provided `from` and `to` CSS styles will be applied
 * and spread across the transition and keyframe animation.
 *
 * ## What is returned
 *
 * `$animateCss` works in two stages: a preparation phase and an animation phase. Therefore when `$animateCss` is first called it will NOT actually
 * start the animation. All that is going on here is that the element is being prepared for the animation (which means that the generated CSS classes are
 * added and removed on the element). Once `$animateCss` is called it will return an object with the following properties:
 *
 * ```js
 * var animator = $animateCss(element, { ... });
 * ```
 *
 * Now what do the contents of our `animator` variable look like:
 *
 * ```js
 * {
 *   // starts the animation
 *   start: Function,
 *
 *   // ends (aborts) the animation
 *   end: Function
 * }
 * ```
 *
 * To actually start the animation we need to run `animation.start()` which will then return a promise that we can hook into to detect when the animation ends.
 * If we choose not to run the animation then we MUST run `animation.end()` to perform a cleanup on the element (since some CSS classes and styles may have been
 * applied to the element during the preparation phase). Note that all other properties such as duration, delay, transitions and keyframes are just properties
 * and that changing them will not reconfigure the parameters of the animation.
 *
 * ### runner.done() vs runner.then()
 * It is documented that `animation.start()` will return a promise object and this is true, however, there is also an additional method available on the
 * runner called `.done(callbackFn)`. The done method works the same as `.finally(callbackFn)`, however, it does **not trigger a digest to occur**.
 * Therefore, for performance reasons, it's always best to use `runner.done(callback)` instead of `runner.then()`, `runner.catch()` or `runner.finally()`
 * unless you really need a digest to kick off afterwards.
 *
 * Keep in mind that, to make this easier, ngAnimate has tweaked the JS animations API to recognize when a runner instance is returned from $animateCss
 * (so there is no need to call `runner.done(doneFn)` inside of your JavaScript animation code).
 * Check the {@link ngAnimate.$animateCss#usage animation code above} to see how this works.
 *
 * @param {DOMElement} element the element that will be animated
 * @param {object} options the animation-related options that will be applied during the animation
 *
 * * `event` - The DOM event (e.g. enter, leave, move). When used, a generated CSS class of `ng-EVENT` and `ng-EVENT-active` will be applied
 * to the element during the animation. Multiple events can be provided when spaces are used as a separator. (Note that this will not perform any DOM operation.)
 * * `structural` - Indicates that the `ng-` prefix will be added to the event class. Setting to `false` or omitting will turn `ng-EVENT` and
 * `ng-EVENT-active` in `EVENT` and `EVENT-active`. Unused if `event` is omitted.
 * * `easing` - The CSS easing value that will be applied to the transition or keyframe animation (or both).
 * * `transitionStyle` - The raw CSS transition style that will be used (e.g. `1s linear all`).
 * * `keyframeStyle` - The raw CSS keyframe animation style that will be used (e.g. `1s my_animation linear`).
 * * `from` - The starting CSS styles (a key/value object) that will be applied at the start of the animation.
 * * `to` - The ending CSS styles (a key/value object) that will be applied across the animation via a CSS transition.
 * * `addClass` - A space separated list of CSS classes that will be added to the element and spread across the animation.
 * * `removeClass` - A space separated list of CSS classes that will be removed from the element and spread across the animation.
 * * `duration` - A number value representing the total duration of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `0`
 * is provided then the animation will be skipped entirely.
 * * `delay` - A number value representing the total delay of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `true` is
 * used then whatever delay value is detected from the CSS classes will be mirrored on the elements styles (e.g. by setting delay true then the style value
 * of the element will be `transition-delay: DETECTED_VALUE`). Using `true` is useful when you want the CSS classes and inline styles to all share the same
 * CSS delay value.
 * * `stagger` - A numeric time value representing the delay between successively animated elements
 * ({@link ngAnimate#css-staggering-animations Click here to learn how CSS-based staggering works in ngAnimate.})
 * * `staggerIndex` - The numeric index representing the stagger item (e.g. a value of 5 is equal to the sixth item in the stagger; therefore when a
 *   `stagger` option value of `0.1` is used then there will be a stagger delay of `600ms`)
 * * `applyClassesEarly` - Whether or not the classes being added or removed will be used when detecting the animation. This is set by `$animate` when enter/leave/move animations are fired to ensure that the CSS classes are resolved in time. (Note that this will prevent any transitions from occurring on the classes being added and removed.)
 * * `cleanupStyles` - Whether or not the provided `from` and `to` styles will be removed once
 *    the animation is closed. This is useful for when the styles are used purely for the sake of
 *    the animation and do not have a lasting visual effect on the element (e.g. a collapse and open animation).
 *    By default this value is set to `false`.
 *
 * @return {object} an object with start and end methods and details about the animation.
 *
 * * `start` - The method to start the animation. This will return a `Promise` when called.
 * * `end` - This method will cancel the animation and remove all applied CSS classes and styles.
 */
var ONE_SECOND = 1000;
var BASE_TEN = 10;

var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
var CLOSING_TIME_BUFFER = 1.5;

var DETECT_CSS_PROPERTIES = {
  transitionDuration:      TRANSITION_DURATION_PROP,
  transitionDelay:         TRANSITION_DELAY_PROP,
  transitionProperty:      TRANSITION_PROP + PROPERTY_KEY,
  animationDuration:       ANIMATION_DURATION_PROP,
  animationDelay:          ANIMATION_DELAY_PROP,
  animationIterationCount: ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY
};

var DETECT_STAGGER_CSS_PROPERTIES = {
  transitionDuration:      TRANSITION_DURATION_PROP,
  transitionDelay:         TRANSITION_DELAY_PROP,
  animationDuration:       ANIMATION_DURATION_PROP,
  animationDelay:          ANIMATION_DELAY_PROP
};

function getCssKeyframeDurationStyle(duration) {
  return [ANIMATION_DURATION_PROP, duration + 's'];
}

function getCssDelayStyle(delay, isKeyframeAnimation) {
  var prop = isKeyframeAnimation ? ANIMATION_DELAY_PROP : TRANSITION_DELAY_PROP;
  return [prop, delay + 's'];
}

function computeCssStyles($window, element, properties) {
  var styles = Object.create(null);
  var detectedStyles = $window.getComputedStyle(element) || {};
  forEach(properties, function(formalStyleName, actualStyleName) {
    var val = detectedStyles[formalStyleName];
    if (val) {
      var c = val.charAt(0);

      // only numerical-based values have a negative sign or digit as the first value
      if (c === '-' || c === '+' || c >= 0) {
        val = parseMaxTime(val);
      }

      // by setting this to null in the event that the delay is not set or is set directly as 0
      // then we can still allow for negative values to be used later on and not mistake this
      // value for being greater than any other negative value.
      if (val === 0) {
        val = null;
      }
      styles[actualStyleName] = val;
    }
  });

  return styles;
}

function parseMaxTime(str) {
  var maxValue = 0;
  var values = str.split(/\s*,\s*/);
  forEach(values, function(value) {
    // it's always safe to consider only second values and omit `ms` values since
    // getComputedStyle will always handle the conversion for us
    if (value.charAt(value.length - 1) == 's') {
      value = value.substring(0, value.length - 1);
    }
    value = parseFloat(value) || 0;
    maxValue = maxValue ? Math.max(value, maxValue) : value;
  });
  return maxValue;
}

function truthyTimingValue(val) {
  return val === 0 || val != null;
}

function getCssTransitionDurationStyle(duration, applyOnlyDuration) {
  var style = TRANSITION_PROP;
  var value = duration + 's';
  if (applyOnlyDuration) {
    style += DURATION_KEY;
  } else {
    value += ' linear all';
  }
  return [style, value];
}

function createLocalCacheLookup() {
  var cache = Object.create(null);
  return {
    flush: function() {
      cache = Object.create(null);
    },

    count: function(key) {
      var entry = cache[key];
      return entry ? entry.total : 0;
    },

    get: function(key) {
      var entry = cache[key];
      return entry && entry.value;
    },

    put: function(key, value) {
      if (!cache[key]) {
        cache[key] = { total: 1, value: value };
      } else {
        cache[key].total++;
      }
    }
  };
}

// we do not reassign an already present style value since
// if we detect the style property value again we may be
// detecting styles that were added via the `from` styles.
// We make use of `isDefined` here since an empty string
// or null value (which is what getPropertyValue will return
// for a non-existing style) will still be marked as a valid
// value for the style (a falsy value implies that the style
// is to be removed at the end of the animation). If we had a simple
// "OR" statement then it would not be enough to catch that.
function registerRestorableStyles(backup, node, properties) {
  forEach(properties, function(prop) {
    backup[prop] = isDefined(backup[prop])
        ? backup[prop]
        : node.style.getPropertyValue(prop);
  });
}

var $AnimateCssProvider = ['$animateProvider', function($animateProvider) {
  var gcsLookup = createLocalCacheLookup();
  var gcsStaggerLookup = createLocalCacheLookup();

  this.$get = ['$window', '$$jqLite', '$$AnimateRunner', '$timeout',
               '$$forceReflow', '$sniffer', '$$rAFScheduler', '$$animateQueue',
       function($window,   $$jqLite,   $$AnimateRunner,   $timeout,
                $$forceReflow,   $sniffer,   $$rAFScheduler, $$animateQueue) {

    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

    var parentCounter = 0;
    function gcsHashFn(node, extraClasses) {
      var KEY = "$$ngAnimateParentKey";
      var parentNode = node.parentNode;
      var parentID = parentNode[KEY] || (parentNode[KEY] = ++parentCounter);
      return parentID + '-' + node.getAttribute('class') + '-' + extraClasses;
    }

    function computeCachedCssStyles(node, className, cacheKey, properties) {
      var timings = gcsLookup.get(cacheKey);

      if (!timings) {
        timings = computeCssStyles($window, node, properties);
        if (timings.animationIterationCount === 'infinite') {
          timings.animationIterationCount = 1;
        }
      }

      // we keep putting this in multiple times even though the value and the cacheKey are the same
      // because we're keeping an internal tally of how many duplicate animations are detected.
      gcsLookup.put(cacheKey, timings);
      return timings;
    }

    function computeCachedCssStaggerStyles(node, className, cacheKey, properties) {
      var stagger;

      // if we have one or more existing matches of matching elements
      // containing the same parent + CSS styles (which is how cacheKey works)
      // then staggering is possible
      if (gcsLookup.count(cacheKey) > 0) {
        stagger = gcsStaggerLookup.get(cacheKey);

        if (!stagger) {
          var staggerClassName = pendClasses(className, '-stagger');

          $$jqLite.addClass(node, staggerClassName);

          stagger = computeCssStyles($window, node, properties);

          // force the conversion of a null value to zero incase not set
          stagger.animationDuration = Math.max(stagger.animationDuration, 0);
          stagger.transitionDuration = Math.max(stagger.transitionDuration, 0);

          $$jqLite.removeClass(node, staggerClassName);

          gcsStaggerLookup.put(cacheKey, stagger);
        }
      }

      return stagger || {};
    }

    var cancelLastRAFRequest;
    var rafWaitQueue = [];
    function waitUntilQuiet(callback) {
      rafWaitQueue.push(callback);
      $$rAFScheduler.waitUntilQuiet(function() {
        gcsLookup.flush();
        gcsStaggerLookup.flush();

        // DO NOT REMOVE THIS LINE OR REFACTOR OUT THE `pageWidth` variable.
        // PLEASE EXAMINE THE `$$forceReflow` service to understand why.
        var pageWidth = $$forceReflow();

        // we use a for loop to ensure that if the queue is changed
        // during this looping then it will consider new requests
        for (var i = 0; i < rafWaitQueue.length; i++) {
          rafWaitQueue[i](pageWidth);
        }
        rafWaitQueue.length = 0;
      });
    }

    function computeTimings(node, className, cacheKey) {
      var timings = computeCachedCssStyles(node, className, cacheKey, DETECT_CSS_PROPERTIES);
      var aD = timings.animationDelay;
      var tD = timings.transitionDelay;
      timings.maxDelay = aD && tD
          ? Math.max(aD, tD)
          : (aD || tD);
      timings.maxDuration = Math.max(
          timings.animationDuration * timings.animationIterationCount,
          timings.transitionDuration);

      return timings;
    }

    return function init(element, initialOptions) {
      // all of the animation functions should create
      // a copy of the options data, however, if a
      // parent service has already created a copy then
      // we should stick to using that
      var options = initialOptions || {};
      if (!options.$$prepared) {
        options = prepareAnimationOptions(copy(options));
      }

      var restoreStyles = {};
      var node = getDomNode(element);
      if (!node
          || !node.parentNode
          || !$$animateQueue.enabled()) {
        return closeAndReturnNoopAnimator();
      }

      var temporaryStyles = [];
      var classes = element.attr('class');
      var styles = packageStyles(options);
      var animationClosed;
      var animationPaused;
      var animationCompleted;
      var runner;
      var runnerHost;
      var maxDelay;
      var maxDelayTime;
      var maxDuration;
      var maxDurationTime;
      var startTime;
      var events = [];

      if (options.duration === 0 || (!$sniffer.animations && !$sniffer.transitions)) {
        return closeAndReturnNoopAnimator();
      }

      var method = options.event && isArray(options.event)
            ? options.event.join(' ')
            : options.event;

      var isStructural = method && options.structural;
      var structuralClassName = '';
      var addRemoveClassName = '';

      if (isStructural) {
        structuralClassName = pendClasses(method, EVENT_CLASS_PREFIX, true);
      } else if (method) {
        structuralClassName = method;
      }

      if (options.addClass) {
        addRemoveClassName += pendClasses(options.addClass, ADD_CLASS_SUFFIX);
      }

      if (options.removeClass) {
        if (addRemoveClassName.length) {
          addRemoveClassName += ' ';
        }
        addRemoveClassName += pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX);
      }

      // there may be a situation where a structural animation is combined together
      // with CSS classes that need to resolve before the animation is computed.
      // However this means that there is no explicit CSS code to block the animation
      // from happening (by setting 0s none in the class name). If this is the case
      // we need to apply the classes before the first rAF so we know to continue if
      // there actually is a detected transition or keyframe animation
      if (options.applyClassesEarly && addRemoveClassName.length) {
        applyAnimationClasses(element, options);
      }

      var preparationClasses = [structuralClassName, addRemoveClassName].join(' ').trim();
      var fullClassName = classes + ' ' + preparationClasses;
      var activeClasses = pendClasses(preparationClasses, ACTIVE_CLASS_SUFFIX);
      var hasToStyles = styles.to && Object.keys(styles.to).length > 0;
      var containsKeyframeAnimation = (options.keyframeStyle || '').length > 0;

      // there is no way we can trigger an animation if no styles and
      // no classes are being applied which would then trigger a transition,
      // unless there a is raw keyframe value that is applied to the element.
      if (!containsKeyframeAnimation
           && !hasToStyles
           && !preparationClasses) {
        return closeAndReturnNoopAnimator();
      }

      var cacheKey, stagger;
      if (options.stagger > 0) {
        var staggerVal = parseFloat(options.stagger);
        stagger = {
          transitionDelay: staggerVal,
          animationDelay: staggerVal,
          transitionDuration: 0,
          animationDuration: 0
        };
      } else {
        cacheKey = gcsHashFn(node, fullClassName);
        stagger = computeCachedCssStaggerStyles(node, preparationClasses, cacheKey, DETECT_STAGGER_CSS_PROPERTIES);
      }

      if (!options.$$skipPreparationClasses) {
        $$jqLite.addClass(element, preparationClasses);
      }

      var applyOnlyDuration;

      if (options.transitionStyle) {
        var transitionStyle = [TRANSITION_PROP, options.transitionStyle];
        applyInlineStyle(node, transitionStyle);
        temporaryStyles.push(transitionStyle);
      }

      if (options.duration >= 0) {
        applyOnlyDuration = node.style[TRANSITION_PROP].length > 0;
        var durationStyle = getCssTransitionDurationStyle(options.duration, applyOnlyDuration);

        // we set the duration so that it will be picked up by getComputedStyle later
        applyInlineStyle(node, durationStyle);
        temporaryStyles.push(durationStyle);
      }

      if (options.keyframeStyle) {
        var keyframeStyle = [ANIMATION_PROP, options.keyframeStyle];
        applyInlineStyle(node, keyframeStyle);
        temporaryStyles.push(keyframeStyle);
      }

      var itemIndex = stagger
          ? options.staggerIndex >= 0
              ? options.staggerIndex
              : gcsLookup.count(cacheKey)
          : 0;

      var isFirst = itemIndex === 0;

      // this is a pre-emptive way of forcing the setup classes to be added and applied INSTANTLY
      // without causing any combination of transitions to kick in. By adding a negative delay value
      // it forces the setup class' transition to end immediately. We later then remove the negative
      // transition delay to allow for the transition to naturally do it's thing. The beauty here is
      // that if there is no transition defined then nothing will happen and this will also allow
      // other transitions to be stacked on top of each other without any chopping them out.
      if (isFirst && !options.skipBlocking) {
        blockTransitions(node, SAFE_FAST_FORWARD_DURATION_VALUE);
      }

      var timings = computeTimings(node, fullClassName, cacheKey);
      var relativeDelay = timings.maxDelay;
      maxDelay = Math.max(relativeDelay, 0);
      maxDuration = timings.maxDuration;

      var flags = {};
      flags.hasTransitions          = timings.transitionDuration > 0;
      flags.hasAnimations           = timings.animationDuration > 0;
      flags.hasTransitionAll        = flags.hasTransitions && timings.transitionProperty == 'all';
      flags.applyTransitionDuration = hasToStyles && (
                                        (flags.hasTransitions && !flags.hasTransitionAll)
                                         || (flags.hasAnimations && !flags.hasTransitions));
      flags.applyAnimationDuration  = options.duration && flags.hasAnimations;
      flags.applyTransitionDelay    = truthyTimingValue(options.delay) && (flags.applyTransitionDuration || flags.hasTransitions);
      flags.applyAnimationDelay     = truthyTimingValue(options.delay) && flags.hasAnimations;
      flags.recalculateTimingStyles = addRemoveClassName.length > 0;

      if (flags.applyTransitionDuration || flags.applyAnimationDuration) {
        maxDuration = options.duration ? parseFloat(options.duration) : maxDuration;

        if (flags.applyTransitionDuration) {
          flags.hasTransitions = true;
          timings.transitionDuration = maxDuration;
          applyOnlyDuration = node.style[TRANSITION_PROP + PROPERTY_KEY].length > 0;
          temporaryStyles.push(getCssTransitionDurationStyle(maxDuration, applyOnlyDuration));
        }

        if (flags.applyAnimationDuration) {
          flags.hasAnimations = true;
          timings.animationDuration = maxDuration;
          temporaryStyles.push(getCssKeyframeDurationStyle(maxDuration));
        }
      }

      if (maxDuration === 0 && !flags.recalculateTimingStyles) {
        return closeAndReturnNoopAnimator();
      }

      if (options.delay != null) {
        var delayStyle;
        if (typeof options.delay !== "boolean") {
          delayStyle = parseFloat(options.delay);
          // number in options.delay means we have to recalculate the delay for the closing timeout
          maxDelay = Math.max(delayStyle, 0);
        }

        if (flags.applyTransitionDelay) {
          temporaryStyles.push(getCssDelayStyle(delayStyle));
        }

        if (flags.applyAnimationDelay) {
          temporaryStyles.push(getCssDelayStyle(delayStyle, true));
        }
      }

      // we need to recalculate the delay value since we used a pre-emptive negative
      // delay value and the delay value is required for the final event checking. This
      // property will ensure that this will happen after the RAF phase has passed.
      if (options.duration == null && timings.transitionDuration > 0) {
        flags.recalculateTimingStyles = flags.recalculateTimingStyles || isFirst;
      }

      maxDelayTime = maxDelay * ONE_SECOND;
      maxDurationTime = maxDuration * ONE_SECOND;
      if (!options.skipBlocking) {
        flags.blockTransition = timings.transitionDuration > 0;
        flags.blockKeyframeAnimation = timings.animationDuration > 0 &&
                                       stagger.animationDelay > 0 &&
                                       stagger.animationDuration === 0;
      }

      if (options.from) {
        if (options.cleanupStyles) {
          registerRestorableStyles(restoreStyles, node, Object.keys(options.from));
        }
        applyAnimationFromStyles(element, options);
      }

      if (flags.blockTransition || flags.blockKeyframeAnimation) {
        applyBlocking(maxDuration);
      } else if (!options.skipBlocking) {
        blockTransitions(node, false);
      }

      // TODO(matsko): for 1.5 change this code to have an animator object for better debugging
      return {
        $$willAnimate: true,
        end: endFn,
        start: function() {
          if (animationClosed) return;

          runnerHost = {
            end: endFn,
            cancel: cancelFn,
            resume: null, //this will be set during the start() phase
            pause: null
          };

          runner = new $$AnimateRunner(runnerHost);

          waitUntilQuiet(start);

          // we don't have access to pause/resume the animation
          // since it hasn't run yet. AnimateRunner will therefore
          // set noop functions for resume and pause and they will
          // later be overridden once the animation is triggered
          return runner;
        }
      };

      function endFn() {
        close();
      }

      function cancelFn() {
        close(true);
      }

      function close(rejected) { // jshint ignore:line
        // if the promise has been called already then we shouldn't close
        // the animation again
        if (animationClosed || (animationCompleted && animationPaused)) return;
        animationClosed = true;
        animationPaused = false;

        if (!options.$$skipPreparationClasses) {
          $$jqLite.removeClass(element, preparationClasses);
        }
        $$jqLite.removeClass(element, activeClasses);

        blockKeyframeAnimations(node, false);
        blockTransitions(node, false);

        forEach(temporaryStyles, function(entry) {
          // There is only one way to remove inline style properties entirely from elements.
          // By using `removeProperty` this works, but we need to convert camel-cased CSS
          // styles down to hyphenated values.
          node.style[entry[0]] = '';
        });

        applyAnimationClasses(element, options);
        applyAnimationStyles(element, options);

        if (Object.keys(restoreStyles).length) {
          forEach(restoreStyles, function(value, prop) {
            value ? node.style.setProperty(prop, value)
                  : node.style.removeProperty(prop);
          });
        }

        // the reason why we have this option is to allow a synchronous closing callback
        // that is fired as SOON as the animation ends (when the CSS is removed) or if
        // the animation never takes off at all. A good example is a leave animation since
        // the element must be removed just after the animation is over or else the element
        // will appear on screen for one animation frame causing an overbearing flicker.
        if (options.onDone) {
          options.onDone();
        }

        if (events && events.length) {
          // Remove the transitionend / animationend listener(s)
          element.off(events.join(' '), onAnimationProgress);
        }

        //Cancel the fallback closing timeout and remove the timer data
        var animationTimerData = element.data(ANIMATE_TIMER_KEY);
        if (animationTimerData) {
          $timeout.cancel(animationTimerData[0].timer);
          element.removeData(ANIMATE_TIMER_KEY);
        }

        // if the preparation function fails then the promise is not setup
        if (runner) {
          runner.complete(!rejected);
        }
      }

      function applyBlocking(duration) {
        if (flags.blockTransition) {
          blockTransitions(node, duration);
        }

        if (flags.blockKeyframeAnimation) {
          blockKeyframeAnimations(node, !!duration);
        }
      }

      function closeAndReturnNoopAnimator() {
        runner = new $$AnimateRunner({
          end: endFn,
          cancel: cancelFn
        });

        // should flush the cache animation
        waitUntilQuiet(noop);
        close();

        return {
          $$willAnimate: false,
          start: function() {
            return runner;
          },
          end: endFn
        };
      }

      function onAnimationProgress(event) {
        event.stopPropagation();
        var ev = event.originalEvent || event;

        // we now always use `Date.now()` due to the recent changes with
        // event.timeStamp in Firefox, Webkit and Chrome (see #13494 for more info)
        var timeStamp = ev.$manualTimeStamp || Date.now();

        /* Firefox (or possibly just Gecko) likes to not round values up
         * when a ms measurement is used for the animation */
        var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));

        /* $manualTimeStamp is a mocked timeStamp value which is set
         * within browserTrigger(). This is only here so that tests can
         * mock animations properly. Real events fallback to event.timeStamp,
         * or, if they don't, then a timeStamp is automatically created for them.
         * We're checking to see if the timeStamp surpasses the expected delay,
         * but we're using elapsedTime instead of the timeStamp on the 2nd
         * pre-condition since animationPauseds sometimes close off early */
        if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {
          // we set this flag to ensure that if the transition is paused then, when resumed,
          // the animation will automatically close itself since transitions cannot be paused.
          animationCompleted = true;
          close();
        }
      }

      function start() {
        if (animationClosed) return;
        if (!node.parentNode) {
          close();
          return;
        }

        // even though we only pause keyframe animations here the pause flag
        // will still happen when transitions are used. Only the transition will
        // not be paused since that is not possible. If the animation ends when
        // paused then it will not complete until unpaused or cancelled.
        var playPause = function(playAnimation) {
          if (!animationCompleted) {
            animationPaused = !playAnimation;
            if (timings.animationDuration) {
              var value = blockKeyframeAnimations(node, animationPaused);
              animationPaused
                  ? temporaryStyles.push(value)
                  : removeFromArray(temporaryStyles, value);
            }
          } else if (animationPaused && playAnimation) {
            animationPaused = false;
            close();
          }
        };

        // checking the stagger duration prevents an accidentally cascade of the CSS delay style
        // being inherited from the parent. If the transition duration is zero then we can safely
        // rely that the delay value is an intentional stagger delay style.
        var maxStagger = itemIndex > 0
                         && ((timings.transitionDuration && stagger.transitionDuration === 0) ||
                            (timings.animationDuration && stagger.animationDuration === 0))
                         && Math.max(stagger.animationDelay, stagger.transitionDelay);
        if (maxStagger) {
          $timeout(triggerAnimationStart,
                   Math.floor(maxStagger * itemIndex * ONE_SECOND),
                   false);
        } else {
          triggerAnimationStart();
        }

        // this will decorate the existing promise runner with pause/resume methods
        runnerHost.resume = function() {
          playPause(true);
        };

        runnerHost.pause = function() {
          playPause(false);
        };

        function triggerAnimationStart() {
          // just incase a stagger animation kicks in when the animation
          // itself was cancelled entirely
          if (animationClosed) return;

          applyBlocking(false);

          forEach(temporaryStyles, function(entry) {
            var key = entry[0];
            var value = entry[1];
            node.style[key] = value;
          });

          applyAnimationClasses(element, options);
          $$jqLite.addClass(element, activeClasses);

          if (flags.recalculateTimingStyles) {
            fullClassName = node.className + ' ' + preparationClasses;
            cacheKey = gcsHashFn(node, fullClassName);

            timings = computeTimings(node, fullClassName, cacheKey);
            relativeDelay = timings.maxDelay;
            maxDelay = Math.max(relativeDelay, 0);
            maxDuration = timings.maxDuration;

            if (maxDuration === 0) {
              close();
              return;
            }

            flags.hasTransitions = timings.transitionDuration > 0;
            flags.hasAnimations = timings.animationDuration > 0;
          }

          if (flags.applyAnimationDelay) {
            relativeDelay = typeof options.delay !== "boolean" && truthyTimingValue(options.delay)
                  ? parseFloat(options.delay)
                  : relativeDelay;

            maxDelay = Math.max(relativeDelay, 0);
            timings.animationDelay = relativeDelay;
            delayStyle = getCssDelayStyle(relativeDelay, true);
            temporaryStyles.push(delayStyle);
            node.style[delayStyle[0]] = delayStyle[1];
          }

          maxDelayTime = maxDelay * ONE_SECOND;
          maxDurationTime = maxDuration * ONE_SECOND;

          if (options.easing) {
            var easeProp, easeVal = options.easing;
            if (flags.hasTransitions) {
              easeProp = TRANSITION_PROP + TIMING_KEY;
              temporaryStyles.push([easeProp, easeVal]);
              node.style[easeProp] = easeVal;
            }
            if (flags.hasAnimations) {
              easeProp = ANIMATION_PROP + TIMING_KEY;
              temporaryStyles.push([easeProp, easeVal]);
              node.style[easeProp] = easeVal;
            }
          }

          if (timings.transitionDuration) {
            events.push(TRANSITIONEND_EVENT);
          }

          if (timings.animationDuration) {
            events.push(ANIMATIONEND_EVENT);
          }

          startTime = Date.now();
          var timerTime = maxDelayTime + CLOSING_TIME_BUFFER * maxDurationTime;
          var endTime = startTime + timerTime;

          var animationsData = element.data(ANIMATE_TIMER_KEY) || [];
          var setupFallbackTimer = true;
          if (animationsData.length) {
            var currentTimerData = animationsData[0];
            setupFallbackTimer = endTime > currentTimerData.expectedEndTime;
            if (setupFallbackTimer) {
              $timeout.cancel(currentTimerData.timer);
            } else {
              animationsData.push(close);
            }
          }

          if (setupFallbackTimer) {
            var timer = $timeout(onAnimationExpired, timerTime, false);
            animationsData[0] = {
              timer: timer,
              expectedEndTime: endTime
            };
            animationsData.push(close);
            element.data(ANIMATE_TIMER_KEY, animationsData);
          }

          if (events.length) {
            element.on(events.join(' '), onAnimationProgress);
          }

          if (options.to) {
            if (options.cleanupStyles) {
              registerRestorableStyles(restoreStyles, node, Object.keys(options.to));
            }
            applyAnimationToStyles(element, options);
          }
        }

        function onAnimationExpired() {
          var animationsData = element.data(ANIMATE_TIMER_KEY);

          // this will be false in the event that the element was
          // removed from the DOM (via a leave animation or something
          // similar)
          if (animationsData) {
            for (var i = 1; i < animationsData.length; i++) {
              animationsData[i]();
            }
            element.removeData(ANIMATE_TIMER_KEY);
          }
        }
      }
    };
  }];
}];

var $$AnimateCssDriverProvider = ['$$animationProvider', function($$animationProvider) {
  $$animationProvider.drivers.push('$$animateCssDriver');

  var NG_ANIMATE_SHIM_CLASS_NAME = 'ng-animate-shim';
  var NG_ANIMATE_ANCHOR_CLASS_NAME = 'ng-anchor';

  var NG_OUT_ANCHOR_CLASS_NAME = 'ng-anchor-out';
  var NG_IN_ANCHOR_CLASS_NAME = 'ng-anchor-in';

  function isDocumentFragment(node) {
    return node.parentNode && node.parentNode.nodeType === 11;
  }

  this.$get = ['$animateCss', '$rootScope', '$$AnimateRunner', '$rootElement', '$sniffer', '$$jqLite', '$document',
       function($animateCss,   $rootScope,   $$AnimateRunner,   $rootElement,   $sniffer,   $$jqLite,   $document) {

    // only browsers that support these properties can render animations
    if (!$sniffer.animations && !$sniffer.transitions) return noop;

    var bodyNode = $document[0].body;
    var rootNode = getDomNode($rootElement);

    var rootBodyElement = jqLite(
      // this is to avoid using something that exists outside of the body
      // we also special case the doc fragment case because our unit test code
      // appends the $rootElement to the body after the app has been bootstrapped
      isDocumentFragment(rootNode) || bodyNode.contains(rootNode) ? rootNode : bodyNode
    );

    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

    return function initDriverFn(animationDetails) {
      return animationDetails.from && animationDetails.to
          ? prepareFromToAnchorAnimation(animationDetails.from,
                                         animationDetails.to,
                                         animationDetails.classes,
                                         animationDetails.anchors)
          : prepareRegularAnimation(animationDetails);
    };

    function filterCssClasses(classes) {
      //remove all the `ng-` stuff
      return classes.replace(/\bng-\S+\b/g, '');
    }

    function getUniqueValues(a, b) {
      if (isString(a)) a = a.split(' ');
      if (isString(b)) b = b.split(' ');
      return a.filter(function(val) {
        return b.indexOf(val) === -1;
      }).join(' ');
    }

    function prepareAnchoredAnimation(classes, outAnchor, inAnchor) {
      var clone = jqLite(getDomNode(outAnchor).cloneNode(true));
      var startingClasses = filterCssClasses(getClassVal(clone));

      outAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);
      inAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);

      clone.addClass(NG_ANIMATE_ANCHOR_CLASS_NAME);

      rootBodyElement.append(clone);

      var animatorIn, animatorOut = prepareOutAnimation();

      // the user may not end up using the `out` animation and
      // only making use of the `in` animation or vice-versa.
      // In either case we should allow this and not assume the
      // animation is over unless both animations are not used.
      if (!animatorOut) {
        animatorIn = prepareInAnimation();
        if (!animatorIn) {
          return end();
        }
      }

      var startingAnimator = animatorOut || animatorIn;

      return {
        start: function() {
          var runner;

          var currentAnimation = startingAnimator.start();
          currentAnimation.done(function() {
            currentAnimation = null;
            if (!animatorIn) {
              animatorIn = prepareInAnimation();
              if (animatorIn) {
                currentAnimation = animatorIn.start();
                currentAnimation.done(function() {
                  currentAnimation = null;
                  end();
                  runner.complete();
                });
                return currentAnimation;
              }
            }
            // in the event that there is no `in` animation
            end();
            runner.complete();
          });

          runner = new $$AnimateRunner({
            end: endFn,
            cancel: endFn
          });

          return runner;

          function endFn() {
            if (currentAnimation) {
              currentAnimation.end();
            }
          }
        }
      };

      function calculateAnchorStyles(anchor) {
        var styles = {};

        var coords = getDomNode(anchor).getBoundingClientRect();

        // we iterate directly since safari messes up and doesn't return
        // all the keys for the coords object when iterated
        forEach(['width','height','top','left'], function(key) {
          var value = coords[key];
          switch (key) {
            case 'top':
              value += bodyNode.scrollTop;
              break;
            case 'left':
              value += bodyNode.scrollLeft;
              break;
          }
          styles[key] = Math.floor(value) + 'px';
        });
        return styles;
      }

      function prepareOutAnimation() {
        var animator = $animateCss(clone, {
          addClass: NG_OUT_ANCHOR_CLASS_NAME,
          delay: true,
          from: calculateAnchorStyles(outAnchor)
        });

        // read the comment within `prepareRegularAnimation` to understand
        // why this check is necessary
        return animator.$$willAnimate ? animator : null;
      }

      function getClassVal(element) {
        return element.attr('class') || '';
      }

      function prepareInAnimation() {
        var endingClasses = filterCssClasses(getClassVal(inAnchor));
        var toAdd = getUniqueValues(endingClasses, startingClasses);
        var toRemove = getUniqueValues(startingClasses, endingClasses);

        var animator = $animateCss(clone, {
          to: calculateAnchorStyles(inAnchor),
          addClass: NG_IN_ANCHOR_CLASS_NAME + ' ' + toAdd,
          removeClass: NG_OUT_ANCHOR_CLASS_NAME + ' ' + toRemove,
          delay: true
        });

        // read the comment within `prepareRegularAnimation` to understand
        // why this check is necessary
        return animator.$$willAnimate ? animator : null;
      }

      function end() {
        clone.remove();
        outAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
        inAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
      }
    }

    function prepareFromToAnchorAnimation(from, to, classes, anchors) {
      var fromAnimation = prepareRegularAnimation(from, noop);
      var toAnimation = prepareRegularAnimation(to, noop);

      var anchorAnimations = [];
      forEach(anchors, function(anchor) {
        var outElement = anchor['out'];
        var inElement = anchor['in'];
        var animator = prepareAnchoredAnimation(classes, outElement, inElement);
        if (animator) {
          anchorAnimations.push(animator);
        }
      });

      // no point in doing anything when there are no elements to animate
      if (!fromAnimation && !toAnimation && anchorAnimations.length === 0) return;

      return {
        start: function() {
          var animationRunners = [];

          if (fromAnimation) {
            animationRunners.push(fromAnimation.start());
          }

          if (toAnimation) {
            animationRunners.push(toAnimation.start());
          }

          forEach(anchorAnimations, function(animation) {
            animationRunners.push(animation.start());
          });

          var runner = new $$AnimateRunner({
            end: endFn,
            cancel: endFn // CSS-driven animations cannot be cancelled, only ended
          });

          $$AnimateRunner.all(animationRunners, function(status) {
            runner.complete(status);
          });

          return runner;

          function endFn() {
            forEach(animationRunners, function(runner) {
              runner.end();
            });
          }
        }
      };
    }

    function prepareRegularAnimation(animationDetails) {
      var element = animationDetails.element;
      var options = animationDetails.options || {};

      if (animationDetails.structural) {
        options.event = animationDetails.event;
        options.structural = true;
        options.applyClassesEarly = true;

        // we special case the leave animation since we want to ensure that
        // the element is removed as soon as the animation is over. Otherwise
        // a flicker might appear or the element may not be removed at all
        if (animationDetails.event === 'leave') {
          options.onDone = options.domOperation;
        }
      }

      // We assign the preparationClasses as the actual animation event since
      // the internals of $animateCss will just suffix the event token values
      // with `-active` to trigger the animation.
      if (options.preparationClasses) {
        options.event = concatWithSpace(options.event, options.preparationClasses);
      }

      var animator = $animateCss(element, options);

      // the driver lookup code inside of $$animation attempts to spawn a
      // driver one by one until a driver returns a.$$willAnimate animator object.
      // $animateCss will always return an object, however, it will pass in
      // a flag as a hint as to whether an animation was detected or not
      return animator.$$willAnimate ? animator : null;
    }
  }];
}];

// TODO(matsko): use caching here to speed things up for detection
// TODO(matsko): add documentation
//  by the time...

var $$AnimateJsProvider = ['$animateProvider', function($animateProvider) {
  this.$get = ['$injector', '$$AnimateRunner', '$$jqLite',
       function($injector,   $$AnimateRunner,   $$jqLite) {

    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);
         // $animateJs(element, 'enter');
    return function(element, event, classes, options) {
      var animationClosed = false;

      // the `classes` argument is optional and if it is not used
      // then the classes will be resolved from the element's className
      // property as well as options.addClass/options.removeClass.
      if (arguments.length === 3 && isObject(classes)) {
        options = classes;
        classes = null;
      }

      options = prepareAnimationOptions(options);
      if (!classes) {
        classes = element.attr('class') || '';
        if (options.addClass) {
          classes += ' ' + options.addClass;
        }
        if (options.removeClass) {
          classes += ' ' + options.removeClass;
        }
      }

      var classesToAdd = options.addClass;
      var classesToRemove = options.removeClass;

      // the lookupAnimations function returns a series of animation objects that are
      // matched up with one or more of the CSS classes. These animation objects are
      // defined via the module.animation factory function. If nothing is detected then
      // we don't return anything which then makes $animation query the next driver.
      var animations = lookupAnimations(classes);
      var before, after;
      if (animations.length) {
        var afterFn, beforeFn;
        if (event == 'leave') {
          beforeFn = 'leave';
          afterFn = 'afterLeave'; // TODO(matsko): get rid of this
        } else {
          beforeFn = 'before' + event.charAt(0).toUpperCase() + event.substr(1);
          afterFn = event;
        }

        if (event !== 'enter' && event !== 'move') {
          before = packageAnimations(element, event, options, animations, beforeFn);
        }
        after  = packageAnimations(element, event, options, animations, afterFn);
      }

      // no matching animations
      if (!before && !after) return;

      function applyOptions() {
        options.domOperation();
        applyAnimationClasses(element, options);
      }

      function close() {
        animationClosed = true;
        applyOptions();
        applyAnimationStyles(element, options);
      }

      var runner;

      return {
        $$willAnimate: true,
        end: function() {
          if (runner) {
            runner.end();
          } else {
            close();
            runner = new $$AnimateRunner();
            runner.complete(true);
          }
          return runner;
        },
        start: function() {
          if (runner) {
            return runner;
          }

          runner = new $$AnimateRunner();
          var closeActiveAnimations;
          var chain = [];

          if (before) {
            chain.push(function(fn) {
              closeActiveAnimations = before(fn);
            });
          }

          if (chain.length) {
            chain.push(function(fn) {
              applyOptions();
              fn(true);
            });
          } else {
            applyOptions();
          }

          if (after) {
            chain.push(function(fn) {
              closeActiveAnimations = after(fn);
            });
          }

          runner.setHost({
            end: function() {
              endAnimations();
            },
            cancel: function() {
              endAnimations(true);
            }
          });

          $$AnimateRunner.chain(chain, onComplete);
          return runner;

          function onComplete(success) {
            close(success);
            runner.complete(success);
          }

          function endAnimations(cancelled) {
            if (!animationClosed) {
              (closeActiveAnimations || noop)(cancelled);
              onComplete(cancelled);
            }
          }
        }
      };

      function executeAnimationFn(fn, element, event, options, onDone) {
        var args;
        switch (event) {
          case 'animate':
            args = [element, options.from, options.to, onDone];
            break;

          case 'setClass':
            args = [element, classesToAdd, classesToRemove, onDone];
            break;

          case 'addClass':
            args = [element, classesToAdd, onDone];
            break;

          case 'removeClass':
            args = [element, classesToRemove, onDone];
            break;

          default:
            args = [element, onDone];
            break;
        }

        args.push(options);

        var value = fn.apply(fn, args);
        if (value) {
          if (isFunction(value.start)) {
            value = value.start();
          }

          if (value instanceof $$AnimateRunner) {
            value.done(onDone);
          } else if (isFunction(value)) {
            // optional onEnd / onCancel callback
            return value;
          }
        }

        return noop;
      }

      function groupEventedAnimations(element, event, options, animations, fnName) {
        var operations = [];
        forEach(animations, function(ani) {
          var animation = ani[fnName];
          if (!animation) return;

          // note that all of these animations will run in parallel
          operations.push(function() {
            var runner;
            var endProgressCb;

            var resolved = false;
            var onAnimationComplete = function(rejected) {
              if (!resolved) {
                resolved = true;
                (endProgressCb || noop)(rejected);
                runner.complete(!rejected);
              }
            };

            runner = new $$AnimateRunner({
              end: function() {
                onAnimationComplete();
              },
              cancel: function() {
                onAnimationComplete(true);
              }
            });

            endProgressCb = executeAnimationFn(animation, element, event, options, function(result) {
              var cancelled = result === false;
              onAnimationComplete(cancelled);
            });

            return runner;
          });
        });

        return operations;
      }

      function packageAnimations(element, event, options, animations, fnName) {
        var operations = groupEventedAnimations(element, event, options, animations, fnName);
        if (operations.length === 0) {
          var a,b;
          if (fnName === 'beforeSetClass') {
            a = groupEventedAnimations(element, 'removeClass', options, animations, 'beforeRemoveClass');
            b = groupEventedAnimations(element, 'addClass', options, animations, 'beforeAddClass');
          } else if (fnName === 'setClass') {
            a = groupEventedAnimations(element, 'removeClass', options, animations, 'removeClass');
            b = groupEventedAnimations(element, 'addClass', options, animations, 'addClass');
          }

          if (a) {
            operations = operations.concat(a);
          }
          if (b) {
            operations = operations.concat(b);
          }
        }

        if (operations.length === 0) return;

        // TODO(matsko): add documentation
        return function startAnimation(callback) {
          var runners = [];
          if (operations.length) {
            forEach(operations, function(animateFn) {
              runners.push(animateFn());
            });
          }

          runners.length ? $$AnimateRunner.all(runners, callback) : callback();

          return function endFn(reject) {
            forEach(runners, function(runner) {
              reject ? runner.cancel() : runner.end();
            });
          };
        };
      }
    };

    function lookupAnimations(classes) {
      classes = isArray(classes) ? classes : classes.split(' ');
      var matches = [], flagMap = {};
      for (var i=0; i < classes.length; i++) {
        var klass = classes[i],
            animationFactory = $animateProvider.$$registeredAnimations[klass];
        if (animationFactory && !flagMap[klass]) {
          matches.push($injector.get(animationFactory));
          flagMap[klass] = true;
        }
      }
      return matches;
    }
  }];
}];

var $$AnimateJsDriverProvider = ['$$animationProvider', function($$animationProvider) {
  $$animationProvider.drivers.push('$$animateJsDriver');
  this.$get = ['$$animateJs', '$$AnimateRunner', function($$animateJs, $$AnimateRunner) {
    return function initDriverFn(animationDetails) {
      if (animationDetails.from && animationDetails.to) {
        var fromAnimation = prepareAnimation(animationDetails.from);
        var toAnimation = prepareAnimation(animationDetails.to);
        if (!fromAnimation && !toAnimation) return;

        return {
          start: function() {
            var animationRunners = [];

            if (fromAnimation) {
              animationRunners.push(fromAnimation.start());
            }

            if (toAnimation) {
              animationRunners.push(toAnimation.start());
            }

            $$AnimateRunner.all(animationRunners, done);

            var runner = new $$AnimateRunner({
              end: endFnFactory(),
              cancel: endFnFactory()
            });

            return runner;

            function endFnFactory() {
              return function() {
                forEach(animationRunners, function(runner) {
                  // at this point we cannot cancel animations for groups just yet. 1.5+
                  runner.end();
                });
              };
            }

            function done(status) {
              runner.complete(status);
            }
          }
        };
      } else {
        return prepareAnimation(animationDetails);
      }
    };

    function prepareAnimation(animationDetails) {
      // TODO(matsko): make sure to check for grouped animations and delegate down to normal animations
      var element = animationDetails.element;
      var event = animationDetails.event;
      var options = animationDetails.options;
      var classes = animationDetails.classes;
      return $$animateJs(element, event, classes, options);
    }
  }];
}];

var NG_ANIMATE_ATTR_NAME = 'data-ng-animate';
var NG_ANIMATE_PIN_DATA = '$ngAnimatePin';
var $$AnimateQueueProvider = ['$animateProvider', function($animateProvider) {
  var PRE_DIGEST_STATE = 1;
  var RUNNING_STATE = 2;
  var ONE_SPACE = ' ';

  var rules = this.rules = {
    skip: [],
    cancel: [],
    join: []
  };

  function makeTruthyCssClassMap(classString) {
    if (!classString) {
      return null;
    }

    var keys = classString.split(ONE_SPACE);
    var map = Object.create(null);

    forEach(keys, function(key) {
      map[key] = true;
    });
    return map;
  }

  function hasMatchingClasses(newClassString, currentClassString) {
    if (newClassString && currentClassString) {
      var currentClassMap = makeTruthyCssClassMap(currentClassString);
      return newClassString.split(ONE_SPACE).some(function(className) {
        return currentClassMap[className];
      });
    }
  }

  function isAllowed(ruleType, element, currentAnimation, previousAnimation) {
    return rules[ruleType].some(function(fn) {
      return fn(element, currentAnimation, previousAnimation);
    });
  }

  function hasAnimationClasses(animation, and) {
    var a = (animation.addClass || '').length > 0;
    var b = (animation.removeClass || '').length > 0;
    return and ? a && b : a || b;
  }

  rules.join.push(function(element, newAnimation, currentAnimation) {
    // if the new animation is class-based then we can just tack that on
    return !newAnimation.structural && hasAnimationClasses(newAnimation);
  });

  rules.skip.push(function(element, newAnimation, currentAnimation) {
    // there is no need to animate anything if no classes are being added and
    // there is no structural animation that will be triggered
    return !newAnimation.structural && !hasAnimationClasses(newAnimation);
  });

  rules.skip.push(function(element, newAnimation, currentAnimation) {
    // why should we trigger a new structural animation if the element will
    // be removed from the DOM anyway?
    return currentAnimation.event == 'leave' && newAnimation.structural;
  });

  rules.skip.push(function(element, newAnimation, currentAnimation) {
    // if there is an ongoing current animation then don't even bother running the class-based animation
    return currentAnimation.structural && currentAnimation.state === RUNNING_STATE && !newAnimation.structural;
  });

  rules.cancel.push(function(element, newAnimation, currentAnimation) {
    // there can never be two structural animations running at the same time
    return currentAnimation.structural && newAnimation.structural;
  });

  rules.cancel.push(function(element, newAnimation, currentAnimation) {
    // if the previous animation is already running, but the new animation will
    // be triggered, but the new animation is structural
    return currentAnimation.state === RUNNING_STATE && newAnimation.structural;
  });

  rules.cancel.push(function(element, newAnimation, currentAnimation) {
    // cancel the animation if classes added / removed in both animation cancel each other out,
    // but only if the current animation isn't structural

    if (currentAnimation.structural) return false;

    var nA = newAnimation.addClass;
    var nR = newAnimation.removeClass;
    var cA = currentAnimation.addClass;
    var cR = currentAnimation.removeClass;

    // early detection to save the global CPU shortage :)
    if ((isUndefined(nA) && isUndefined(nR)) || (isUndefined(cA) && isUndefined(cR))) {
      return false;
    }

    return hasMatchingClasses(nA, cR) || hasMatchingClasses(nR, cA);
  });

  this.$get = ['$$rAF', '$rootScope', '$rootElement', '$document', '$$HashMap',
               '$$animation', '$$AnimateRunner', '$templateRequest', '$$jqLite', '$$forceReflow',
       function($$rAF,   $rootScope,   $rootElement,   $document,   $$HashMap,
                $$animation,   $$AnimateRunner,   $templateRequest,   $$jqLite,   $$forceReflow) {

    var activeAnimationsLookup = new $$HashMap();
    var disabledElementsLookup = new $$HashMap();
    var animationsEnabled = null;

    function postDigestTaskFactory() {
      var postDigestCalled = false;
      return function(fn) {
        // we only issue a call to postDigest before
        // it has first passed. This prevents any callbacks
        // from not firing once the animation has completed
        // since it will be out of the digest cycle.
        if (postDigestCalled) {
          fn();
        } else {
          $rootScope.$$postDigest(function() {
            postDigestCalled = true;
            fn();
          });
        }
      };
    }

    // Wait until all directive and route-related templates are downloaded and
    // compiled. The $templateRequest.totalPendingRequests variable keeps track of
    // all of the remote templates being currently downloaded. If there are no
    // templates currently downloading then the watcher will still fire anyway.
    var deregisterWatch = $rootScope.$watch(
      function() { return $templateRequest.totalPendingRequests === 0; },
      function(isEmpty) {
        if (!isEmpty) return;
        deregisterWatch();

        // Now that all templates have been downloaded, $animate will wait until
        // the post digest queue is empty before enabling animations. By having two
        // calls to $postDigest calls we can ensure that the flag is enabled at the
        // very end of the post digest queue. Since all of the animations in $animate
        // use $postDigest, it's important that the code below executes at the end.
        // This basically means that the page is fully downloaded and compiled before
        // any animations are triggered.
        $rootScope.$$postDigest(function() {
          $rootScope.$$postDigest(function() {
            // we check for null directly in the event that the application already called
            // .enabled() with whatever arguments that it provided it with
            if (animationsEnabled === null) {
              animationsEnabled = true;
            }
          });
        });
      }
    );

    var callbackRegistry = Object.create(null);

    // remember that the classNameFilter is set during the provider/config
    // stage therefore we can optimize here and setup a helper function
    var classNameFilter = $animateProvider.classNameFilter();
    var isAnimatableClassName = !classNameFilter
              ? function() { return true; }
              : function(className) {
                return classNameFilter.test(className);
              };

    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

    function normalizeAnimationDetails(element, animation) {
      return mergeAnimationDetails(element, animation, {});
    }

    // IE9-11 has no method "contains" in SVG element and in Node.prototype. Bug #10259.
    var contains = window.Node.prototype.contains || function(arg) {
      // jshint bitwise: false
      return this === arg || !!(this.compareDocumentPosition(arg) & 16);
      // jshint bitwise: true
    };

    function findCallbacks(parent, element, event) {
      var targetNode = getDomNode(element);
      var targetParentNode = getDomNode(parent);

      var matches = [];
      var entries = callbackRegistry[event];
      if (entries) {
        forEach(entries, function(entry) {
          if (contains.call(entry.node, targetNode)) {
            matches.push(entry.callback);
          } else if (event === 'leave' && contains.call(entry.node, targetParentNode)) {
            matches.push(entry.callback);
          }
        });
      }

      return matches;
    }

    function filterFromRegistry(list, matchContainer, matchCallback) {
      var containerNode = extractElementNode(matchContainer);
      return list.filter(function(entry) {
        var isMatch = entry.node === containerNode &&
                        (!matchCallback || entry.callback === matchCallback);
        return !isMatch;
      });
    }

    function cleanupEventListeners(phase, element) {
      if (phase === 'close' && !element[0].parentNode) {
        // If the element is not attached to a parentNode, it has been removed by
        // the domOperation, and we can safely remove the event callbacks
        $animate.off(element);
      }
    }

    var $animate = {
      on: function(event, container, callback) {
        var node = extractElementNode(container);
        callbackRegistry[event] = callbackRegistry[event] || [];
        callbackRegistry[event].push({
          node: node,
          callback: callback
        });

        // Remove the callback when the element is removed from the DOM
        jqLite(container).on('$destroy', function() {
          var animationDetails = activeAnimationsLookup.get(node);

          if (!animationDetails) {
            // If there's an animation ongoing, the callback calling code will remove
            // the event listeners. If we'd remove here, the callbacks would be removed
            // before the animation ends
            $animate.off(event, container, callback);
          }
        });
      },

      off: function(event, container, callback) {
        if (arguments.length === 1 && !isString(arguments[0])) {
          container = arguments[0];
          for (var eventType in callbackRegistry) {
            callbackRegistry[eventType] = filterFromRegistry(callbackRegistry[eventType], container);
          }

          return;
        }

        var entries = callbackRegistry[event];
        if (!entries) return;

        callbackRegistry[event] = arguments.length === 1
            ? null
            : filterFromRegistry(entries, container, callback);
      },

      pin: function(element, parentElement) {
        assertArg(isElement(element), 'element', 'not an element');
        assertArg(isElement(parentElement), 'parentElement', 'not an element');
        element.data(NG_ANIMATE_PIN_DATA, parentElement);
      },

      push: function(element, event, options, domOperation) {
        options = options || {};
        options.domOperation = domOperation;
        return queueAnimation(element, event, options);
      },

      // this method has four signatures:
      //  () - global getter
      //  (bool) - global setter
      //  (element) - element getter
      //  (element, bool) - element setter<F37>
      enabled: function(element, bool) {
        var argCount = arguments.length;

        if (argCount === 0) {
          // () - Global getter
          bool = !!animationsEnabled;
        } else {
          var hasElement = isElement(element);

          if (!hasElement) {
            // (bool) - Global setter
            bool = animationsEnabled = !!element;
          } else {
            var node = getDomNode(element);

            if (argCount === 1) {
              // (element) - Element getter
              bool = !disabledElementsLookup.get(node);
            } else {
              // (element, bool) - Element setter
              disabledElementsLookup.put(node, !bool);
            }
          }
        }

        return bool;
      }
    };

    return $animate;

    function queueAnimation(element, event, initialOptions) {
      // we always make a copy of the options since
      // there should never be any side effects on
      // the input data when running `$animateCss`.
      var options = copy(initialOptions);

      var node, parent;
      element = stripCommentsFromElement(element);
      if (element) {
        node = getDomNode(element);
        parent = element.parent();
      }

      options = prepareAnimationOptions(options);

      // we create a fake runner with a working promise.
      // These methods will become available after the digest has passed
      var runner = new $$AnimateRunner();

      // this is used to trigger callbacks in postDigest mode
      var runInNextPostDigestOrNow = postDigestTaskFactory();

      if (isArray(options.addClass)) {
        options.addClass = options.addClass.join(' ');
      }

      if (options.addClass && !isString(options.addClass)) {
        options.addClass = null;
      }

      if (isArray(options.removeClass)) {
        options.removeClass = options.removeClass.join(' ');
      }

      if (options.removeClass && !isString(options.removeClass)) {
        options.removeClass = null;
      }

      if (options.from && !isObject(options.from)) {
        options.from = null;
      }

      if (options.to && !isObject(options.to)) {
        options.to = null;
      }

      // there are situations where a directive issues an animation for
      // a jqLite wrapper that contains only comment nodes... If this
      // happens then there is no way we can perform an animation
      if (!node) {
        close();
        return runner;
      }

      var className = [node.className, options.addClass, options.removeClass].join(' ');
      if (!isAnimatableClassName(className)) {
        close();
        return runner;
      }

      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;

      var documentHidden = $document[0].hidden;

      // this is a hard disable of all animations for the application or on
      // the element itself, therefore  there is no need to continue further
      // past this point if not enabled
      // Animations are also disabled if the document is currently hidden (page is not visible
      // to the user), because browsers slow down or do not flush calls to requestAnimationFrame
      var skipAnimations = !animationsEnabled || documentHidden || disabledElementsLookup.get(node);
      var existingAnimation = (!skipAnimations && activeAnimationsLookup.get(node)) || {};
      var hasExistingAnimation = !!existingAnimation.state;

      // there is no point in traversing the same collection of parent ancestors if a followup
      // animation will be run on the same element that already did all that checking work
      if (!skipAnimations && (!hasExistingAnimation || existingAnimation.state != PRE_DIGEST_STATE)) {
        skipAnimations = !areAnimationsAllowed(element, parent, event);
      }

      if (skipAnimations) {
        // Callbacks should fire even if the document is hidden (regression fix for issue #14120)
        if (documentHidden) notifyProgress(runner, event, 'start');
        close();
        if (documentHidden) notifyProgress(runner, event, 'close');
        return runner;
      }

      if (isStructural) {
        closeChildAnimations(element);
      }

      var newAnimation = {
        structural: isStructural,
        element: element,
        event: event,
        addClass: options.addClass,
        removeClass: options.removeClass,
        close: close,
        options: options,
        runner: runner
      };

      if (hasExistingAnimation) {
        var skipAnimationFlag = isAllowed('skip', element, newAnimation, existingAnimation);
        if (skipAnimationFlag) {
          if (existingAnimation.state === RUNNING_STATE) {
            close();
            return runner;
          } else {
            mergeAnimationDetails(element, existingAnimation, newAnimation);
            return existingAnimation.runner;
          }
        }
        var cancelAnimationFlag = isAllowed('cancel', element, newAnimation, existingAnimation);
        if (cancelAnimationFlag) {
          if (existingAnimation.state === RUNNING_STATE) {
            // this will end the animation right away and it is safe
            // to do so since the animation is already running and the
            // runner callback code will run in async
            existingAnimation.runner.end();
          } else if (existingAnimation.structural) {
            // this means that the animation is queued into a digest, but
            // hasn't started yet. Therefore it is safe to run the close
            // method which will call the runner methods in async.
            existingAnimation.close();
          } else {
            // this will merge the new animation options into existing animation options
            mergeAnimationDetails(element, existingAnimation, newAnimation);

            return existingAnimation.runner;
          }
        } else {
          // a joined animation means that this animation will take over the existing one
          // so an example would involve a leave animation taking over an enter. Then when
          // the postDigest kicks in the enter will be ignored.
          var joinAnimationFlag = isAllowed('join', element, newAnimation, existingAnimation);
          if (joinAnimationFlag) {
            if (existingAnimation.state === RUNNING_STATE) {
              normalizeAnimationDetails(element, newAnimation);
            } else {
              applyGeneratedPreparationClasses(element, isStructural ? event : null, options);

              event = newAnimation.event = existingAnimation.event;
              options = mergeAnimationDetails(element, existingAnimation, newAnimation);

              //we return the same runner since only the option values of this animation will
              //be fed into the `existingAnimation`.
              return existingAnimation.runner;
            }
          }
        }
      } else {
        // normalization in this case means that it removes redundant CSS classes that
        // already exist (addClass) or do not exist (removeClass) on the element
        normalizeAnimationDetails(element, newAnimation);
      }

      // when the options are merged and cleaned up we may end up not having to do
      // an animation at all, therefore we should check this before issuing a post
      // digest callback. Structural animations will always run no matter what.
      var isValidAnimation = newAnimation.structural;
      if (!isValidAnimation) {
        // animate (from/to) can be quickly checked first, otherwise we check if any classes are present
        isValidAnimation = (newAnimation.event === 'animate' && Object.keys(newAnimation.options.to || {}).length > 0)
                            || hasAnimationClasses(newAnimation);
      }

      if (!isValidAnimation) {
        close();
        clearElementAnimationState(element);
        return runner;
      }

      // the counter keeps track of cancelled animations
      var counter = (existingAnimation.counter || 0) + 1;
      newAnimation.counter = counter;

      markElementAnimationState(element, PRE_DIGEST_STATE, newAnimation);

      $rootScope.$$postDigest(function() {
        var animationDetails = activeAnimationsLookup.get(node);
        var animationCancelled = !animationDetails;
        animationDetails = animationDetails || {};

        // if addClass/removeClass is called before something like enter then the
        // registered parent element may not be present. The code below will ensure
        // that a final value for parent element is obtained
        var parentElement = element.parent() || [];

        // animate/structural/class-based animations all have requirements. Otherwise there
        // is no point in performing an animation. The parent node must also be set.
        var isValidAnimation = parentElement.length > 0
                                && (animationDetails.event === 'animate'
                                    || animationDetails.structural
                                    || hasAnimationClasses(animationDetails));

        // this means that the previous animation was cancelled
        // even if the follow-up animation is the same event
        if (animationCancelled || animationDetails.counter !== counter || !isValidAnimation) {
          // if another animation did not take over then we need
          // to make sure that the domOperation and options are
          // handled accordingly
          if (animationCancelled) {
            applyAnimationClasses(element, options);
            applyAnimationStyles(element, options);
          }

          // if the event changed from something like enter to leave then we do
          // it, otherwise if it's the same then the end result will be the same too
          if (animationCancelled || (isStructural && animationDetails.event !== event)) {
            options.domOperation();
            runner.end();
          }

          // in the event that the element animation was not cancelled or a follow-up animation
          // isn't allowed to animate from here then we need to clear the state of the element
          // so that any future animations won't read the expired animation data.
          if (!isValidAnimation) {
            clearElementAnimationState(element);
          }

          return;
        }

        // this combined multiple class to addClass / removeClass into a setClass event
        // so long as a structural event did not take over the animation
        event = !animationDetails.structural && hasAnimationClasses(animationDetails, true)
            ? 'setClass'
            : animationDetails.event;

        markElementAnimationState(element, RUNNING_STATE);
        var realRunner = $$animation(element, event, animationDetails.options);

        // this will update the runner's flow-control events based on
        // the `realRunner` object.
        runner.setHost(realRunner);
        notifyProgress(runner, event, 'start', {});

        realRunner.done(function(status) {
          close(!status);
          var animationDetails = activeAnimationsLookup.get(node);
          if (animationDetails && animationDetails.counter === counter) {
            clearElementAnimationState(getDomNode(element));
          }
          notifyProgress(runner, event, 'close', {});
        });
      });

      return runner;

      function notifyProgress(runner, event, phase, data) {
        runInNextPostDigestOrNow(function() {
          var callbacks = findCallbacks(parent, element, event);
          if (callbacks.length) {
            // do not optimize this call here to RAF because
            // we don't know how heavy the callback code here will
            // be and if this code is buffered then this can
            // lead to a performance regression.
            $$rAF(function() {
              forEach(callbacks, function(callback) {
                callback(element, phase, data);
              });
              cleanupEventListeners(phase, element);
            });
          } else {
            cleanupEventListeners(phase, element);
          }
        });
        runner.progress(event, phase, data);
      }

      function close(reject) { // jshint ignore:line
        clearGeneratedClasses(element, options);
        applyAnimationClasses(element, options);
        applyAnimationStyles(element, options);
        options.domOperation();
        runner.complete(!reject);
      }
    }

    function closeChildAnimations(element) {
      var node = getDomNode(element);
      var children = node.querySelectorAll('[' + NG_ANIMATE_ATTR_NAME + ']');
      forEach(children, function(child) {
        var state = parseInt(child.getAttribute(NG_ANIMATE_ATTR_NAME));
        var animationDetails = activeAnimationsLookup.get(child);
        if (animationDetails) {
          switch (state) {
            case RUNNING_STATE:
              animationDetails.runner.end();
              /* falls through */
            case PRE_DIGEST_STATE:
              activeAnimationsLookup.remove(child);
              break;
          }
        }
      });
    }

    function clearElementAnimationState(element) {
      var node = getDomNode(element);
      node.removeAttribute(NG_ANIMATE_ATTR_NAME);
      activeAnimationsLookup.remove(node);
    }

    function isMatchingElement(nodeOrElmA, nodeOrElmB) {
      return getDomNode(nodeOrElmA) === getDomNode(nodeOrElmB);
    }

    /**
     * This fn returns false if any of the following is true:
     * a) animations on any parent element are disabled, and animations on the element aren't explicitly allowed
     * b) a parent element has an ongoing structural animation, and animateChildren is false
     * c) the element is not a child of the body
     * d) the element is not a child of the $rootElement
     */
    function areAnimationsAllowed(element, parentElement, event) {
      var bodyElement = jqLite($document[0].body);
      var bodyElementDetected = isMatchingElement(element, bodyElement) || element[0].nodeName === 'HTML';
      var rootElementDetected = isMatchingElement(element, $rootElement);
      var parentAnimationDetected = false;
      var animateChildren;
      var elementDisabled = disabledElementsLookup.get(getDomNode(element));

      var parentHost = jqLite.data(element[0], NG_ANIMATE_PIN_DATA);
      if (parentHost) {
        parentElement = parentHost;
      }

      parentElement = getDomNode(parentElement);

      while (parentElement) {
        if (!rootElementDetected) {
          // angular doesn't want to attempt to animate elements outside of the application
          // therefore we need to ensure that the rootElement is an ancestor of the current element
          rootElementDetected = isMatchingElement(parentElement, $rootElement);
        }

        if (parentElement.nodeType !== ELEMENT_NODE) {
          // no point in inspecting the #document element
          break;
        }

        var details = activeAnimationsLookup.get(parentElement) || {};
        // either an enter, leave or move animation will commence
        // therefore we can't allow any animations to take place
        // but if a parent animation is class-based then that's ok
        if (!parentAnimationDetected) {
          var parentElementDisabled = disabledElementsLookup.get(parentElement);

          if (parentElementDisabled === true && elementDisabled !== false) {
            // disable animations if the user hasn't explicitly enabled animations on the
            // current element
            elementDisabled = true;
            // element is disabled via parent element, no need to check anything else
            break;
          } else if (parentElementDisabled === false) {
            elementDisabled = false;
          }
          parentAnimationDetected = details.structural;
        }

        if (isUndefined(animateChildren) || animateChildren === true) {
          var value = jqLite.data(parentElement, NG_ANIMATE_CHILDREN_DATA);
          if (isDefined(value)) {
            animateChildren = value;
          }
        }

        // there is no need to continue traversing at this point
        if (parentAnimationDetected && animateChildren === false) break;

        if (!bodyElementDetected) {
          // we also need to ensure that the element is or will be a part of the body element
          // otherwise it is pointless to even issue an animation to be rendered
          bodyElementDetected = isMatchingElement(parentElement, bodyElement);
        }

        if (bodyElementDetected && rootElementDetected) {
          // If both body and root have been found, any other checks are pointless,
          // as no animation data should live outside the application
          break;
        }

        if (!rootElementDetected) {
          // If no rootElement is detected, check if the parentElement is pinned to another element
          parentHost = jqLite.data(parentElement, NG_ANIMATE_PIN_DATA);
          if (parentHost) {
            // The pin target element becomes the next parent element
            parentElement = getDomNode(parentHost);
            continue;
          }
        }

        parentElement = parentElement.parentNode;
      }

      var allowAnimation = (!parentAnimationDetected || animateChildren) && elementDisabled !== true;
      return allowAnimation && rootElementDetected && bodyElementDetected;
    }

    function markElementAnimationState(element, state, details) {
      details = details || {};
      details.state = state;

      var node = getDomNode(element);
      node.setAttribute(NG_ANIMATE_ATTR_NAME, state);

      var oldValue = activeAnimationsLookup.get(node);
      var newValue = oldValue
          ? extend(oldValue, details)
          : details;
      activeAnimationsLookup.put(node, newValue);
    }
  }];
}];

var $$AnimationProvider = ['$animateProvider', function($animateProvider) {
  var NG_ANIMATE_REF_ATTR = 'ng-animate-ref';

  var drivers = this.drivers = [];

  var RUNNER_STORAGE_KEY = '$$animationRunner';

  function setRunner(element, runner) {
    element.data(RUNNER_STORAGE_KEY, runner);
  }

  function removeRunner(element) {
    element.removeData(RUNNER_STORAGE_KEY);
  }

  function getRunner(element) {
    return element.data(RUNNER_STORAGE_KEY);
  }

  this.$get = ['$$jqLite', '$rootScope', '$injector', '$$AnimateRunner', '$$HashMap', '$$rAFScheduler',
       function($$jqLite,   $rootScope,   $injector,   $$AnimateRunner,   $$HashMap,   $$rAFScheduler) {

    var animationQueue = [];
    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

    function sortAnimations(animations) {
      var tree = { children: [] };
      var i, lookup = new $$HashMap();

      // this is done first beforehand so that the hashmap
      // is filled with a list of the elements that will be animated
      for (i = 0; i < animations.length; i++) {
        var animation = animations[i];
        lookup.put(animation.domNode, animations[i] = {
          domNode: animation.domNode,
          fn: animation.fn,
          children: []
        });
      }

      for (i = 0; i < animations.length; i++) {
        processNode(animations[i]);
      }

      return flatten(tree);

      function processNode(entry) {
        if (entry.processed) return entry;
        entry.processed = true;

        var elementNode = entry.domNode;
        var parentNode = elementNode.parentNode;
        lookup.put(elementNode, entry);

        var parentEntry;
        while (parentNode) {
          parentEntry = lookup.get(parentNode);
          if (parentEntry) {
            if (!parentEntry.processed) {
              parentEntry = processNode(parentEntry);
            }
            break;
          }
          parentNode = parentNode.parentNode;
        }

        (parentEntry || tree).children.push(entry);
        return entry;
      }

      function flatten(tree) {
        var result = [];
        var queue = [];
        var i;

        for (i = 0; i < tree.children.length; i++) {
          queue.push(tree.children[i]);
        }

        var remainingLevelEntries = queue.length;
        var nextLevelEntries = 0;
        var row = [];

        for (i = 0; i < queue.length; i++) {
          var entry = queue[i];
          if (remainingLevelEntries <= 0) {
            remainingLevelEntries = nextLevelEntries;
            nextLevelEntries = 0;
            result.push(row);
            row = [];
          }
          row.push(entry.fn);
          entry.children.forEach(function(childEntry) {
            nextLevelEntries++;
            queue.push(childEntry);
          });
          remainingLevelEntries--;
        }

        if (row.length) {
          result.push(row);
        }

        return result;
      }
    }

    // TODO(matsko): document the signature in a better way
    return function(element, event, options) {
      options = prepareAnimationOptions(options);
      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;

      // there is no animation at the current moment, however
      // these runner methods will get later updated with the
      // methods leading into the driver's end/cancel methods
      // for now they just stop the animation from starting
      var runner = new $$AnimateRunner({
        end: function() { close(); },
        cancel: function() { close(true); }
      });

      if (!drivers.length) {
        close();
        return runner;
      }

      setRunner(element, runner);

      var classes = mergeClasses(element.attr('class'), mergeClasses(options.addClass, options.removeClass));
      var tempClasses = options.tempClasses;
      if (tempClasses) {
        classes += ' ' + tempClasses;
        options.tempClasses = null;
      }

      var prepareClassName;
      if (isStructural) {
        prepareClassName = 'ng-' + event + PREPARE_CLASS_SUFFIX;
        $$jqLite.addClass(element, prepareClassName);
      }

      animationQueue.push({
        // this data is used by the postDigest code and passed into
        // the driver step function
        element: element,
        classes: classes,
        event: event,
        structural: isStructural,
        options: options,
        beforeStart: beforeStart,
        close: close
      });

      element.on('$destroy', handleDestroyedElement);

      // we only want there to be one function called within the post digest
      // block. This way we can group animations for all the animations that
      // were apart of the same postDigest flush call.
      if (animationQueue.length > 1) return runner;

      $rootScope.$$postDigest(function() {
        var animations = [];
        forEach(animationQueue, function(entry) {
          // the element was destroyed early on which removed the runner
          // form its storage. This means we can't animate this element
          // at all and it already has been closed due to destruction.
          if (getRunner(entry.element)) {
            animations.push(entry);
          } else {
            entry.close();
          }
        });

        // now any future animations will be in another postDigest
        animationQueue.length = 0;

        var groupedAnimations = groupAnimations(animations);
        var toBeSortedAnimations = [];

        forEach(groupedAnimations, function(animationEntry) {
          toBeSortedAnimations.push({
            domNode: getDomNode(animationEntry.from ? animationEntry.from.element : animationEntry.element),
            fn: function triggerAnimationStart() {
              // it's important that we apply the `ng-animate` CSS class and the
              // temporary classes before we do any driver invoking since these
              // CSS classes may be required for proper CSS detection.
              animationEntry.beforeStart();

              var startAnimationFn, closeFn = animationEntry.close;

              // in the event that the element was removed before the digest runs or
              // during the RAF sequencing then we should not trigger the animation.
              var targetElement = animationEntry.anchors
                  ? (animationEntry.from.element || animationEntry.to.element)
                  : animationEntry.element;

              if (getRunner(targetElement)) {
                var operation = invokeFirstDriver(animationEntry);
                if (operation) {
                  startAnimationFn = operation.start;
                }
              }

              if (!startAnimationFn) {
                closeFn();
              } else {
                var animationRunner = startAnimationFn();
                animationRunner.done(function(status) {
                  closeFn(!status);
                });
                updateAnimationRunners(animationEntry, animationRunner);
              }
            }
          });
        });

        // we need to sort each of the animations in order of parent to child
        // relationships. This ensures that the child classes are applied at the
        // right time.
        $$rAFScheduler(sortAnimations(toBeSortedAnimations));
      });

      return runner;

      // TODO(matsko): change to reference nodes
      function getAnchorNodes(node) {
        var SELECTOR = '[' + NG_ANIMATE_REF_ATTR + ']';
        var items = node.hasAttribute(NG_ANIMATE_REF_ATTR)
              ? [node]
              : node.querySelectorAll(SELECTOR);
        var anchors = [];
        forEach(items, function(node) {
          var attr = node.getAttribute(NG_ANIMATE_REF_ATTR);
          if (attr && attr.length) {
            anchors.push(node);
          }
        });
        return anchors;
      }

      function groupAnimations(animations) {
        var preparedAnimations = [];
        var refLookup = {};
        forEach(animations, function(animation, index) {
          var element = animation.element;
          var node = getDomNode(element);
          var event = animation.event;
          var enterOrMove = ['enter', 'move'].indexOf(event) >= 0;
          var anchorNodes = animation.structural ? getAnchorNodes(node) : [];

          if (anchorNodes.length) {
            var direction = enterOrMove ? 'to' : 'from';

            forEach(anchorNodes, function(anchor) {
              var key = anchor.getAttribute(NG_ANIMATE_REF_ATTR);
              refLookup[key] = refLookup[key] || {};
              refLookup[key][direction] = {
                animationID: index,
                element: jqLite(anchor)
              };
            });
          } else {
            preparedAnimations.push(animation);
          }
        });

        var usedIndicesLookup = {};
        var anchorGroups = {};
        forEach(refLookup, function(operations, key) {
          var from = operations.from;
          var to = operations.to;

          if (!from || !to) {
            // only one of these is set therefore we can't have an
            // anchor animation since all three pieces are required
            var index = from ? from.animationID : to.animationID;
            var indexKey = index.toString();
            if (!usedIndicesLookup[indexKey]) {
              usedIndicesLookup[indexKey] = true;
              preparedAnimations.push(animations[index]);
            }
            return;
          }

          var fromAnimation = animations[from.animationID];
          var toAnimation = animations[to.animationID];
          var lookupKey = from.animationID.toString();
          if (!anchorGroups[lookupKey]) {
            var group = anchorGroups[lookupKey] = {
              structural: true,
              beforeStart: function() {
                fromAnimation.beforeStart();
                toAnimation.beforeStart();
              },
              close: function() {
                fromAnimation.close();
                toAnimation.close();
              },
              classes: cssClassesIntersection(fromAnimation.classes, toAnimation.classes),
              from: fromAnimation,
              to: toAnimation,
              anchors: [] // TODO(matsko): change to reference nodes
            };

            // the anchor animations require that the from and to elements both have at least
            // one shared CSS class which effectively marries the two elements together to use
            // the same animation driver and to properly sequence the anchor animation.
            if (group.classes.length) {
              preparedAnimations.push(group);
            } else {
              preparedAnimations.push(fromAnimation);
              preparedAnimations.push(toAnimation);
            }
          }

          anchorGroups[lookupKey].anchors.push({
            'out': from.element, 'in': to.element
          });
        });

        return preparedAnimations;
      }

      function cssClassesIntersection(a,b) {
        a = a.split(' ');
        b = b.split(' ');
        var matches = [];

        for (var i = 0; i < a.length; i++) {
          var aa = a[i];
          if (aa.substring(0,3) === 'ng-') continue;

          for (var j = 0; j < b.length; j++) {
            if (aa === b[j]) {
              matches.push(aa);
              break;
            }
          }
        }

        return matches.join(' ');
      }

      function invokeFirstDriver(animationDetails) {
        // we loop in reverse order since the more general drivers (like CSS and JS)
        // may attempt more elements, but custom drivers are more particular
        for (var i = drivers.length - 1; i >= 0; i--) {
          var driverName = drivers[i];
          var factory = $injector.get(driverName);
          var driver = factory(animationDetails);
          if (driver) {
            return driver;
          }
        }
      }

      function beforeStart() {
        element.addClass(NG_ANIMATE_CLASSNAME);
        if (tempClasses) {
          $$jqLite.addClass(element, tempClasses);
        }
        if (prepareClassName) {
          $$jqLite.removeClass(element, prepareClassName);
          prepareClassName = null;
        }
      }

      function updateAnimationRunners(animation, newRunner) {
        if (animation.from && animation.to) {
          update(animation.from.element);
          update(animation.to.element);
        } else {
          update(animation.element);
        }

        function update(element) {
          var runner = getRunner(element);
          if (runner) runner.setHost(newRunner);
        }
      }

      function handleDestroyedElement() {
        var runner = getRunner(element);
        if (runner && (event !== 'leave' || !options.$$domOperationFired)) {
          runner.end();
        }
      }

      function close(rejected) { // jshint ignore:line
        element.off('$destroy', handleDestroyedElement);
        removeRunner(element);

        applyAnimationClasses(element, options);
        applyAnimationStyles(element, options);
        options.domOperation();

        if (tempClasses) {
          $$jqLite.removeClass(element, tempClasses);
        }

        element.removeClass(NG_ANIMATE_CLASSNAME);
        runner.complete(!rejected);
      }
    };
  }];
}];

/**
 * @ngdoc directive
 * @name ngAnimateSwap
 * @restrict A
 * @scope
 *
 * @description
 *
 * ngAnimateSwap is a animation-oriented directive that allows for the container to
 * be removed and entered in whenever the associated expression changes. A
 * common usecase for this directive is a rotating banner or slider component which
 * contains one image being present at a time. When the active image changes
 * then the old image will perform a `leave` animation and the new element
 * will be inserted via an `enter` animation.
 *
 * @animations
 * | Animation                        | Occurs                               |
 * |----------------------------------|--------------------------------------|
 * | {@link ng.$animate#enter enter}  | when the new element is inserted to the DOM  |
 * | {@link ng.$animate#leave leave}  | when the old element is removed from the DOM |
 *
 * @example
 * <example name="ngAnimateSwap-directive" module="ngAnimateSwapExample"
 *          deps="angular-animate.js"
 *          animations="true" fixBase="true">
 *   <file name="index.html">
 *     <div class="container" ng-controller="AppCtrl">
 *       <div ng-animate-swap="number" class="cell swap-animation" ng-class="colorClass(number)">
 *         {{ number }}
 *       </div>
 *     </div>
 *   </file>
 *   <file name="script.js">
 *     angular.module('ngAnimateSwapExample', ['ngAnimate'])
 *       .controller('AppCtrl', ['$scope', '$interval', function($scope, $interval) {
 *         $scope.number = 0;
 *         $interval(function() {
 *           $scope.number++;
 *         }, 1000);
 *
 *         var colors = ['red','blue','green','yellow','orange'];
 *         $scope.colorClass = function(number) {
 *           return colors[number % colors.length];
 *         };
 *       }]);
 *   </file>
 *  <file name="animations.css">
 *  .container {
 *    height:250px;
 *    width:250px;
 *    position:relative;
 *    overflow:hidden;
 *    border:2px solid black;
 *  }
 *  .container .cell {
 *    font-size:150px;
 *    text-align:center;
 *    line-height:250px;
 *    position:absolute;
 *    top:0;
 *    left:0;
 *    right:0;
 *    border-bottom:2px solid black;
 *  }
 *  .swap-animation.ng-enter, .swap-animation.ng-leave {
 *    transition:0.5s linear all;
 *  }
 *  .swap-animation.ng-enter {
 *    top:-250px;
 *  }
 *  .swap-animation.ng-enter-active {
 *    top:0px;
 *  }
 *  .swap-animation.ng-leave {
 *    top:0px;
 *  }
 *  .swap-animation.ng-leave-active {
 *    top:250px;
 *  }
 *  .red { background:red; }
 *  .green { background:green; }
 *  .blue { background:blue; }
 *  .yellow { background:yellow; }
 *  .orange { background:orange; }
 *  </file>
 * </example>
 */
var ngAnimateSwapDirective = ['$animate', '$rootScope', function($animate, $rootScope) {
  return {
    restrict: 'A',
    transclude: 'element',
    terminal: true,
    priority: 600, // we use 600 here to ensure that the directive is caught before others
    link: function(scope, $element, attrs, ctrl, $transclude) {
      var previousElement, previousScope;
      scope.$watchCollection(attrs.ngAnimateSwap || attrs['for'], function(value) {
        if (previousElement) {
          $animate.leave(previousElement);
        }
        if (previousScope) {
          previousScope.$destroy();
          previousScope = null;
        }
        if (value || value === 0) {
          previousScope = scope.$new();
          $transclude(previousScope, function(element) {
            previousElement = element;
            $animate.enter(element, null, $element);
          });
        }
      });
    }
  };
}];

/**
 * @ngdoc module
 * @name ngAnimate
 * @description
 *
 * The `ngAnimate` module provides support for CSS-based animations (keyframes and transitions) as well as JavaScript-based animations via
 * callback hooks. Animations are not enabled by default, however, by including `ngAnimate` the animation hooks are enabled for an Angular app.
 *
 * <div doc-module-components="ngAnimate"></div>
 *
 * # Usage
 * Simply put, there are two ways to make use of animations when ngAnimate is used: by using **CSS** and **JavaScript**. The former works purely based
 * using CSS (by using matching CSS selectors/styles) and the latter triggers animations that are registered via `module.animation()`. For
 * both CSS and JS animations the sole requirement is to have a matching `CSS class` that exists both in the registered animation and within
 * the HTML element that the animation will be triggered on.
 *
 * ## Directive Support
 * The following directives are "animation aware":
 *
 * | Directive                                                                                                | Supported Animations                                                     |
 * |----------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|
 * | {@link ng.directive:ngRepeat#animations ngRepeat}                                                        | enter, leave and move                                                    |
 * | {@link ngRoute.directive:ngView#animations ngView}                                                       | enter and leave                                                          |
 * | {@link ng.directive:ngInclude#animations ngInclude}                                                      | enter and leave                                                          |
 * | {@link ng.directive:ngSwitch#animations ngSwitch}                                                        | enter and leave                                                          |
 * | {@link ng.directive:ngIf#animations ngIf}                                                                | enter and leave                                                          |
 * | {@link ng.directive:ngClass#animations ngClass}                                                          | add and remove (the CSS class(es) present)                               |
 * | {@link ng.directive:ngShow#animations ngShow} & {@link ng.directive:ngHide#animations ngHide}            | add and remove (the ng-hide class value)                                 |
 * | {@link ng.directive:form#animation-hooks form} & {@link ng.directive:ngModel#animation-hooks ngModel}    | add and remove (dirty, pristine, valid, invalid & all other validations) |
 * | {@link module:ngMessages#animations ngMessages}                                                          | add and remove (ng-active & ng-inactive)                                 |
 * | {@link module:ngMessages#animations ngMessage}                                                           | enter and leave                                                          |
 *
 * (More information can be found by visiting each the documentation associated with each directive.)
 *
 * ## CSS-based Animations
 *
 * CSS-based animations with ngAnimate are unique since they require no JavaScript code at all. By using a CSS class that we reference between our HTML
 * and CSS code we can create an animation that will be picked up by Angular when an the underlying directive performs an operation.
 *
 * The example below shows how an `enter` animation can be made possible on an element using `ng-if`:
 *
 * ```html
 * <div ng-if="bool" class="fade">
 *    Fade me in out
 * </div>
 * <button ng-click="bool=true">Fade In!</button>
 * <button ng-click="bool=false">Fade Out!</button>
 * ```
 *
 * Notice the CSS class **fade**? We can now create the CSS transition code that references this class:
 *
 * ```css
 * /&#42; The starting CSS styles for the enter animation &#42;/
 * .fade.ng-enter {
 *   transition:0.5s linear all;
 *   opacity:0;
 * }
 *
 * /&#42; The finishing CSS styles for the enter animation &#42;/
 * .fade.ng-enter.ng-enter-active {
 *   opacity:1;
 * }
 * ```
 *
 * The key thing to remember here is that, depending on the animation event (which each of the directives above trigger depending on what's going on) two
 * generated CSS classes will be applied to the element; in the example above we have `.ng-enter` and `.ng-enter-active`. For CSS transitions, the transition
 * code **must** be defined within the starting CSS class (in this case `.ng-enter`). The destination class is what the transition will animate towards.
 *
 * If for example we wanted to create animations for `leave` and `move` (ngRepeat triggers move) then we can do so using the same CSS naming conventions:
 *
 * ```css
 * /&#42; now the element will fade out before it is removed from the DOM &#42;/
 * .fade.ng-leave {
 *   transition:0.5s linear all;
 *   opacity:1;
 * }
 * .fade.ng-leave.ng-leave-active {
 *   opacity:0;
 * }
 * ```
 *
 * We can also make use of **CSS Keyframes** by referencing the keyframe animation within the starting CSS class:
 *
 * ```css
 * /&#42; there is no need to define anything inside of the destination
 * CSS class since the keyframe will take charge of the animation &#42;/
 * .fade.ng-leave {
 *   animation: my_fade_animation 0.5s linear;
 *   -webkit-animation: my_fade_animation 0.5s linear;
 * }
 *
 * @keyframes my_fade_animation {
 *   from { opacity:1; }
 *   to { opacity:0; }
 * }
 *
 * @-webkit-keyframes my_fade_animation {
 *   from { opacity:1; }
 *   to { opacity:0; }
 * }
 * ```
 *
 * Feel free also mix transitions and keyframes together as well as any other CSS classes on the same element.
 *
 * ### CSS Class-based Animations
 *
 * Class-based animations (animations that are triggered via `ngClass`, `ngShow`, `ngHide` and some other directives) have a slightly different
 * naming convention. Class-based animations are basic enough that a standard transition or keyframe can be referenced on the class being added
 * and removed.
 *
 * For example if we wanted to do a CSS animation for `ngHide` then we place an animation on the `.ng-hide` CSS class:
 *
 * ```html
 * <div ng-show="bool" class="fade">
 *   Show and hide me
 * </div>
 * <button ng-click="bool=!bool">Toggle</button>
 *
 * <style>
 * .fade.ng-hide {
 *   transition:0.5s linear all;
 *   opacity:0;
 * }
 * </style>
 * ```
 *
 * All that is going on here with ngShow/ngHide behind the scenes is the `.ng-hide` class is added/removed (when the hidden state is valid). Since
 * ngShow and ngHide are animation aware then we can match up a transition and ngAnimate handles the rest.
 *
 * In addition the addition and removal of the CSS class, ngAnimate also provides two helper methods that we can use to further decorate the animation
 * with CSS styles.
 *
 * ```html
 * <div ng-class="{on:onOff}" class="highlight">
 *   Highlight this box
 * </div>
 * <button ng-click="onOff=!onOff">Toggle</button>
 *
 * <style>
 * .highlight {
 *   transition:0.5s linear all;
 * }
 * .highlight.on-add {
 *   background:white;
 * }
 * .highlight.on {
 *   background:yellow;
 * }
 * .highlight.on-remove {
 *   background:black;
 * }
 * </style>
 * ```
 *
 * We can also make use of CSS keyframes by placing them within the CSS classes.
 *
 *
 * ### CSS Staggering Animations
 * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a
 * curtain-like effect. The ngAnimate module (versions >=1.2) supports staggering animations and the stagger effect can be
 * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for
 * the animation. The style property expected within the stagger class can either be a **transition-delay** or an
 * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).
 *
 * ```css
 * .my-animation.ng-enter {
 *   /&#42; standard transition code &#42;/
 *   transition: 1s linear all;
 *   opacity:0;
 * }
 * .my-animation.ng-enter-stagger {
 *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/
 *   transition-delay: 0.1s;
 *
 *   /&#42; As of 1.4.4, this must always be set: it signals ngAnimate
 *     to not accidentally inherit a delay property from another CSS class &#42;/
 *   transition-duration: 0s;
 * }
 * .my-animation.ng-enter.ng-enter-active {
 *   /&#42; standard transition styles &#42;/
 *   opacity:1;
 * }
 * ```
 *
 * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations
 * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this
 * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation
 * will also be reset if one or more animation frames have passed since the multiple calls to `$animate` were fired.
 *
 * The following code will issue the **ng-leave-stagger** event on the element provided:
 *
 * ```js
 * var kids = parent.children();
 *
 * $animate.leave(kids[0]); //stagger index=0
 * $animate.leave(kids[1]); //stagger index=1
 * $animate.leave(kids[2]); //stagger index=2
 * $animate.leave(kids[3]); //stagger index=3
 * $animate.leave(kids[4]); //stagger index=4
 *
 * window.requestAnimationFrame(function() {
 *   //stagger has reset itself
 *   $animate.leave(kids[5]); //stagger index=0
 *   $animate.leave(kids[6]); //stagger index=1
 *
 *   $scope.$digest();
 * });
 * ```
 *
 * Stagger animations are currently only supported within CSS-defined animations.
 *
 * ### The `ng-animate` CSS class
 *
 * When ngAnimate is animating an element it will apply the `ng-animate` CSS class to the element for the duration of the animation.
 * This is a temporary CSS class and it will be removed once the animation is over (for both JavaScript and CSS-based animations).
 *
 * Therefore, animations can be applied to an element using this temporary class directly via CSS.
 *
 * ```css
 * .zipper.ng-animate {
 *   transition:0.5s linear all;
 * }
 * .zipper.ng-enter {
 *   opacity:0;
 * }
 * .zipper.ng-enter.ng-enter-active {
 *   opacity:1;
 * }
 * .zipper.ng-leave {
 *   opacity:1;
 * }
 * .zipper.ng-leave.ng-leave-active {
 *   opacity:0;
 * }
 * ```
 *
 * (Note that the `ng-animate` CSS class is reserved and it cannot be applied on an element directly since ngAnimate will always remove
 * the CSS class once an animation has completed.)
 *
 *
 * ### The `ng-[event]-prepare` class
 *
 * This is a special class that can be used to prevent unwanted flickering / flash of content before
 * the actual animation starts. The class is added as soon as an animation is initialized, but removed
 * before the actual animation starts (after waiting for a $digest).
 * It is also only added for *structural* animations (`enter`, `move`, and `leave`).
 *
 * In practice, flickering can appear when nesting elements with structural animations such as `ngIf`
 * into elements that have class-based animations such as `ngClass`.
 *
 * ```html
 * <div ng-class="{red: myProp}">
 *   <div ng-class="{blue: myProp}">
 *     <div class="message" ng-if="myProp"></div>
 *   </div>
 * </div>
 * ```
 *
 * It is possible that during the `enter` animation, the `.message` div will be briefly visible before it starts animating.
 * In that case, you can add styles to the CSS that make sure the element stays hidden before the animation starts:
 *
 * ```css
 * .message.ng-enter-prepare {
 *   opacity: 0;
 * }
 *
 * ```
 *
 * ## JavaScript-based Animations
 *
 * ngAnimate also allows for animations to be consumed by JavaScript code. The approach is similar to CSS-based animations (where there is a shared
 * CSS class that is referenced in our HTML code) but in addition we need to register the JavaScript animation on the module. By making use of the
 * `module.animation()` module function we can register the animation.
 *
 * Let's see an example of a enter/leave animation using `ngRepeat`:
 *
 * ```html
 * <div ng-repeat="item in items" class="slide">
 *   {{ item }}
 * </div>
 * ```
 *
 * See the **slide** CSS class? Let's use that class to define an animation that we'll structure in our module code by using `module.animation`:
 *
 * ```js
 * myModule.animation('.slide', [function() {
 *   return {
 *     // make note that other events (like addClass/removeClass)
 *     // have different function input parameters
 *     enter: function(element, doneFn) {
 *       jQuery(element).fadeIn(1000, doneFn);
 *
 *       // remember to call doneFn so that angular
 *       // knows that the animation has concluded
 *     },
 *
 *     move: function(element, doneFn) {
 *       jQuery(element).fadeIn(1000, doneFn);
 *     },
 *
 *     leave: function(element, doneFn) {
 *       jQuery(element).fadeOut(1000, doneFn);
 *     }
 *   }
 * }]);
 * ```
 *
 * The nice thing about JS-based animations is that we can inject other services and make use of advanced animation libraries such as
 * greensock.js and velocity.js.
 *
 * If our animation code class-based (meaning that something like `ngClass`, `ngHide` and `ngShow` triggers it) then we can still define
 * our animations inside of the same registered animation, however, the function input arguments are a bit different:
 *
 * ```html
 * <div ng-class="color" class="colorful">
 *   this box is moody
 * </div>
 * <button ng-click="color='red'">Change to red</button>
 * <button ng-click="color='blue'">Change to blue</button>
 * <button ng-click="color='green'">Change to green</button>
 * ```
 *
 * ```js
 * myModule.animation('.colorful', [function() {
 *   return {
 *     addClass: function(element, className, doneFn) {
 *       // do some cool animation and call the doneFn
 *     },
 *     removeClass: function(element, className, doneFn) {
 *       // do some cool animation and call the doneFn
 *     },
 *     setClass: function(element, addedClass, removedClass, doneFn) {
 *       // do some cool animation and call the doneFn
 *     }
 *   }
 * }]);
 * ```
 *
 * ## CSS + JS Animations Together
 *
 * AngularJS 1.4 and higher has taken steps to make the amalgamation of CSS and JS animations more flexible. However, unlike earlier versions of Angular,
 * defining CSS and JS animations to work off of the same CSS class will not work anymore. Therefore the example below will only result in **JS animations taking
 * charge of the animation**:
 *
 * ```html
 * <div ng-if="bool" class="slide">
 *   Slide in and out
 * </div>
 * ```
 *
 * ```js
 * myModule.animation('.slide', [function() {
 *   return {
 *     enter: function(element, doneFn) {
 *       jQuery(element).slideIn(1000, doneFn);
 *     }
 *   }
 * }]);
 * ```
 *
 * ```css
 * .slide.ng-enter {
 *   transition:0.5s linear all;
 *   transform:translateY(-100px);
 * }
 * .slide.ng-enter.ng-enter-active {
 *   transform:translateY(0);
 * }
 * ```
 *
 * Does this mean that CSS and JS animations cannot be used together? Do JS-based animations always have higher priority? We can make up for the
 * lack of CSS animations by using the `$animateCss` service to trigger our own tweaked-out, CSS-based animations directly from
 * our own JS-based animation code:
 *
 * ```js
 * myModule.animation('.slide', ['$animateCss', function($animateCss) {
 *   return {
 *     enter: function(element) {
*        // this will trigger `.slide.ng-enter` and `.slide.ng-enter-active`.
 *       return $animateCss(element, {
 *         event: 'enter',
 *         structural: true
 *       });
 *     }
 *   }
 * }]);
 * ```
 *
 * The nice thing here is that we can save bandwidth by sticking to our CSS-based animation code and we don't need to rely on a 3rd-party animation framework.
 *
 * The `$animateCss` service is very powerful since we can feed in all kinds of extra properties that will be evaluated and fed into a CSS transition or
 * keyframe animation. For example if we wanted to animate the height of an element while adding and removing classes then we can do so by providing that
 * data into `$animateCss` directly:
 *
 * ```js
 * myModule.animation('.slide', ['$animateCss', function($animateCss) {
 *   return {
 *     enter: function(element) {
 *       return $animateCss(element, {
 *         event: 'enter',
 *         structural: true,
 *         addClass: 'maroon-setting',
 *         from: { height:0 },
 *         to: { height: 200 }
 *       });
 *     }
 *   }
 * }]);
 * ```
 *
 * Now we can fill in the rest via our transition CSS code:
 *
 * ```css
 * /&#42; the transition tells ngAnimate to make the animation happen &#42;/
 * .slide.ng-enter { transition:0.5s linear all; }
 *
 * /&#42; this extra CSS class will be absorbed into the transition
 * since the $animateCss code is adding the class &#42;/
 * .maroon-setting { background:red; }
 * ```
 *
 * And `$animateCss` will figure out the rest. Just make sure to have the `done()` callback fire the `doneFn` function to signal when the animation is over.
 *
 * To learn more about what's possible be sure to visit the {@link ngAnimate.$animateCss $animateCss service}.
 *
 * ## Animation Anchoring (via `ng-animate-ref`)
 *
 * ngAnimate in AngularJS 1.4 comes packed with the ability to cross-animate elements between
 * structural areas of an application (like views) by pairing up elements using an attribute
 * called `ng-animate-ref`.
 *
 * Let's say for example we have two views that are managed by `ng-view` and we want to show
 * that there is a relationship between two components situated in within these views. By using the
 * `ng-animate-ref` attribute we can identify that the two components are paired together and we
 * can then attach an animation, which is triggered when the view changes.
 *
 * Say for example we have the following template code:
 *
 * ```html
 * <!-- index.html -->
 * <div ng-view class="view-animation">
 * </div>
 *
 * <!-- home.html -->
 * <a href="#/banner-page">
 *   <img src="./banner.jpg" class="banner" ng-animate-ref="banner">
 * </a>
 *
 * <!-- banner-page.html -->
 * <img src="./banner.jpg" class="banner" ng-animate-ref="banner">
 * ```
 *
 * Now, when the view changes (once the link is clicked), ngAnimate will examine the
 * HTML contents to see if there is a match reference between any components in the view
 * that is leaving and the view that is entering. It will scan both the view which is being
 * removed (leave) and inserted (enter) to see if there are any paired DOM elements that
 * contain a matching ref value.
 *
 * The two images match since they share the same ref value. ngAnimate will now create a
 * transport element (which is a clone of the first image element) and it will then attempt
 * to animate to the position of the second image element in the next view. For the animation to
 * work a special CSS class called `ng-anchor` will be added to the transported element.
 *
 * We can now attach a transition onto the `.banner.ng-anchor` CSS class and then
 * ngAnimate will handle the entire transition for us as well as the addition and removal of
 * any changes of CSS classes between the elements:
 *
 * ```css
 * .banner.ng-anchor {
 *   /&#42; this animation will last for 1 second since there are
 *          two phases to the animation (an `in` and an `out` phase) &#42;/
 *   transition:0.5s linear all;
 * }
 * ```
 *
 * We also **must** include animations for the views that are being entered and removed
 * (otherwise anchoring wouldn't be possible since the new view would be inserted right away).
 *
 * ```css
 * .view-animation.ng-enter, .view-animation.ng-leave {
 *   transition:0.5s linear all;
 *   position:fixed;
 *   left:0;
 *   top:0;
 *   width:100%;
 * }
 * .view-animation.ng-enter {
 *   transform:translateX(100%);
 * }
 * .view-animation.ng-leave,
 * .view-animation.ng-enter.ng-enter-active {
 *   transform:translateX(0%);
 * }
 * .view-animation.ng-leave.ng-leave-active {
 *   transform:translateX(-100%);
 * }
 * ```
 *
 * Now we can jump back to the anchor animation. When the animation happens, there are two stages that occur:
 * an `out` and an `in` stage. The `out` stage happens first and that is when the element is animated away
 * from its origin. Once that animation is over then the `in` stage occurs which animates the
 * element to its destination. The reason why there are two animations is to give enough time
 * for the enter animation on the new element to be ready.
 *
 * The example above sets up a transition for both the in and out phases, but we can also target the out or
 * in phases directly via `ng-anchor-out` and `ng-anchor-in`.
 *
 * ```css
 * .banner.ng-anchor-out {
 *   transition: 0.5s linear all;
 *
 *   /&#42; the scale will be applied during the out animation,
 *          but will be animated away when the in animation runs &#42;/
 *   transform: scale(1.2);
 * }
 *
 * .banner.ng-anchor-in {
 *   transition: 1s linear all;
 * }
 * ```
 *
 *
 *
 *
 * ### Anchoring Demo
 *
  <example module="anchoringExample"
           name="anchoringExample"
           id="anchoringExample"
           deps="angular-animate.js;angular-route.js"
           animations="true">
    <file name="index.html">
      <a href="#/">Home</a>
      <hr />
      <div class="view-container">
        <div ng-view class="view"></div>
      </div>
    </file>
    <file name="script.js">
      angular.module('anchoringExample', ['ngAnimate', 'ngRoute'])
        .config(['$routeProvider', function($routeProvider) {
          $routeProvider.when('/', {
            templateUrl: 'home.html',
            controller: 'HomeController as home'
          });
          $routeProvider.when('/profile/:id', {
            templateUrl: 'profile.html',
            controller: 'ProfileController as profile'
          });
        }])
        .run(['$rootScope', function($rootScope) {
          $rootScope.records = [
            { id:1, title: "Miss Beulah Roob" },
            { id:2, title: "Trent Morissette" },
            { id:3, title: "Miss Ava Pouros" },
            { id:4, title: "Rod Pouros" },
            { id:5, title: "Abdul Rice" },
            { id:6, title: "Laurie Rutherford Sr." },
            { id:7, title: "Nakia McLaughlin" },
            { id:8, title: "Jordon Blanda DVM" },
            { id:9, title: "Rhoda Hand" },
            { id:10, title: "Alexandrea Sauer" }
          ];
        }])
        .controller('HomeController', [function() {
          //empty
        }])
        .controller('ProfileController', ['$rootScope', '$routeParams', function($rootScope, $routeParams) {
          var index = parseInt($routeParams.id, 10);
          var record = $rootScope.records[index - 1];

          this.title = record.title;
          this.id = record.id;
        }]);
    </file>
    <file name="home.html">
      <h2>Welcome to the home page</h1>
      <p>Please click on an element</p>
      <a class="record"
         ng-href="#/profile/{{ record.id }}"
         ng-animate-ref="{{ record.id }}"
         ng-repeat="record in records">
        {{ record.title }}
      </a>
    </file>
    <file name="profile.html">
      <div class="profile record" ng-animate-ref="{{ profile.id }}">
        {{ profile.title }}
      </div>
    </file>
    <file name="animations.css">
      .record {
        display:block;
        font-size:20px;
      }
      .profile {
        background:black;
        color:white;
        font-size:100px;
      }
      .view-container {
        position:relative;
      }
      .view-container > .view.ng-animate {
        position:absolute;
        top:0;
        left:0;
        width:100%;
        min-height:500px;
      }
      .view.ng-enter, .view.ng-leave,
      .record.ng-anchor {
        transition:0.5s linear all;
      }
      .view.ng-enter {
        transform:translateX(100%);
      }
      .view.ng-enter.ng-enter-active, .view.ng-leave {
        transform:translateX(0%);
      }
      .view.ng-leave.ng-leave-active {
        transform:translateX(-100%);
      }
      .record.ng-anchor-out {
        background:red;
      }
    </file>
  </example>
 *
 * ### How is the element transported?
 *
 * When an anchor animation occurs, ngAnimate will clone the starting element and position it exactly where the starting
 * element is located on screen via absolute positioning. The cloned element will be placed inside of the root element
 * of the application (where ng-app was defined) and all of the CSS classes of the starting element will be applied. The
 * element will then animate into the `out` and `in` animations and will eventually reach the coordinates and match
 * the dimensions of the destination element. During the entire animation a CSS class of `.ng-animate-shim` will be applied
 * to both the starting and destination elements in order to hide them from being visible (the CSS styling for the class
 * is: `visibility:hidden`). Once the anchor reaches its destination then it will be removed and the destination element
 * will become visible since the shim class will be removed.
 *
 * ### How is the morphing handled?
 *
 * CSS Anchoring relies on transitions and keyframes and the internal code is intelligent enough to figure out
 * what CSS classes differ between the starting element and the destination element. These different CSS classes
 * will be added/removed on the anchor element and a transition will be applied (the transition that is provided
 * in the anchor class). Long story short, ngAnimate will figure out what classes to add and remove which will
 * make the transition of the element as smooth and automatic as possible. Be sure to use simple CSS classes that
 * do not rely on DOM nesting structure so that the anchor element appears the same as the starting element (since
 * the cloned element is placed inside of root element which is likely close to the body element).
 *
 * Note that if the root element is on the `<html>` element then the cloned node will be placed inside of body.
 *
 *
 * ## Using $animate in your directive code
 *
 * So far we've explored how to feed in animations into an Angular application, but how do we trigger animations within our own directives in our application?
 * By injecting the `$animate` service into our directive code, we can trigger structural and class-based hooks which can then be consumed by animations. Let's
 * imagine we have a greeting box that shows and hides itself when the data changes
 *
 * ```html
 * <greeting-box active="onOrOff">Hi there</greeting-box>
 * ```
 *
 * ```js
 * ngModule.directive('greetingBox', ['$animate', function($animate) {
 *   return function(scope, element, attrs) {
 *     attrs.$observe('active', function(value) {
 *       value ? $animate.addClass(element, 'on') : $animate.removeClass(element, 'on');
 *     });
 *   });
 * }]);
 * ```
 *
 * Now the `on` CSS class is added and removed on the greeting box component. Now if we add a CSS class on top of the greeting box element
 * in our HTML code then we can trigger a CSS or JS animation to happen.
 *
 * ```css
 * /&#42; normally we would create a CSS class to reference on the element &#42;/
 * greeting-box.on { transition:0.5s linear all; background:green; color:white; }
 * ```
 *
 * The `$animate` service contains a variety of other methods like `enter`, `leave`, `animate` and `setClass`. To learn more about what's
 * possible be sure to visit the {@link ng.$animate $animate service API page}.
 *
 *
 * ## Callbacks and Promises
 *
 * When `$animate` is called it returns a promise that can be used to capture when the animation has ended. Therefore if we were to trigger
 * an animation (within our directive code) then we can continue performing directive and scope related activities after the animation has
 * ended by chaining onto the returned promise that animation method returns.
 *
 * ```js
 * // somewhere within the depths of the directive
 * $animate.enter(element, parent).then(function() {
 *   //the animation has completed
 * });
 * ```
 *
 * (Note that earlier versions of Angular prior to v1.4 required the promise code to be wrapped using `$scope.$apply(...)`. This is not the case
 * anymore.)
 *
 * In addition to the animation promise, we can also make use of animation-related callbacks within our directives and controller code by registering
 * an event listener using the `$animate` service. Let's say for example that an animation was triggered on our view
 * routing controller to hook into that:
 *
 * ```js
 * ngModule.controller('HomePageController', ['$animate', function($animate) {
 *   $animate.on('enter', ngViewElement, function(element) {
 *     // the animation for this route has completed
 *   }]);
 * }])
 * ```
 *
 * (Note that you will need to trigger a digest within the callback to get angular to notice any scope-related changes.)
 */

var copy;
var extend;
var forEach;
var isArray;
var isDefined;
var isElement;
var isFunction;
var isObject;
var isString;
var isUndefined;
var jqLite;
var noop;

/**
 * @ngdoc service
 * @name $animate
 * @kind object
 *
 * @description
 * The ngAnimate `$animate` service documentation is the same for the core `$animate` service.
 *
 * Click here {@link ng.$animate to learn more about animations with `$animate`}.
 */
angular.module('ngAnimate', [], function initAngularHelpers() {
  // Access helpers from angular core.
  // Do it inside a `config` block to ensure `window.angular` is available.
  noop        = angular.noop;
  copy        = angular.copy;
  extend      = angular.extend;
  jqLite      = angular.element;
  forEach     = angular.forEach;
  isArray     = angular.isArray;
  isString    = angular.isString;
  isObject    = angular.isObject;
  isUndefined = angular.isUndefined;
  isDefined   = angular.isDefined;
  isFunction  = angular.isFunction;
  isElement   = angular.isElement;
})
  .directive('ngAnimateSwap', ngAnimateSwapDirective)

  .directive('ngAnimateChildren', $$AnimateChildrenDirective)
  .factory('$$rAFScheduler', $$rAFSchedulerFactory)

  .provider('$$animateQueue', $$AnimateQueueProvider)
  .provider('$$animation', $$AnimationProvider)

  .provider('$animateCss', $AnimateCssProvider)
  .provider('$$animateCssDriver', $$AnimateCssDriverProvider)

  .provider('$$animateJs', $$AnimateJsProvider)
  .provider('$$animateJsDriver', $$AnimateJsDriverProvider);


})(window, window.angular);

/**
 * @license AngularJS v1.5.8
 * (c) 2010-2016 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular) {'use strict';

/**
 * @ngdoc module
 * @name ngCookies
 * @description
 *
 * # ngCookies
 *
 * The `ngCookies` module provides a convenient wrapper for reading and writing browser cookies.
 *
 *
 * <div doc-module-components="ngCookies"></div>
 *
 * See {@link ngCookies.$cookies `$cookies`} for usage.
 */


angular.module('ngCookies', ['ng']).
  /**
   * @ngdoc provider
   * @name $cookiesProvider
   * @description
   * Use `$cookiesProvider` to change the default behavior of the {@link ngCookies.$cookies $cookies} service.
   * */
   provider('$cookies', [function $CookiesProvider() {
    /**
     * @ngdoc property
     * @name $cookiesProvider#defaults
     * @description
     *
     * Object containing default options to pass when setting cookies.
     *
     * The object may have following properties:
     *
     * - **path** - `{string}` - The cookie will be available only for this path and its
     *   sub-paths. By default, this is the URL that appears in your `<base>` tag.
     * - **domain** - `{string}` - The cookie will be available only for this domain and
     *   its sub-domains. For security reasons the user agent will not accept the cookie
     *   if the current domain is not a sub-domain of this domain or equal to it.
     * - **expires** - `{string|Date}` - String of the form "Wdy, DD Mon YYYY HH:MM:SS GMT"
     *   or a Date object indicating the exact date/time this cookie will expire.
     * - **secure** - `{boolean}` - If `true`, then the cookie will only be available through a
     *   secured connection.
     *
     * Note: By default, the address that appears in your `<base>` tag will be used as the path.
     * This is important so that cookies will be visible for all routes when html5mode is enabled.
     *
     **/
    var defaults = this.defaults = {};

    function calcOptions(options) {
      return options ? angular.extend({}, defaults, options) : defaults;
    }

    /**
     * @ngdoc service
     * @name $cookies
     *
     * @description
     * Provides read/write access to browser's cookies.
     *
     * <div class="alert alert-info">
     * Up until Angular 1.3, `$cookies` exposed properties that represented the
     * current browser cookie values. In version 1.4, this behavior has changed, and
     * `$cookies` now provides a standard api of getters, setters etc.
     * </div>
     *
     * Requires the {@link ngCookies `ngCookies`} module to be installed.
     *
     * @example
     *
     * ```js
     * angular.module('cookiesExample', ['ngCookies'])
     *   .controller('ExampleController', ['$cookies', function($cookies) {
     *     // Retrieving a cookie
     *     var favoriteCookie = $cookies.get('myFavorite');
     *     // Setting a cookie
     *     $cookies.put('myFavorite', 'oatmeal');
     *   }]);
     * ```
     */
    this.$get = ['$$cookieReader', '$$cookieWriter', function($$cookieReader, $$cookieWriter) {
      return {
        /**
         * @ngdoc method
         * @name $cookies#get
         *
         * @description
         * Returns the value of given cookie key
         *
         * @param {string} key Id to use for lookup.
         * @returns {string} Raw cookie value.
         */
        get: function(key) {
          return $$cookieReader()[key];
        },

        /**
         * @ngdoc method
         * @name $cookies#getObject
         *
         * @description
         * Returns the deserialized value of given cookie key
         *
         * @param {string} key Id to use for lookup.
         * @returns {Object} Deserialized cookie value.
         */
        getObject: function(key) {
          var value = this.get(key);
          return value ? angular.fromJson(value) : value;
        },

        /**
         * @ngdoc method
         * @name $cookies#getAll
         *
         * @description
         * Returns a key value object with all the cookies
         *
         * @returns {Object} All cookies
         */
        getAll: function() {
          return $$cookieReader();
        },

        /**
         * @ngdoc method
         * @name $cookies#put
         *
         * @description
         * Sets a value for given cookie key
         *
         * @param {string} key Id for the `value`.
         * @param {string} value Raw value to be stored.
         * @param {Object=} options Options object.
         *    See {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}
         */
        put: function(key, value, options) {
          $$cookieWriter(key, value, calcOptions(options));
        },

        /**
         * @ngdoc method
         * @name $cookies#putObject
         *
         * @description
         * Serializes and sets a value for given cookie key
         *
         * @param {string} key Id for the `value`.
         * @param {Object} value Value to be stored.
         * @param {Object=} options Options object.
         *    See {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}
         */
        putObject: function(key, value, options) {
          this.put(key, angular.toJson(value), options);
        },

        /**
         * @ngdoc method
         * @name $cookies#remove
         *
         * @description
         * Remove given cookie
         *
         * @param {string} key Id of the key-value pair to delete.
         * @param {Object=} options Options object.
         *    See {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}
         */
        remove: function(key, options) {
          $$cookieWriter(key, undefined, calcOptions(options));
        }
      };
    }];
  }]);

angular.module('ngCookies').
/**
 * @ngdoc service
 * @name $cookieStore
 * @deprecated
 * @requires $cookies
 *
 * @description
 * Provides a key-value (string-object) storage, that is backed by session cookies.
 * Objects put or retrieved from this storage are automatically serialized or
 * deserialized by angular's toJson/fromJson.
 *
 * Requires the {@link ngCookies `ngCookies`} module to be installed.
 *
 * <div class="alert alert-danger">
 * **Note:** The $cookieStore service is **deprecated**.
 * Please use the {@link ngCookies.$cookies `$cookies`} service instead.
 * </div>
 *
 * @example
 *
 * ```js
 * angular.module('cookieStoreExample', ['ngCookies'])
 *   .controller('ExampleController', ['$cookieStore', function($cookieStore) {
 *     // Put cookie
 *     $cookieStore.put('myFavorite','oatmeal');
 *     // Get cookie
 *     var favoriteCookie = $cookieStore.get('myFavorite');
 *     // Removing a cookie
 *     $cookieStore.remove('myFavorite');
 *   }]);
 * ```
 */
 factory('$cookieStore', ['$cookies', function($cookies) {

    return {
      /**
       * @ngdoc method
       * @name $cookieStore#get
       *
       * @description
       * Returns the value of given cookie key
       *
       * @param {string} key Id to use for lookup.
       * @returns {Object} Deserialized cookie value, undefined if the cookie does not exist.
       */
      get: function(key) {
        return $cookies.getObject(key);
      },

      /**
       * @ngdoc method
       * @name $cookieStore#put
       *
       * @description
       * Sets a value for given cookie key
       *
       * @param {string} key Id for the `value`.
       * @param {Object} value Value to be stored.
       */
      put: function(key, value) {
        $cookies.putObject(key, value);
      },

      /**
       * @ngdoc method
       * @name $cookieStore#remove
       *
       * @description
       * Remove given cookie
       *
       * @param {string} key Id of the key-value pair to delete.
       */
      remove: function(key) {
        $cookies.remove(key);
      }
    };

  }]);

/**
 * @name $$cookieWriter
 * @requires $document
 *
 * @description
 * This is a private service for writing cookies
 *
 * @param {string} name Cookie name
 * @param {string=} value Cookie value (if undefined, cookie will be deleted)
 * @param {Object=} options Object with options that need to be stored for the cookie.
 */
function $$CookieWriter($document, $log, $browser) {
  var cookiePath = $browser.baseHref();
  var rawDocument = $document[0];

  function buildCookieString(name, value, options) {
    var path, expires;
    options = options || {};
    expires = options.expires;
    path = angular.isDefined(options.path) ? options.path : cookiePath;
    if (angular.isUndefined(value)) {
      expires = 'Thu, 01 Jan 1970 00:00:00 GMT';
      value = '';
    }
    if (angular.isString(expires)) {
      expires = new Date(expires);
    }

    var str = encodeURIComponent(name) + '=' + encodeURIComponent(value);
    str += path ? ';path=' + path : '';
    str += options.domain ? ';domain=' + options.domain : '';
    str += expires ? ';expires=' + expires.toUTCString() : '';
    str += options.secure ? ';secure' : '';

    // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:
    // - 300 cookies
    // - 20 cookies per unique domain
    // - 4096 bytes per cookie
    var cookieLength = str.length + 1;
    if (cookieLength > 4096) {
      $log.warn("Cookie '" + name +
        "' possibly not set or overflowed because it was too large (" +
        cookieLength + " > 4096 bytes)!");
    }

    return str;
  }

  return function(name, value, options) {
    rawDocument.cookie = buildCookieString(name, value, options);
  };
}

$$CookieWriter.$inject = ['$document', '$log', '$browser'];

angular.module('ngCookies').provider('$$cookieWriter', function $$CookieWriterProvider() {
  this.$get = $$CookieWriter;
});


})(window, window.angular);

/**!
 * AngularJS file upload directives and services. Supoorts: file upload/drop/paste, resume, cancel/abort,
 * progress, resize, thumbnail, preview, validation and CORS
 * @author  Danial  <danial.farid@gmail.com>
 * @version 12.2.13
 */

if (window.XMLHttpRequest && !(window.FileAPI && FileAPI.shouldLoad)) {
	window.XMLHttpRequest.prototype.setRequestHeader = (function (orig) {
		return function (header, value) {
			if (header === '__setXHR_') {
				var val = value(this);
				// fix for angular < 1.2.0
				if (val instanceof Function) {
					val(this);
				}
			} else {
				orig.apply(this, arguments);
			}
		};
	})(window.XMLHttpRequest.prototype.setRequestHeader);
}

var ngFileUpload = angular.module('ngFileUpload', []);

ngFileUpload.version = '12.2.13';

ngFileUpload.service('UploadBase', ['$http', '$q', '$timeout', function ($http, $q, $timeout) {
	var upload = this;
	upload.promisesCount = 0;

	this.isResumeSupported = function () {
		return window.Blob && window.Blob.prototype.slice;
	};

	var resumeSupported = this.isResumeSupported();

	function sendHttp(config) {
		config.method = config.method || 'POST';
		config.headers = config.headers || {};

		var deferred = config._deferred = config._deferred || $q.defer();
		var promise = deferred.promise;

		function notifyProgress(e) {
			if (deferred.notify) {
				deferred.notify(e);
			}
			if (promise.progressFunc) {
				$timeout(function () {
					promise.progressFunc(e);
				});
			}
		}

		function getNotifyEvent(n) {
			if (config._start != null && resumeSupported) {
				return {
					loaded: n.loaded + config._start,
					total: (config._file && config._file.size) || n.total,
					type: n.type, config: config,
					lengthComputable: true, target: n.target
				};
			} else {
				return n;
			}
		}

		if (!config.disableProgress) {
			config.headers.__setXHR_ = function () {
				return function (xhr) {
					if (!xhr || !xhr.upload || !xhr.upload.addEventListener) return;
					config.__XHR = xhr;
					if (config.xhrFn) config.xhrFn(xhr);
					xhr.upload.addEventListener('progress', function (e) {
						e.config = config;
						notifyProgress(getNotifyEvent(e));
					}, false);
					//fix for firefox not firing upload progress end, also IE8-9
					xhr.upload.addEventListener('load', function (e) {
						if (e.lengthComputable) {
							e.config = config;
							notifyProgress(getNotifyEvent(e));
						}
					}, false);
				};
			};
		}

		function uploadWithAngular() {
			$http(config).then(function (r) {
				if (resumeSupported && config._chunkSize && !config._finished && config._file) {
					var fileSize = config._file && config._file.size || 0;
					notifyProgress({
						loaded: Math.min(config._end, fileSize),
						total: fileSize,
						config: config,
						type: 'progress'
					}
					);
					upload.upload(config, true);
				} else {
					if (config._finished) delete config._finished;
					deferred.resolve(r);
				}
			}, function (e) {
				deferred.reject(e);
			}, function (n) {
				deferred.notify(n);
			}
			);
		}

		if (!resumeSupported) {
			uploadWithAngular();
		} else if (config._chunkSize && config._end && !config._finished) {
			config._start = config._end;
			config._end += config._chunkSize;
			uploadWithAngular();
		} else if (config.resumeSizeUrl) {
			$http.get(config.resumeSizeUrl).then(function (resp) {
				if (config.resumeSizeResponseReader) {
					config._start = config.resumeSizeResponseReader(resp.data);
				} else {
					config._start = parseInt((resp.data.size == null ? resp.data : resp.data.size).toString());
				}
				if (config._chunkSize) {
					config._end = config._start + config._chunkSize;
				}
				uploadWithAngular();
			}, function (e) {
				throw e;
			});
		} else if (config.resumeSize) {
			config.resumeSize().then(function (size) {
				config._start = size;
				if (config._chunkSize) {
					config._end = config._start + config._chunkSize;
				}
				uploadWithAngular();
			}, function (e) {
				throw e;
			});
		} else {
			if (config._chunkSize) {
				config._start = 0;
				config._end = config._start + config._chunkSize;
			}
			uploadWithAngular();
		}


		promise.success = function (fn) {
			promise.then(function (response) {
				fn(response.data, response.status, response.headers, config);
			});
			return promise;
		};

		promise.error = function (fn) {
			promise.then(null, function (response) {
				fn(response.data, response.status, response.headers, config);
			});
			return promise;
		};

		promise.progress = function (fn) {
			promise.progressFunc = fn;
			promise.then(null, null, function (n) {
				fn(n);
			});
			return promise;
		};
		promise.abort = promise.pause = function () {
			if (config.__XHR) {
				$timeout(function () {
					config.__XHR.abort();
				});
			}
			return promise;
		};
		promise.xhr = function (fn) {
			config.xhrFn = (function (origXhrFn) {
				return function () {
					if (origXhrFn) origXhrFn.apply(promise, arguments);
					fn.apply(promise, arguments);
				};
			})(config.xhrFn);
			return promise;
		};

		upload.promisesCount++;
		if (promise['finally'] && promise['finally'] instanceof Function) {
			promise['finally'](function () {
				upload.promisesCount--;
			});
		}
		return promise;
	}

	this.isUploadInProgress = function () {
		return upload.promisesCount > 0;
	};

	this.rename = function (file, name) {
		file.ngfName = name;
		return file;
	};

	this.jsonBlob = function (val) {
		if (val != null && !angular.isString(val)) {
			val = JSON.stringify(val);
		}
		var blob = new window.Blob([val], { type: 'application/json' });
		blob._ngfBlob = true;
		return blob;
	};

	this.json = function (val) {
		return angular.toJson(val);
	};

	function copy(obj) {
		var clone = {};
		for (var key in obj) {
			if (obj.hasOwnProperty(key)) {
				clone[key] = obj[key];
			}
		}
		return clone;
	}

	this.isFile = function (file) {
		return file != null && (file instanceof window.Blob || (file.flashId && file.name && file.size));
	};

	this.upload = function (config, internal) {
		function toResumeFile(file, formData) {
			if (file._ngfBlob) return file;
			config._file = config._file || file;
			if (config._start != null && resumeSupported) {
				if (config._end && config._end >= file.size) {
					config._finished = true;
					config._end = file.size;
				}
				var slice = file.slice(config._start, config._end || file.size);
				slice.name = file.name;
				slice.ngfName = file.ngfName;
				if (config._chunkSize) {
					formData.append('_chunkSize', config._chunkSize);
					formData.append('_currentChunkSize', config._end - config._start);
					formData.append('_chunkNumber', Math.floor(config._start / config._chunkSize));
					formData.append('_totalSize', config._file.size);
				}
				return slice;
			}
			return file;
		}

		function addFieldToFormData(formData, val, key) {
			if (val !== undefined) {
				if (angular.isDate(val)) {
					val = val.toISOString();
				}
				if (angular.isString(val)) {
					formData.append(key, val);
				} else if (upload.isFile(val)) {
					var file = toResumeFile(val, formData);
					var split = key.split(',');
					if (split[1]) {
						file.ngfName = split[1].replace(/^\s+|\s+$/g, '');
						key = split[0];
					}
					config._fileKey = config._fileKey || key;
					formData.append(key, file, file.ngfName || file.name);
				} else {
					if (angular.isObject(val)) {
						if (val.$$ngfCircularDetection) throw 'ngFileUpload: Circular reference in config.data. Make sure specified data for Upload.upload() has no circular reference: ' + key;

						val.$$ngfCircularDetection = true;
						try {
							for (var k in val) {
								if (val.hasOwnProperty(k) && k !== '$$ngfCircularDetection') {
									var objectKey = config.objectKey == null ? '[i]' : config.objectKey;
									if (val.length && parseInt(k) > -1) {
										objectKey = config.arrayKey == null ? objectKey : config.arrayKey;
									}
									addFieldToFormData(formData, val[k], key + objectKey.replace(/[ik]/g, k));
								}
							}
						} finally {
							delete val.$$ngfCircularDetection;
						}
					} else {
						formData.append(key, val);
					}
				}
			}
		}

		function digestConfig() {
			config._chunkSize = upload.translateScalars(config.resumeChunkSize);
			config._chunkSize = config._chunkSize ? parseInt(config._chunkSize.toString()) : null;

			config.headers = config.headers || {};
			config.headers['Content-Type'] = undefined;
			config.transformRequest = config.transformRequest ?
			  (angular.isArray(config.transformRequest) ?
				config.transformRequest : [config.transformRequest]) : [];
			config.transformRequest.push(function (data) {
				var formData = new window.FormData(), key;
				data = data || config.fields || {};
				if (config.file) {
					data.file = config.file;
				}
				for (key in data) {
					if (data.hasOwnProperty(key)) {
						var val = data[key];
						if (config.formDataAppender) {
							config.formDataAppender(formData, key, val);
						} else {
							addFieldToFormData(formData, val, key);
						}
					}
				}

				return formData;
			});
		}

		if (!internal) config = copy(config);
		if (!config._isDigested) {
			config._isDigested = true;
			digestConfig();
		}

		return sendHttp(config);
	};

	this.http = function (config) {
		config = copy(config);
		config.transformRequest = config.transformRequest || function (data) {
			if ((window.ArrayBuffer && data instanceof window.ArrayBuffer) || data instanceof window.Blob) {
				return data;
			}
			return $http.defaults.transformRequest[0].apply(this, arguments);
		};
		config._chunkSize = upload.translateScalars(config.resumeChunkSize);
		config._chunkSize = config._chunkSize ? parseInt(config._chunkSize.toString()) : null;

		return sendHttp(config);
	};

	this.translateScalars = function (str) {
		if (angular.isString(str)) {
			if (str.search(/kb/i) === str.length - 2) {
				return parseFloat(str.substring(0, str.length - 2) * 1024);
			} else if (str.search(/mb/i) === str.length - 2) {
				return parseFloat(str.substring(0, str.length - 2) * 1048576);
			} else if (str.search(/gb/i) === str.length - 2) {
				return parseFloat(str.substring(0, str.length - 2) * 1073741824);
			} else if (str.search(/b/i) === str.length - 1) {
				return parseFloat(str.substring(0, str.length - 1));
			} else if (str.search(/s/i) === str.length - 1) {
				return parseFloat(str.substring(0, str.length - 1));
			} else if (str.search(/m/i) === str.length - 1) {
				return parseFloat(str.substring(0, str.length - 1) * 60);
			} else if (str.search(/h/i) === str.length - 1) {
				return parseFloat(str.substring(0, str.length - 1) * 3600);
			}
		}
		return str;
	};

	this.urlToBlob = function (url) {
		var defer = $q.defer();
		$http({ url: url, method: 'get', responseType: 'arraybuffer' }).then(function (resp) {
			var arrayBufferView = new Uint8Array(resp.data);
			var type = resp.headers('content-type') || 'image/WebP';
			var blob = new window.Blob([arrayBufferView], { type: type });
			var matches = url.match(/.*\/(.+?)(\?.*)?$/);
			if (matches.length > 1) {
				blob.name = matches[1];
			}
			defer.resolve(blob);
		}, function (e) {
			defer.reject(e);
		});
		return defer.promise;
	};

	this.setDefaults = function (defaults) {
		this.defaults = defaults || {};
	};

	this.defaults = {};
	this.version = ngFileUpload.version;
}

]);

ngFileUpload.service('Upload', ['$parse', '$timeout', '$compile', '$q', 'UploadExif', function ($parse, $timeout, $compile, $q, UploadExif) {
	var upload = UploadExif;
	upload.getAttrWithDefaults = function (attr, name) {
		if (attr[name] != null) return attr[name];
		var def = upload.defaults[name];
		return (def == null ? def : (angular.isString(def) ? def : JSON.stringify(def)));
	};

	upload.attrGetter = function (name, attr, scope, params) {
		var attrVal = this.getAttrWithDefaults(attr, name);
		if (scope) {
			try {
				if (params) {
					return $parse(attrVal)(scope, params);
				} else {
					return $parse(attrVal)(scope);
				}
			} catch (e) {
				// hangle string value without single qoute
				if (name.search(/min|max|pattern/i)) {
					return attrVal;
				} else {
					throw e;
				}
			}
		} else {
			return attrVal;
		}
	};

	upload.shouldUpdateOn = function (type, attr, scope) {
		var modelOptions = upload.attrGetter('ngfModelOptions', attr, scope);
		if (modelOptions && modelOptions.updateOn) {
			return modelOptions.updateOn.split(' ').indexOf(type) > -1;
		}
		return true;
	};

	upload.emptyPromise = function () {
		var d = $q.defer();
		var args = arguments;
		$timeout(function () {
			d.resolve.apply(d, args);
		});
		return d.promise;
	};

	upload.rejectPromise = function () {
		var d = $q.defer();
		var args = arguments;
		$timeout(function () {
			d.reject.apply(d, args);
		});
		return d.promise;
	};

	upload.happyPromise = function (promise, data) {
		var d = $q.defer();
		promise.then(function (result) {
			d.resolve(result);
		}, function (error) {
			$timeout(function () {
				throw error;
			});
			d.resolve(data);
		});
		return d.promise;
	};

	function applyExifRotations(files, attr, scope) {
		var promises = [upload.emptyPromise()];
		angular.forEach(files, function (f, i) {
			if (f.type.indexOf('image/jpeg') === 0 && upload.attrGetter('ngfFixOrientation', attr, scope, { $file: f })) {
				promises.push(upload.happyPromise(upload.applyExifRotation(f), f).then(function (fixedFile) {
					files.splice(i, 1, fixedFile);
				}));
			}
		});
		return $q.all(promises);
	}

	function resizeFile(files, attr, scope, ngModel) {
		var resizeVal = upload.attrGetter('ngfResize', attr, scope);
		if (!resizeVal || !upload.isResizeSupported() || !files.length) return upload.emptyPromise();
		if (resizeVal instanceof Function) {
			var defer = $q.defer();
			return resizeVal(files).then(function (p) {
				resizeWithParams(p, files, attr, scope, ngModel).then(function (r) {
					defer.resolve(r);
				}, function (e) {
					defer.reject(e);
				});
			}, function (e) {
				defer.reject(e);
			});
		} else {
			return resizeWithParams(resizeVal, files, attr, scope, ngModel);
		}
	}

	function resizeWithParams(params, files, attr, scope, ngModel) {
		var promises = [upload.emptyPromise()];

		function handleFile(f, i) {
			if (f.type.indexOf('image') === 0) {
				if (params.pattern && !upload.validatePattern(f, params.pattern)) return;
				params.resizeIf = function (width, height) {
					return upload.attrGetter('ngfResizeIf', attr, scope,
					  { $width: width, $height: height, $file: f });
				};
				var promise = upload.resize(f, params);
				promises.push(promise);
				promise.then(function (resizedFile) {
					files.splice(i, 1, resizedFile);
				}, function (e) {
					f.$error = 'resize';
					(f.$errorMessages = (f.$errorMessages || {})).resize = true;
					f.$errorParam = (e ? (e.message ? e.message : e) + ': ' : '') + (f && f.name);
					ngModel.$ngfValidations.push({ name: 'resize', valid: false });
					upload.applyModelValidation(ngModel, files);
				});
			}
		}

		for (var i = 0; i < files.length; i++) {
			handleFile(files[i], i);
		}
		return $q.all(promises);
	}

	upload.updateModel = function (ngModel, attr, scope, fileChange, files, evt, noDelay) {
		function update(files, invalidFiles, newFiles, dupFiles, isSingleModel) {
			attr.$$ngfPrevValidFiles = files;
			attr.$$ngfPrevInvalidFiles = invalidFiles;
			var file = files && files.length ? files[0] : null;
			var invalidFile = invalidFiles && invalidFiles.length ? invalidFiles[0] : null;

			if (ngModel) {
				upload.applyModelValidation(ngModel, files);
				ngModel.$setViewValue(isSingleModel ? file : files);
			}

			if (fileChange) {
				$parse(fileChange)(scope, {
					$files: files,
					$file: file,
					$newFiles: newFiles,
					$duplicateFiles: dupFiles,
					$invalidFiles: invalidFiles,
					$invalidFile: invalidFile,
					$event: evt
				});
			}

			var invalidModel = upload.attrGetter('ngfModelInvalid', attr);
			if (invalidModel) {
				$timeout(function () {
					$parse(invalidModel).assign(scope, isSingleModel ? invalidFile : invalidFiles);
				});
			}
			$timeout(function () {
				// scope apply changes
			});
		}

		var allNewFiles, dupFiles = [], prevValidFiles, prevInvalidFiles,
		  invalids = [], valids = [];

		function removeDuplicates() {
			function equals(f1, f2) {
				return f1.name === f2.name && (f1.$ngfOrigSize || f1.size) === (f2.$ngfOrigSize || f2.size) &&
				  f1.type === f2.type;
			}

			function isInPrevFiles(f) {
				var j;
				for (j = 0; j < prevValidFiles.length; j++) {
					if (equals(f, prevValidFiles[j])) {
						return true;
					}
				}
				for (j = 0; j < prevInvalidFiles.length; j++) {
					if (equals(f, prevInvalidFiles[j])) {
						return true;
					}
				}
				return false;
			}

			if (files) {
				allNewFiles = [];
				dupFiles = [];
				for (var i = 0; i < files.length; i++) {
					if (isInPrevFiles(files[i])) {
						dupFiles.push(files[i]);
					} else {
						allNewFiles.push(files[i]);
					}
				}
			}
		}

		function toArray(v) {
			return angular.isArray(v) ? v : [v];
		}

		function resizeAndUpdate() {
			function updateModel() {
				$timeout(function () {
					update(keep ? prevValidFiles.concat(valids) : valids,
					  keep ? prevInvalidFiles.concat(invalids) : invalids,
					  files, dupFiles, isSingleModel);
				}, options && options.debounce ? options.debounce.change || options.debounce : 0);
			}

			var resizingFiles = validateAfterResize ? allNewFiles : valids;
			resizeFile(resizingFiles, attr, scope, ngModel).then(function () {
				if (validateAfterResize) {
					upload.validate(allNewFiles, keep ? prevValidFiles.length : 0, ngModel, attr, scope)
					  .then(function (validationResult) {
					  	valids = validationResult.validsFiles;
					  	invalids = validationResult.invalidsFiles;
					  	updateModel();
					  });
				} else {
					updateModel();
				}
			}, function () {
				for (var i = 0; i < resizingFiles.length; i++) {
					var f = resizingFiles[i];
					if (f.$error === 'resize') {
						var index = valids.indexOf(f);
						if (index > -1) {
							valids.splice(index, 1);
							invalids.push(f);
						}
						updateModel();
					}
				}
			});
		}

		prevValidFiles = attr.$$ngfPrevValidFiles || [];
		prevInvalidFiles = attr.$$ngfPrevInvalidFiles || [];
		if (ngModel && ngModel.$modelValue) {
			prevValidFiles = toArray(ngModel.$modelValue);
		}

		var keep = upload.attrGetter('ngfKeep', attr, scope);
		allNewFiles = (files || []).slice(0);
		if (keep === 'distinct' || upload.attrGetter('ngfKeepDistinct', attr, scope) === true) {
			removeDuplicates(attr, scope);
		}

		var isSingleModel = !keep && !upload.attrGetter('ngfMultiple', attr, scope) && !upload.attrGetter('multiple', attr);

		if (keep && !allNewFiles.length) return;

		upload.attrGetter('ngfBeforeModelChange', attr, scope, {
			$files: files,
			$file: files && files.length ? files[0] : null,
			$newFiles: allNewFiles,
			$duplicateFiles: dupFiles,
			$event: evt
		});

		var validateAfterResize = upload.attrGetter('ngfValidateAfterResize', attr, scope);

		var options = upload.attrGetter('ngfModelOptions', attr, scope);
		upload.validate(allNewFiles, keep ? prevValidFiles.length : 0, ngModel, attr, scope)
		  .then(function (validationResult) {
		  	if (noDelay) {
		  		update(allNewFiles, [], files, dupFiles, isSingleModel);
		  	} else {
		  		if ((!options || !options.allowInvalid) && !validateAfterResize) {
		  			valids = validationResult.validFiles;
		  			invalids = validationResult.invalidFiles;
		  		} else {
		  			valids = allNewFiles;
		  		}
		  		if (upload.attrGetter('ngfFixOrientation', attr, scope) && upload.isExifSupported()) {
		  			applyExifRotations(valids, attr, scope).then(function () {
		  				resizeAndUpdate();
		  			});
		  		} else {
		  			resizeAndUpdate();
		  		}
		  	}
		  });
	};

	return upload;
}]);

ngFileUpload.directive('ngfSelect', ['$parse', '$timeout', '$compile', 'Upload', function ($parse, $timeout, $compile, Upload) {
	var generatedElems = [];

	function isDelayedClickSupported(ua) {
		// fix for android native browser < 4.4 and safari windows
		var m = ua.match(/Android[^\d]*(\d+)\.(\d+)/);
		if (m && m.length > 2) {
			var v = Upload.defaults.androidFixMinorVersion || 4;
			return parseInt(m[1]) < 4 || (parseInt(m[1]) === v && parseInt(m[2]) < v);
		}

		// safari on windows
		return ua.indexOf('Chrome') === -1 && /.*Windows.*Safari.*/.test(ua);
	}

	function linkFileSelect(scope, elem, attr, ngModel, $parse, $timeout, $compile, upload) {
		/** @namespace attr.ngfSelect */
		/** @namespace attr.ngfChange */
		/** @namespace attr.ngModel */
		/** @namespace attr.ngfModelOptions */
		/** @namespace attr.ngfMultiple */
		/** @namespace attr.ngfCapture */
		/** @namespace attr.ngfValidate */
		/** @namespace attr.ngfKeep */
		var attrGetter = function (name, scope) {
			return upload.attrGetter(name, attr, scope);
		};

		function isInputTypeFile() {
			return elem[0].tagName.toLowerCase() === 'input' && attr.type && attr.type.toLowerCase() === 'file';
		}

		function fileChangeAttr() {
			return attrGetter('ngfChange') || attrGetter('ngfSelect');
		}

		function changeFn(evt) {
			if (upload.shouldUpdateOn('change', attr, scope)) {
				var fileList = evt.__files_ || (evt.target && evt.target.files), files = [];
				/* Handle duplicate call in  IE11 */
				if (!fileList) return;
				for (var i = 0; i < fileList.length; i++) {
					files.push(fileList[i]);
				}
				upload.updateModel(ngModel, attr, scope, fileChangeAttr(),
				  files.length ? files : null, evt);
			}
		}

		upload.registerModelChangeValidator(ngModel, attr, scope);

		var unwatches = [];
		if (attrGetter('ngfMultiple')) {
			unwatches.push(scope.$watch(attrGetter('ngfMultiple'), function () {
				fileElem.attr('multiple', attrGetter('ngfMultiple', scope));
			}));
		}
		if (attrGetter('ngfCapture')) {
			unwatches.push(scope.$watch(attrGetter('ngfCapture'), function () {
				fileElem.attr('capture', attrGetter('ngfCapture', scope));
			}));
		}
		if (attrGetter('ngfAccept')) {
			unwatches.push(scope.$watch(attrGetter('ngfAccept'), function () {
				fileElem.attr('accept', attrGetter('ngfAccept', scope));
			}));
		}
		unwatches.push(attr.$observe('accept', function () {
			fileElem.attr('accept', attrGetter('accept'));
		}));
		function bindAttrToFileInput(fileElem, label) {
			function updateId(val) {
				fileElem.attr('id', 'ngf-' + val);
				label.attr('id', 'ngf-label-' + val);
			}

			for (var i = 0; i < elem[0].attributes.length; i++) {
				var attribute = elem[0].attributes[i];
				if (attribute.name !== 'type' && attribute.name !== 'class' && attribute.name !== 'style') {
					if (attribute.name === 'id') {
						updateId(attribute.value);
						unwatches.push(attr.$observe('id', updateId));
					} else {
						fileElem.attr(attribute.name, (!attribute.value && (attribute.name === 'required' ||
						attribute.name === 'multiple')) ? attribute.name : attribute.value);
					}
				}
			}
		}

		function createFileInput() {
			if (isInputTypeFile()) {
				return elem;
			}

			var fileElem = angular.element('<input type="file">');

			var label = angular.element('<label>upload</label>');
			label.css('visibility', 'hidden').css('position', 'absolute').css('overflow', 'hidden')
			  .css('width', '0px').css('height', '0px').css('border', 'none')
			  .css('margin', '0px').css('padding', '0px').attr('tabindex', '-1');
			bindAttrToFileInput(fileElem, label);

			generatedElems.push({ el: elem, ref: label });

			document.body.appendChild(label.append(fileElem)[0]);

			return fileElem;
		}

		function clickHandler(evt) {
			if (elem.attr('disabled')) return false;
			if (attrGetter('ngfSelectDisabled', scope)) return;

			var r = detectSwipe(evt);
			// prevent the click if it is a swipe
			if (r != null) return r;

			resetModel(evt);

			// fix for md when the element is removed from the DOM and added back #460
			try {
				if (!isInputTypeFile() && !document.body.contains(fileElem[0])) {
					generatedElems.push({ el: elem, ref: fileElem.parent() });
					document.body.appendChild(fileElem.parent()[0]);
					fileElem.bind('change', changeFn);
				}
			} catch (e) {/*ignore*/
			}

			if (isDelayedClickSupported(navigator.userAgent)) {
				setTimeout(function () {
					fileElem[0].click();
				}, 0);
			} else {
				fileElem[0].click();
			}

			return false;
		}


		var initialTouchStartY = 0;
		var initialTouchStartX = 0;

		function detectSwipe(evt) {
			var touches = evt.changedTouches || (evt.originalEvent && evt.originalEvent.changedTouches);
			if (touches) {
				if (evt.type === 'touchstart') {
					initialTouchStartX = touches[0].clientX;
					initialTouchStartY = touches[0].clientY;
					return true; // don't block event default
				} else {
					// prevent scroll from triggering event
					if (evt.type === 'touchend') {
						var currentX = touches[0].clientX;
						var currentY = touches[0].clientY;
						if ((Math.abs(currentX - initialTouchStartX) > 20) ||
						  (Math.abs(currentY - initialTouchStartY) > 20)) {
							evt.stopPropagation();
							evt.preventDefault();
							return false;
						}
					}
					return true;
				}
			}
		}

		var fileElem = elem;

		function resetModel(evt) {
			if (upload.shouldUpdateOn('click', attr, scope) && fileElem.val()) {
				fileElem.val(null);
				upload.updateModel(ngModel, attr, scope, fileChangeAttr(), null, evt, true);
			}
		}

		if (!isInputTypeFile()) {
			fileElem = createFileInput();
		}
		fileElem.bind('change', changeFn);

		if (!isInputTypeFile()) {
			elem.bind('click touchstart touchend', clickHandler);
		} else {
			elem.bind('click', resetModel);
		}

		function ie10SameFileSelectFix(evt) {
			if (fileElem && !fileElem.attr('__ngf_ie10_Fix_')) {
				if (!fileElem[0].parentNode) {
					fileElem = null;
					return;
				}
				evt.preventDefault();
				evt.stopPropagation();
				fileElem.unbind('click');
				var clone = fileElem.clone();
				fileElem.replaceWith(clone);
				fileElem = clone;
				fileElem.attr('__ngf_ie10_Fix_', 'true');
				fileElem.bind('change', changeFn);
				fileElem.bind('click', ie10SameFileSelectFix);
				fileElem[0].click();
				return false;
			} else {
				fileElem.removeAttr('__ngf_ie10_Fix_');
			}
		}

		if (navigator.appVersion.indexOf('MSIE 10') !== -1) {
			fileElem.bind('click', ie10SameFileSelectFix);
		}

		if (ngModel) ngModel.$formatters.push(function (val) {
			if (val == null || val.length === 0) {
				if (fileElem.val()) {
					fileElem.val(null);
				}
			}
			return val;
		});

		scope.$on('$destroy', function () {
			if (!isInputTypeFile()) fileElem.parent().remove();
			angular.forEach(unwatches, function (unwatch) {
				unwatch();
			});
		});

		$timeout(function () {
			for (var i = 0; i < generatedElems.length; i++) {
				var g = generatedElems[i];
				if (!document.body.contains(g.el[0])) {
					generatedElems.splice(i, 1);
					g.ref.remove();
				}
			}
		});

		if (window.FileAPI && window.FileAPI.ngfFixIE) {
			window.FileAPI.ngfFixIE(elem, fileElem, changeFn);
		}
	}

	return {
		restrict: 'AEC',
		require: '?ngModel',
		link: function (scope, elem, attr, ngModel) {
			linkFileSelect(scope, elem, attr, ngModel, $parse, $timeout, $compile, Upload);
		}
	};
}]);

(function () {

	ngFileUpload.service('UploadDataUrl', ['UploadBase', '$timeout', '$q', function (UploadBase, $timeout, $q) {
		var upload = UploadBase;
		upload.base64DataUrl = function (file) {
			if (angular.isArray(file)) {
				var d = $q.defer(), count = 0;
				angular.forEach(file, function (f) {
					upload.dataUrl(f, true)['finally'](function () {
						count++;
						if (count === file.length) {
							var urls = [];
							angular.forEach(file, function (ff) {
								urls.push(ff.$ngfDataUrl);
							});
							d.resolve(urls, file);
						}
					});
				});
				return d.promise;
			} else {
				return upload.dataUrl(file, true);
			}
		};
		upload.dataUrl = function (file, disallowObjectUrl) {
			if (!file) return upload.emptyPromise(file, file);
			if ((disallowObjectUrl && file.$ngfDataUrl != null) || (!disallowObjectUrl && file.$ngfBlobUrl != null)) {
				return upload.emptyPromise(disallowObjectUrl ? file.$ngfDataUrl : file.$ngfBlobUrl, file);
			}
			var p = disallowObjectUrl ? file.$$ngfDataUrlPromise : file.$$ngfBlobUrlPromise;
			if (p) return p;

			var deferred = $q.defer();
			$timeout(function () {
				if (window.FileReader && file &&
				  (!window.FileAPI || navigator.userAgent.indexOf('MSIE 8') === -1 || file.size < 20000) &&
				  (!window.FileAPI || navigator.userAgent.indexOf('MSIE 9') === -1 || file.size < 4000000)) {
					//prefer URL.createObjectURL for handling refrences to files of all sizes
					//since it doesn´t build a large string in memory
					var URL = window.URL || window.webkitURL;
					if (URL && URL.createObjectURL && !disallowObjectUrl) {
						var url;
						try {
							url = URL.createObjectURL(file);
						} catch (e) {
							$timeout(function () {
								file.$ngfBlobUrl = '';
								deferred.reject();
							});
							return;
						}
						$timeout(function () {
							file.$ngfBlobUrl = url;
							if (url) {
								deferred.resolve(url, file);
								upload.blobUrls = upload.blobUrls || [];
								upload.blobUrlsTotalSize = upload.blobUrlsTotalSize || 0;
								upload.blobUrls.push({ url: url, size: file.size });
								upload.blobUrlsTotalSize += file.size || 0;
								var maxMemory = upload.defaults.blobUrlsMaxMemory || 268435456;
								var maxLength = upload.defaults.blobUrlsMaxQueueSize || 200;
								while ((upload.blobUrlsTotalSize > maxMemory || upload.blobUrls.length > maxLength) && upload.blobUrls.length > 1) {
									var obj = upload.blobUrls.splice(0, 1)[0];
									URL.revokeObjectURL(obj.url);
									upload.blobUrlsTotalSize -= obj.size;
								}
							}
						});
					} else {
						var fileReader = new FileReader();
						fileReader.onload = function (e) {
							$timeout(function () {
								file.$ngfDataUrl = e.target.result;
								deferred.resolve(e.target.result, file);
								$timeout(function () {
									delete file.$ngfDataUrl;
								}, 1000);
							});
						};
						fileReader.onerror = function () {
							$timeout(function () {
								file.$ngfDataUrl = '';
								deferred.reject();
							});
						};
						fileReader.readAsDataURL(file);
					}
				} else {
					$timeout(function () {
						file[disallowObjectUrl ? '$ngfDataUrl' : '$ngfBlobUrl'] = '';
						deferred.reject();
					});
				}
			});

			if (disallowObjectUrl) {
				p = file.$$ngfDataUrlPromise = deferred.promise;
			} else {
				p = file.$$ngfBlobUrlPromise = deferred.promise;
			}
			p['finally'](function () {
				delete file[disallowObjectUrl ? '$$ngfDataUrlPromise' : '$$ngfBlobUrlPromise'];
			});
			return p;
		};
		return upload;
	}]);

	function getTagType(el) {
		if (el.tagName.toLowerCase() === 'img') return 'image';
		if (el.tagName.toLowerCase() === 'audio') return 'audio';
		if (el.tagName.toLowerCase() === 'video') return 'video';
		return /./;
	}

	function linkFileDirective(Upload, $timeout, scope, elem, attr, directiveName, resizeParams, isBackground) {
		function constructDataUrl(file) {
			var disallowObjectUrl = Upload.attrGetter('ngfNoObjectUrl', attr, scope);
			Upload.dataUrl(file, disallowObjectUrl)['finally'](function () {
				$timeout(function () {
					var src = (disallowObjectUrl ? file.$ngfDataUrl : file.$ngfBlobUrl) || file.$ngfDataUrl;
					if (isBackground) {
						elem.css('background-image', 'url(\'' + (src || '') + '\')');
					} else {
						elem.attr('src', src);
					}
					if (src) {
						elem.removeClass('ng-hide');
					} else {
						elem.addClass('ng-hide');
					}
				});
			});
		}

		$timeout(function () {
			var unwatch = scope.$watch(attr[directiveName], function (file) {
				var size = resizeParams;
				if (directiveName === 'ngfThumbnail') {
					if (!size) {
						size = {
							width: elem[0].naturalWidth || elem[0].clientWidth,
							height: elem[0].naturalHeight || elem[0].clientHeight
						};
					}
					if (size.width === 0 && window.getComputedStyle) {
						var style = getComputedStyle(elem[0]);
						if (style.width && style.width.indexOf('px') > -1 && style.height && style.height.indexOf('px') > -1) {
							size = {
								width: parseInt(style.width.slice(0, -2)),
								height: parseInt(style.height.slice(0, -2))
							};
						}
					}
				}

				if (angular.isString(file)) {
					elem.removeClass('ng-hide');
					if (isBackground) {
						return elem.css('background-image', 'url(\'' + file + '\')');
					} else {
						return elem.attr('src', file);
					}
				}
				if (file && file.type && file.type.search(getTagType(elem[0])) === 0 &&
				  (!isBackground || file.type.indexOf('image') === 0)) {
					if (size && Upload.isResizeSupported()) {
						size.resizeIf = function (width, height) {
							return Upload.attrGetter('ngfResizeIf', attr, scope,
							  { $width: width, $height: height, $file: file });
						};
						Upload.resize(file, size).then(
						  function (f) {
						  	constructDataUrl(f);
						  }, function (e) {
						  	throw e;
						  }
						);
					} else {
						constructDataUrl(file);
					}
				} else {
					elem.addClass('ng-hide');
				}
			});

			scope.$on('$destroy', function () {
				unwatch();
			});
		});
	}


	/** @namespace attr.ngfSrc */
	/** @namespace attr.ngfNoObjectUrl */
	ngFileUpload.directive('ngfSrc', ['Upload', '$timeout', function (Upload, $timeout) {
		return {
			restrict: 'AE',
			link: function (scope, elem, attr) {
				linkFileDirective(Upload, $timeout, scope, elem, attr, 'ngfSrc',
				  Upload.attrGetter('ngfResize', attr, scope), false);
			}
		};
	}]);

	/** @namespace attr.ngfBackground */
	/** @namespace attr.ngfNoObjectUrl */
	ngFileUpload.directive('ngfBackground', ['Upload', '$timeout', function (Upload, $timeout) {
		return {
			restrict: 'AE',
			link: function (scope, elem, attr) {
				linkFileDirective(Upload, $timeout, scope, elem, attr, 'ngfBackground',
				  Upload.attrGetter('ngfResize', attr, scope), true);
			}
		};
	}]);

	/** @namespace attr.ngfThumbnail */
	/** @namespace attr.ngfAsBackground */
	/** @namespace attr.ngfSize */
	/** @namespace attr.ngfNoObjectUrl */
	ngFileUpload.directive('ngfThumbnail', ['Upload', '$timeout', function (Upload, $timeout) {
		return {
			restrict: 'AE',
			link: function (scope, elem, attr) {
				var size = Upload.attrGetter('ngfSize', attr, scope);
				linkFileDirective(Upload, $timeout, scope, elem, attr, 'ngfThumbnail', size,
				  Upload.attrGetter('ngfAsBackground', attr, scope));
			}
		};
	}]);

	ngFileUpload.config(['$compileProvider', function ($compileProvider) {
		if ($compileProvider.imgSrcSanitizationWhitelist) $compileProvider.imgSrcSanitizationWhitelist(/^\s*(https?|ftp|mailto|tel|webcal|local|file|data|blob):/);
		if ($compileProvider.aHrefSanitizationWhitelist) $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|tel|webcal|local|file|data|blob):/);
	}]);

	ngFileUpload.filter('ngfDataUrl', ['UploadDataUrl', '$sce', function (UploadDataUrl, $sce) {
		return function (file, disallowObjectUrl, trustedUrl) {
			if (angular.isString(file)) {
				return $sce.trustAsResourceUrl(file);
			}
			var src = file && ((disallowObjectUrl ? file.$ngfDataUrl : file.$ngfBlobUrl) || file.$ngfDataUrl);
			if (file && !src) {
				if (!file.$ngfDataUrlFilterInProgress && angular.isObject(file)) {
					file.$ngfDataUrlFilterInProgress = true;
					UploadDataUrl.dataUrl(file, disallowObjectUrl);
				}
				return '';
			}
			if (file) delete file.$ngfDataUrlFilterInProgress;
			return (file && src ? (trustedUrl ? $sce.trustAsResourceUrl(src) : src) : file) || '';
		};
	}]);

})();

ngFileUpload.service('UploadValidate', ['UploadDataUrl', '$q', '$timeout', function (UploadDataUrl, $q, $timeout) {
	var upload = UploadDataUrl;

	function globStringToRegex(str) {
		var regexp = '', excludes = [];
		if (str.length > 2 && str[0] === '/' && str[str.length - 1] === '/') {
			regexp = str.substring(1, str.length - 1);
		} else {
			var split = str.split(',');
			if (split.length > 1) {
				for (var i = 0; i < split.length; i++) {
					var r = globStringToRegex(split[i]);
					if (r.regexp) {
						regexp += '(' + r.regexp + ')';
						if (i < split.length - 1) {
							regexp += '|';
						}
					} else {
						excludes = excludes.concat(r.excludes);
					}
				}
			} else {
				if (str.indexOf('!') === 0) {
					excludes.push('^((?!' + globStringToRegex(str.substring(1)).regexp + ').)*$');
				} else {
					if (str.indexOf('.') === 0) {
						str = '*' + str;
					}
					regexp = '^' + str.replace(new RegExp('[.\\\\+*?\\[\\^\\]$(){}=!<>|:\\-]', 'g'), '\\$&') + '$';
					regexp = regexp.replace(/\\\*/g, '.*').replace(/\\\?/g, '.');
				}
			}
		}
		return { regexp: regexp, excludes: excludes };
	}

	upload.validatePattern = function (file, val) {
		if (!val) {
			return true;
		}
		var pattern = globStringToRegex(val), valid = true;
		if (pattern.regexp && pattern.regexp.length) {
			var regexp = new RegExp(pattern.regexp, 'i');
			valid = (file.type != null && regexp.test(file.type)) ||
			  (file.name != null && regexp.test(file.name));
		}
		var len = pattern.excludes.length;
		while (len--) {
			var exclude = new RegExp(pattern.excludes[len], 'i');
			valid = valid && (file.type == null || exclude.test(file.type)) &&
			  (file.name == null || exclude.test(file.name));
		}
		return valid;
	};

	upload.ratioToFloat = function (val) {
		var r = val.toString(), xIndex = r.search(/[x:]/i);
		if (xIndex > -1) {
			r = parseFloat(r.substring(0, xIndex)) / parseFloat(r.substring(xIndex + 1));
		} else {
			r = parseFloat(r);
		}
		return r;
	};

	upload.registerModelChangeValidator = function (ngModel, attr, scope) {
		if (ngModel) {
			ngModel.$formatters.push(function (files) {
				if (ngModel.$dirty) {
					var filesArray = files;
					if (files && !angular.isArray(files)) {
						filesArray = [files];
					}
					upload.validate(filesArray, 0, ngModel, attr, scope).then(function () {
						upload.applyModelValidation(ngModel, filesArray);
					});
				}
				return files;
			});
		}
	};

	function markModelAsDirty(ngModel, files) {
		if (files != null && !ngModel.$dirty) {
			if (ngModel.$setDirty) {
				ngModel.$setDirty();
			} else {
				ngModel.$dirty = true;
			}
		}
	}

	upload.applyModelValidation = function (ngModel, files) {
		markModelAsDirty(ngModel, files);
		angular.forEach(ngModel.$ngfValidations, function (validation) {
			ngModel.$setValidity(validation.name, validation.valid);
		});
	};

	upload.getValidationAttr = function (attr, scope, name, validationName, file) {
		var dName = 'ngf' + name[0].toUpperCase() + name.substr(1);
		var val = upload.attrGetter(dName, attr, scope, { $file: file });
		if (val == null) {
			val = upload.attrGetter('ngfValidate', attr, scope, { $file: file });
			if (val) {
				var split = (validationName || name).split('.');
				val = val[split[0]];
				if (split.length > 1) {
					val = val && val[split[1]];
				}
			}
		}
		return val;
	};

	upload.validate = function (files, prevLength, ngModel, attr, scope) {
		ngModel = ngModel || {};
		ngModel.$ngfValidations = ngModel.$ngfValidations || [];

		angular.forEach(ngModel.$ngfValidations, function (v) {
			v.valid = true;
		});

		var attrGetter = function (name, params) {
			return upload.attrGetter(name, attr, scope, params);
		};

		var ignoredErrors = (upload.attrGetter('ngfIgnoreInvalid', attr, scope) || '').split(' ');
		var runAllValidation = upload.attrGetter('ngfRunAllValidations', attr, scope);

		if (files == null || files.length === 0) {
			return upload.emptyPromise({ 'validFiles': files, 'invalidFiles': [] });
		}

		files = files.length === undefined ? [files] : files.slice(0);
		var invalidFiles = [];

		function validateSync(name, validationName, fn) {
			if (files) {
				var i = files.length, valid = null;
				while (i--) {
					var file = files[i];
					if (file) {
						var val = upload.getValidationAttr(attr, scope, name, validationName, file);
						if (val != null) {
							if (!fn(file, val, i)) {
								if (ignoredErrors.indexOf(name) === -1) {
									file.$error = name;
									(file.$errorMessages = (file.$errorMessages || {}))[name] = true;
									file.$errorParam = val;
									if (invalidFiles.indexOf(file) === -1) {
										invalidFiles.push(file);
									}
									if (!runAllValidation) {
										files.splice(i, 1);
									}
									valid = false;
								} else {
									files.splice(i, 1);
								}
							}
						}
					}
				}
				if (valid !== null) {
					ngModel.$ngfValidations.push({ name: name, valid: valid });
				}
			}
		}

		validateSync('pattern', null, upload.validatePattern);
		validateSync('minSize', 'size.min', function (file, val) {
			return file.size + 0.1 >= upload.translateScalars(val);
		});
		validateSync('maxSize', 'size.max', function (file, val) {
			return file.size - 0.1 <= upload.translateScalars(val);
		});
		var totalSize = 0;
		validateSync('maxTotalSize', null, function (file, val) {
			totalSize += file.size;
			if (totalSize > upload.translateScalars(val)) {
				files.splice(0, files.length);
				return false;
			}
			return true;
		});

		validateSync('validateFn', null, function (file, r) {
			return r === true || r === null || r === '';
		});

		if (!files.length) {
			return upload.emptyPromise({ 'validFiles': [], 'invalidFiles': invalidFiles });
		}

		function validateAsync(name, validationName, type, asyncFn, fn) {
			function resolveResult(defer, file, val) {
				function resolveInternal(fn) {
					if (fn()) {
						if (ignoredErrors.indexOf(name) === -1) {
							file.$error = name;
							(file.$errorMessages = (file.$errorMessages || {}))[name] = true;
							file.$errorParam = val;
							if (invalidFiles.indexOf(file) === -1) {
								invalidFiles.push(file);
							}
							if (!runAllValidation) {
								var i = files.indexOf(file);
								if (i > -1) files.splice(i, 1);
							}
							defer.resolve(false);
						} else {
							var j = files.indexOf(file);
							if (j > -1) files.splice(j, 1);
							defer.resolve(true);
						}
					} else {
						defer.resolve(true);
					}
				}

				if (val != null) {
					asyncFn(file, val).then(function (d) {
						resolveInternal(function () {
							return !fn(d, val);
						});
					}, function () {
						resolveInternal(function () {
							return attrGetter('ngfValidateForce', { $file: file });
						});
					});
				} else {
					defer.resolve(true);
				}
			}

			var promises = [upload.emptyPromise(true)];
			if (files) {
				files = files.length === undefined ? [files] : files;
				angular.forEach(files, function (file) {
					var defer = $q.defer();
					promises.push(defer.promise);
					if (type && (file.type == null || file.type.search(type) !== 0)) {
						defer.resolve(true);
						return;
					}
					if (name === 'dimensions' && upload.attrGetter('ngfDimensions', attr) != null) {
						upload.imageDimensions(file).then(function (d) {
							resolveResult(defer, file,
							  attrGetter('ngfDimensions', { $file: file, $width: d.width, $height: d.height }));
						}, function () {
							defer.resolve(false);
						});
					} else if (name === 'duration' && upload.attrGetter('ngfDuration', attr) != null) {
						upload.mediaDuration(file).then(function (d) {
							resolveResult(defer, file,
							  attrGetter('ngfDuration', { $file: file, $duration: d }));
						}, function () {
							defer.resolve(false);
						});
					} else {
						resolveResult(defer, file,
						  upload.getValidationAttr(attr, scope, name, validationName, file));
					}
				});
			}
			var deffer = $q.defer();
			$q.all(promises).then(function (values) {
				var isValid = true;
				for (var i = 0; i < values.length; i++) {
					if (!values[i]) {
						isValid = false;
						break;
					}
				}
				ngModel.$ngfValidations.push({ name: name, valid: isValid });
				deffer.resolve(isValid);
			});
			return deffer.promise;
		}

		var deffer = $q.defer();
		var promises = [];

		promises.push(validateAsync('maxHeight', 'height.max', /image/,
		  this.imageDimensions, function (d, val) {
		  	return d.height <= val;
		  }));
		promises.push(validateAsync('minHeight', 'height.min', /image/,
		  this.imageDimensions, function (d, val) {
		  	return d.height >= val;
		  }));
		promises.push(validateAsync('maxWidth', 'width.max', /image/,
		  this.imageDimensions, function (d, val) {
		  	return d.width <= val;
		  }));
		promises.push(validateAsync('minWidth', 'width.min', /image/,
		  this.imageDimensions, function (d, val) {
		  	return d.width >= val;
		  }));
		promises.push(validateAsync('dimensions', null, /image/,
		  function (file, val) {
		  	return upload.emptyPromise(val);
		  }, function (r) {
		  	return r;
		  }));
		promises.push(validateAsync('ratio', null, /image/,
		  this.imageDimensions, function (d, val) {
		  	var split = val.toString().split(','), valid = false;
		  	for (var i = 0; i < split.length; i++) {
		  		if (Math.abs((d.width / d.height) - upload.ratioToFloat(split[i])) < 0.01) {
		  			valid = true;
		  		}
		  	}
		  	return valid;
		  }));
		promises.push(validateAsync('maxRatio', 'ratio.max', /image/,
		  this.imageDimensions, function (d, val) {
		  	return (d.width / d.height) - upload.ratioToFloat(val) < 0.0001;
		  }));
		promises.push(validateAsync('minRatio', 'ratio.min', /image/,
		  this.imageDimensions, function (d, val) {
		  	return (d.width / d.height) - upload.ratioToFloat(val) > -0.0001;
		  }));
		promises.push(validateAsync('maxDuration', 'duration.max', /audio|video/,
		  this.mediaDuration, function (d, val) {
		  	return d <= upload.translateScalars(val);
		  }));
		promises.push(validateAsync('minDuration', 'duration.min', /audio|video/,
		  this.mediaDuration, function (d, val) {
		  	return d >= upload.translateScalars(val);
		  }));
		promises.push(validateAsync('duration', null, /audio|video/,
		  function (file, val) {
		  	return upload.emptyPromise(val);
		  }, function (r) {
		  	return r;
		  }));

		promises.push(validateAsync('validateAsyncFn', null, null,
		  function (file, val) {
		  	return val;
		  }, function (r) {
		  	return r === true || r === null || r === '';
		  }));

		$q.all(promises).then(function () {

			if (runAllValidation) {
				for (var i = 0; i < files.length; i++) {
					var file = files[i];
					if (file.$error) {
						files.splice(i--, 1);
					}
				}
			}

			runAllValidation = false;
			validateSync('maxFiles', null, function (file, val, i) {
				return prevLength + i < val;
			});

			deffer.resolve({ 'validFiles': files, 'invalidFiles': invalidFiles });
		});
		return deffer.promise;
	};

	upload.imageDimensions = function (file) {
		if (file.$ngfWidth && file.$ngfHeight) {
			var d = $q.defer();
			$timeout(function () {
				d.resolve({ width: file.$ngfWidth, height: file.$ngfHeight });
			});
			return d.promise;
		}
		if (file.$ngfDimensionPromise) return file.$ngfDimensionPromise;

		var deferred = $q.defer();
		$timeout(function () {
			if (file.type.indexOf('image') !== 0) {
				deferred.reject('not image');
				return;
			}
			upload.dataUrl(file).then(function (dataUrl) {
				var img = angular.element('<img>').attr('src', dataUrl)
				  .css('visibility', 'hidden').css('position', 'fixed')
				  .css('max-width', 'none !important').css('max-height', 'none !important');

				function success() {
					var width = img[0].naturalWidth || img[0].clientWidth;
					var height = img[0].naturalHeight || img[0].clientHeight;
					img.remove();
					file.$ngfWidth = width;
					file.$ngfHeight = height;
					deferred.resolve({ width: width, height: height });
				}

				function error() {
					img.remove();
					deferred.reject('load error');
				}

				img.on('load', success);
				img.on('error', error);

				var secondsCounter = 0;
				function checkLoadErrorInCaseOfNoCallback() {
					$timeout(function () {
						if (img[0].parentNode) {
							if (img[0].clientWidth) {
								success();
							} else if (secondsCounter++ > 10) {
								error();
							} else {
								checkLoadErrorInCaseOfNoCallback();
							}
						}
					}, 1000);
				}

				checkLoadErrorInCaseOfNoCallback();

				angular.element(document.getElementsByTagName('body')[0]).append(img);
			}, function () {
				deferred.reject('load error');
			});
		});

		file.$ngfDimensionPromise = deferred.promise;
		file.$ngfDimensionPromise['finally'](function () {
			delete file.$ngfDimensionPromise;
		});
		return file.$ngfDimensionPromise;
	};

	upload.mediaDuration = function (file) {
		if (file.$ngfDuration) {
			var d = $q.defer();
			$timeout(function () {
				d.resolve(file.$ngfDuration);
			});
			return d.promise;
		}
		if (file.$ngfDurationPromise) return file.$ngfDurationPromise;

		var deferred = $q.defer();
		$timeout(function () {
			if (file.type.indexOf('audio') !== 0 && file.type.indexOf('video') !== 0) {
				deferred.reject('not media');
				return;
			}
			upload.dataUrl(file).then(function (dataUrl) {
				var el = angular.element(file.type.indexOf('audio') === 0 ? '<audio>' : '<video>')
				  .attr('src', dataUrl).css('visibility', 'none').css('position', 'fixed');

				function success() {
					var duration = el[0].duration;
					file.$ngfDuration = duration;
					el.remove();
					deferred.resolve(duration);
				}

				function error() {
					el.remove();
					deferred.reject('load error');
				}

				el.on('loadedmetadata', success);
				el.on('error', error);
				var count = 0;

				function checkLoadError() {
					$timeout(function () {
						if (el[0].parentNode) {
							if (el[0].duration) {
								success();
							} else if (count > 10) {
								error();
							} else {
								checkLoadError();
							}
						}
					}, 1000);
				}

				checkLoadError();

				angular.element(document.body).append(el);
			}, function () {
				deferred.reject('load error');
			});
		});

		file.$ngfDurationPromise = deferred.promise;
		file.$ngfDurationPromise['finally'](function () {
			delete file.$ngfDurationPromise;
		});
		return file.$ngfDurationPromise;
	};
	return upload;
}
]);

ngFileUpload.service('UploadResize', ['UploadValidate', '$q', function (UploadValidate, $q) {
	var upload = UploadValidate;

	/**
	 * Conserve aspect ratio of the original region. Useful when shrinking/enlarging
	 * images to fit into a certain area.
	 * Source:  http://stackoverflow.com/a/14731922
	 *
	 * @param {Number} srcWidth Source area width
	 * @param {Number} srcHeight Source area height
	 * @param {Number} maxWidth Nestable area maximum available width
	 * @param {Number} maxHeight Nestable area maximum available height
	 * @return {Object} { width, height }
	 */
	var calculateAspectRatioFit = function (srcWidth, srcHeight, maxWidth, maxHeight, centerCrop) {
		var ratio = centerCrop ? Math.max(maxWidth / srcWidth, maxHeight / srcHeight) :
		  Math.min(maxWidth / srcWidth, maxHeight / srcHeight);
		return {
			width: srcWidth * ratio, height: srcHeight * ratio,
			marginX: srcWidth * ratio - maxWidth, marginY: srcHeight * ratio - maxHeight
		};
	};

	// Extracted from https://github.com/romelgomez/angular-firebase-image-upload/blob/master/app/scripts/fileUpload.js#L89
	var resize = function (imagen, width, height, quality, type, ratio, centerCrop, resizeIf) {
		var deferred = $q.defer();
		var canvasElement = document.createElement('canvas');
		var imageElement = document.createElement('img');
		imageElement.setAttribute('style', 'visibility:hidden;position:fixed;z-index:-100000');
		document.body.appendChild(imageElement);

		imageElement.onload = function () {
			var imgWidth = imageElement.width, imgHeight = imageElement.height;
			imageElement.parentNode.removeChild(imageElement);
			if (resizeIf != null && resizeIf(imgWidth, imgHeight) === false) {
				deferred.reject('resizeIf');
				return;
			}
			try {
				if (ratio) {
					var ratioFloat = upload.ratioToFloat(ratio);
					var imgRatio = imgWidth / imgHeight;
					if (imgRatio < ratioFloat) {
						width = imgWidth;
						height = width / ratioFloat;
					} else {
						height = imgHeight;
						width = height * ratioFloat;
					}
				}
				if (!width) {
					width = imgWidth;
				}
				if (!height) {
					height = imgHeight;
				}
				var dimensions = calculateAspectRatioFit(imgWidth, imgHeight, width, height, centerCrop);
				canvasElement.width = Math.min(dimensions.width, width);
				canvasElement.height = Math.min(dimensions.height, height);
				var context = canvasElement.getContext('2d');
				context.drawImage(imageElement,
				  Math.min(0, -dimensions.marginX / 2), Math.min(0, -dimensions.marginY / 2),
				  dimensions.width, dimensions.height);
				deferred.resolve(canvasElement.toDataURL(type || 'image/WebP', quality || 0.934));
			} catch (e) {
				deferred.reject(e);
			}
		};
		imageElement.onerror = function () {
			imageElement.parentNode.removeChild(imageElement);
			deferred.reject();
		};
		imageElement.src = imagen;
		return deferred.promise;
	};

	upload.dataUrltoBlob = function (dataurl, name, origSize) {
		var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],
		  bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);
		while (n--) {
			u8arr[n] = bstr.charCodeAt(n);
		}
		var blob = new window.Blob([u8arr], { type: mime });
		blob.name = name;
		blob.$ngfOrigSize = origSize;
		return blob;
	};

	upload.isResizeSupported = function () {
		var elem = document.createElement('canvas');
		return window.atob && elem.getContext && elem.getContext('2d') && window.Blob;
	};

	if (upload.isResizeSupported()) {
		// add name getter to the blob constructor prototype
		Object.defineProperty(window.Blob.prototype, 'name', {
			get: function () {
				return this.$ngfName;
			},
			set: function (v) {
				this.$ngfName = v;
			},
			configurable: true
		});
	}

	upload.resize = function (file, options) {
		if (file.type.indexOf('image') !== 0) return upload.emptyPromise(file);

		var deferred = $q.defer();
		upload.dataUrl(file, true).then(function (url) {
			resize(url, options.width, options.height, options.quality, options.type || file.type,
			  options.ratio, options.centerCrop, options.resizeIf)
			  .then(function (dataUrl) {
			  	if (file.type === 'image/jpeg' && options.restoreExif !== false) {
			  		try {
			  			dataUrl = upload.restoreExif(url, dataUrl);
			  		} catch (e) {
			  			setTimeout(function () { throw e; }, 1);
			  		}
			  	}
			  	try {
			  		var blob = upload.dataUrltoBlob(dataUrl, file.name, file.size);
			  		deferred.resolve(blob);
			  	} catch (e) {
			  		deferred.reject(e);
			  	}
			  }, function (r) {
			  	if (r === 'resizeIf') {
			  		deferred.resolve(file);
			  	}
			  	deferred.reject(r);
			  });
		}, function (e) {
			deferred.reject(e);
		});
		return deferred.promise;
	};

	return upload;
}]);

(function () {
	ngFileUpload.directive('ngfDrop', ['$parse', '$timeout', '$window', 'Upload', '$http', '$q',
	  function ($parse, $timeout, $window, Upload, $http, $q) {
	  	return {
	  		restrict: 'AEC',
	  		require: '?ngModel',
	  		link: function (scope, elem, attr, ngModel) {
	  			linkDrop(scope, elem, attr, ngModel, $parse, $timeout, $window, Upload, $http, $q);
	  		}
	  	};
	  }]);

	ngFileUpload.directive('ngfNoFileDrop', function () {
		return function (scope, elem) {
			if (dropAvailable()) elem.css('display', 'none');
		};
	});

	ngFileUpload.directive('ngfDropAvailable', ['$parse', '$timeout', 'Upload', function ($parse, $timeout, Upload) {
		return function (scope, elem, attr) {
			if (dropAvailable()) {
				var model = $parse(Upload.attrGetter('ngfDropAvailable', attr));
				$timeout(function () {
					model(scope);
					if (model.assign) {
						model.assign(scope, true);
					}
				});
			}
		};
	}]);

	function linkDrop(scope, elem, attr, ngModel, $parse, $timeout, $window, upload, $http, $q) {
		var available = dropAvailable();

		var attrGetter = function (name, scope, params) {
			return upload.attrGetter(name, attr, scope, params);
		};

		if (attrGetter('dropAvailable')) {
			$timeout(function () {
				if (scope[attrGetter('dropAvailable')]) {
					scope[attrGetter('dropAvailable')].value = available;
				} else {
					scope[attrGetter('dropAvailable')] = available;
				}
			});
		}
		if (!available) {
			if (attrGetter('ngfHideOnDropNotAvailable', scope) === true) {
				elem.css('display', 'none');
			}
			return;
		}

		function isDisabled() {
			return elem.attr('disabled') || attrGetter('ngfDropDisabled', scope);
		}

		if (attrGetter('ngfSelect') == null) {
			upload.registerModelChangeValidator(ngModel, attr, scope);
		}

		var leaveTimeout = null;
		var stopPropagation = $parse(attrGetter('ngfStopPropagation'));
		var dragOverDelay = 1;
		var actualDragOverClass;

		elem[0].addEventListener('dragover', function (evt) {
			if (isDisabled() || !upload.shouldUpdateOn('drop', attr, scope)) return;
			evt.preventDefault();
			if (stopPropagation(scope)) evt.stopPropagation();
			// handling dragover events from the Chrome download bar
			if (navigator.userAgent.indexOf('Chrome') > -1) {
				var b = evt.dataTransfer.effectAllowed;
				evt.dataTransfer.dropEffect = ('move' === b || 'linkMove' === b) ? 'move' : 'copy';
			}
			$timeout.cancel(leaveTimeout);
			if (!actualDragOverClass) {
				actualDragOverClass = 'C';
				calculateDragOverClass(scope, attr, evt, function (clazz) {
					actualDragOverClass = clazz;
					elem.addClass(actualDragOverClass);
					attrGetter('ngfDrag', scope, { $isDragging: true, $class: actualDragOverClass, $event: evt });
				});
			}
		}, false);
		elem[0].addEventListener('dragenter', function (evt) {
			if (isDisabled() || !upload.shouldUpdateOn('drop', attr, scope)) return;
			evt.preventDefault();
			if (stopPropagation(scope)) evt.stopPropagation();
		}, false);
		elem[0].addEventListener('dragleave', function (evt) {
			if (isDisabled() || !upload.shouldUpdateOn('drop', attr, scope)) return;
			evt.preventDefault();
			if (stopPropagation(scope)) evt.stopPropagation();
			leaveTimeout = $timeout(function () {
				if (actualDragOverClass) elem.removeClass(actualDragOverClass);
				actualDragOverClass = null;
				attrGetter('ngfDrag', scope, { $isDragging: false, $event: evt });
			}, dragOverDelay || 100);
		}, false);
		elem[0].addEventListener('drop', function (evt) {
			if (isDisabled() || !upload.shouldUpdateOn('drop', attr, scope)) return;
			evt.preventDefault();
			if (stopPropagation(scope)) evt.stopPropagation();
			if (actualDragOverClass) elem.removeClass(actualDragOverClass);
			actualDragOverClass = null;
			extractFilesAndUpdateModel(evt.dataTransfer, evt, 'dropUrl');
		}, false);
		elem[0].addEventListener('paste', function (evt) {
			if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1 &&
			  attrGetter('ngfEnableFirefoxPaste', scope)) {
				evt.preventDefault();
			}
			if (isDisabled() || !upload.shouldUpdateOn('paste', attr, scope)) return;
			extractFilesAndUpdateModel(evt.clipboardData || evt.originalEvent.clipboardData, evt, 'pasteUrl');
		}, false);

		if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1 &&
		  attrGetter('ngfEnableFirefoxPaste', scope)) {
			elem.attr('contenteditable', true);
			elem.on('keypress', function (e) {
				if (!e.metaKey && !e.ctrlKey) {
					e.preventDefault();
				}
			});
		}

		function extractFilesAndUpdateModel(source, evt, updateOnType) {
			if (!source) return;
			// html needs to be calculated on the same process otherwise the data will be wiped
			// after promise resolve or setTimeout.
			var html;
			try {
				html = source && source.getData && source.getData('text/html');
			} catch (e) {/* Fix IE11 that throw error calling getData */
			}
			extractFiles(source.items, source.files, attrGetter('ngfAllowDir', scope) !== false,
			  attrGetter('multiple') || attrGetter('ngfMultiple', scope)).then(function (files) {
			  	if (files.length) {
			  		updateModel(files, evt);
			  	} else {
			  		extractFilesFromHtml(updateOnType, html).then(function (files) {
			  			updateModel(files, evt);
			  		});
			  	}
			  });
		}

		function updateModel(files, evt) {
			upload.updateModel(ngModel, attr, scope, attrGetter('ngfChange') || attrGetter('ngfDrop'), files, evt);
		}

		function extractFilesFromHtml(updateOn, html) {
			if (!upload.shouldUpdateOn(updateOn, attr, scope) || typeof html !== 'string') return upload.rejectPromise([]);
			var urls = [];
			html.replace(/<(img src|img [^>]* src) *=\"([^\"]*)\"/gi, function (m, n, src) {
				urls.push(src);
			});
			var promises = [], files = [];
			if (urls.length) {
				angular.forEach(urls, function (url) {
					promises.push(upload.urlToBlob(url).then(function (blob) {
						files.push(blob);
					}));
				});
				var defer = $q.defer();
				$q.all(promises).then(function () {
					defer.resolve(files);
				}, function (e) {
					defer.reject(e);
				});
				return defer.promise;
			}
			return upload.emptyPromise();
		}

		function calculateDragOverClass(scope, attr, evt, callback) {
			var obj = attrGetter('ngfDragOverClass', scope, { $event: evt }), dClass = 'dragover';
			if (angular.isString(obj)) {
				dClass = obj;
			} else if (obj) {
				if (obj.delay) dragOverDelay = obj.delay;
				if (obj.accept || obj.reject) {
					var items = evt.dataTransfer.items;
					if (items == null || !items.length) {
						dClass = obj.accept;
					} else {
						var pattern = obj.pattern || attrGetter('ngfPattern', scope, { $event: evt });
						var len = items.length;
						while (len--) {
							if (!upload.validatePattern(items[len], pattern)) {
								dClass = obj.reject;
								break;
							} else {
								dClass = obj.accept;
							}
						}
					}
				}
			}
			callback(dClass);
		}

		function extractFiles(items, fileList, allowDir, multiple) {
			var maxFiles = upload.getValidationAttr(attr, scope, 'maxFiles');
			if (maxFiles == null) {
				maxFiles = Number.MAX_VALUE;
			}
			var maxTotalSize = upload.getValidationAttr(attr, scope, 'maxTotalSize');
			if (maxTotalSize == null) {
				maxTotalSize = Number.MAX_VALUE;
			}
			var includeDir = attrGetter('ngfIncludeDir', scope);
			var files = [], totalSize = 0;

			function traverseFileTree(entry, path) {
				var defer = $q.defer();
				if (entry != null) {
					if (entry.isDirectory) {
						var promises = [upload.emptyPromise()];
						if (includeDir) {
							var file = { type: 'directory' };
							file.name = file.path = (path || '') + entry.name;
							files.push(file);
						}
						var dirReader = entry.createReader();
						var entries = [];
						var readEntries = function () {
							dirReader.readEntries(function (results) {
								try {
									if (!results.length) {
										angular.forEach(entries.slice(0), function (e) {
											if (files.length <= maxFiles && totalSize <= maxTotalSize) {
												promises.push(traverseFileTree(e, (path ? path : '') + entry.name + '/'));
											}
										});
										$q.all(promises).then(function () {
											defer.resolve();
										}, function (e) {
											defer.reject(e);
										});
									} else {
										entries = entries.concat(Array.prototype.slice.call(results || [], 0));
										readEntries();
									}
								} catch (e) {
									defer.reject(e);
								}
							}, function (e) {
								defer.reject(e);
							});
						};
						readEntries();
					} else {
						entry.file(function (file) {
							try {
								file.path = (path ? path : '') + file.name;
								if (includeDir) {
									file = upload.rename(file, file.path);
								}
								files.push(file);
								totalSize += file.size;
								defer.resolve();
							} catch (e) {
								defer.reject(e);
							}
						}, function (e) {
							defer.reject(e);
						});
					}
				}
				return defer.promise;
			}

			var promises = [upload.emptyPromise()];

			if (items && items.length > 0 && $window.location.protocol !== 'file:') {
				for (var i = 0; i < items.length; i++) {
					if (items[i].webkitGetAsEntry && items[i].webkitGetAsEntry() && items[i].webkitGetAsEntry().isDirectory) {
						var entry = items[i].webkitGetAsEntry();
						if (entry.isDirectory && !allowDir) {
							continue;
						}
						if (entry != null) {
							promises.push(traverseFileTree(entry));
						}
					} else {
						var f = items[i].getAsFile();
						if (f != null) {
							files.push(f);
							totalSize += f.size;
						}
					}
					if (files.length > maxFiles || totalSize > maxTotalSize ||
					  (!multiple && files.length > 0)) break;
				}
			} else {
				if (fileList != null) {
					for (var j = 0; j < fileList.length; j++) {
						var file = fileList.item(j);
						if (file.type || file.size > 0) {
							files.push(file);
							totalSize += file.size;
						}
						if (files.length > maxFiles || totalSize > maxTotalSize ||
						  (!multiple && files.length > 0)) break;
					}
				}
			}

			var defer = $q.defer();
			$q.all(promises).then(function () {
				if (!multiple && !includeDir && files.length) {
					var i = 0;
					while (files[i] && files[i].type === 'directory') i++;
					defer.resolve([files[i]]);
				} else {
					defer.resolve(files);
				}
			}, function (e) {
				defer.reject(e);
			});

			return defer.promise;
		}
	}

	function dropAvailable() {
		var div = document.createElement('div');
		return ('draggable' in div) && ('ondrop' in div) && !/Edge\/12./i.test(navigator.userAgent);
	}

})();

// customized version of https://github.com/exif-js/exif-js
ngFileUpload.service('UploadExif', ['UploadResize', '$q', function (UploadResize, $q) {
	var upload = UploadResize;

	upload.isExifSupported = function () {
		return window.FileReader && new FileReader().readAsArrayBuffer && upload.isResizeSupported();
	};

	function applyTransform(ctx, orientation, width, height) {
		switch (orientation) {
			case 2:
				return ctx.transform(-1, 0, 0, 1, width, 0);
			case 3:
				return ctx.transform(-1, 0, 0, -1, width, height);
			case 4:
				return ctx.transform(1, 0, 0, -1, 0, height);
			case 5:
				return ctx.transform(0, 1, 1, 0, 0, 0);
			case 6:
				return ctx.transform(0, 1, -1, 0, height, 0);
			case 7:
				return ctx.transform(0, -1, -1, 0, height, width);
			case 8:
				return ctx.transform(0, -1, 1, 0, 0, width);
		}
	}

	upload.readOrientation = function (file) {
		var defer = $q.defer();
		var reader = new FileReader();
		var slicedFile = file.slice ? file.slice(0, 64 * 1024) : file;
		reader.readAsArrayBuffer(slicedFile);
		reader.onerror = function (e) {
			return defer.reject(e);
		};
		reader.onload = function (e) {
			var result = { orientation: 1 };
			var view = new DataView(this.result);
			if (view.getUint16(0, false) !== 0xFFD8) return defer.resolve(result);

			var length = view.byteLength,
			  offset = 2;
			while (offset < length) {
				var marker = view.getUint16(offset, false);
				offset += 2;
				if (marker === 0xFFE1) {
					if (view.getUint32(offset += 2, false) !== 0x45786966) return defer.resolve(result);

					var little = view.getUint16(offset += 6, false) === 0x4949;
					offset += view.getUint32(offset + 4, little);
					var tags = view.getUint16(offset, little);
					offset += 2;
					for (var i = 0; i < tags; i++)
						if (view.getUint16(offset + (i * 12), little) === 0x0112) {
							var orientation = view.getUint16(offset + (i * 12) + 8, little);
							if (orientation >= 2 && orientation <= 8) {
								view.setUint16(offset + (i * 12) + 8, 1, little);
								result.fixedArrayBuffer = e.target.result;
							}
							result.orientation = orientation;
							return defer.resolve(result);
						}
				} else if ((marker & 0xFF00) !== 0xFF00) break;
				else offset += view.getUint16(offset, false);
			}
			return defer.resolve(result);
		};
		return defer.promise;
	};

	function arrayBufferToBase64(buffer) {
		var binary = '';
		var bytes = new Uint8Array(buffer);
		var len = bytes.byteLength;
		for (var i = 0; i < len; i++) {
			binary += String.fromCharCode(bytes[i]);
		}
		return window.btoa(binary);
	}

	upload.applyExifRotation = function (file) {
		if (file.type.indexOf('image/jpeg') !== 0) {
			return upload.emptyPromise(file);
		}

		var deferred = $q.defer();
		upload.readOrientation(file).then(function (result) {
			if (result.orientation < 2 || result.orientation > 8) {
				return deferred.resolve(file);
			}
			upload.dataUrl(file, true).then(function (url) {
				var canvas = document.createElement('canvas');
				var img = document.createElement('img');

				img.onload = function () {
					try {
						canvas.width = result.orientation > 4 ? img.height : img.width;
						canvas.height = result.orientation > 4 ? img.width : img.height;
						var ctx = canvas.getContext('2d');
						applyTransform(ctx, result.orientation, img.width, img.height);
						ctx.drawImage(img, 0, 0);
						var dataUrl = canvas.toDataURL(file.type || 'image/WebP', 0.934);
						dataUrl = upload.restoreExif(arrayBufferToBase64(result.fixedArrayBuffer), dataUrl);
						var blob = upload.dataUrltoBlob(dataUrl, file.name);
						deferred.resolve(blob);
					} catch (e) {
						return deferred.reject(e);
					}
				};
				img.onerror = function () {
					deferred.reject();
				};
				img.src = url;
			}, function (e) {
				deferred.reject(e);
			});
		}, function (e) {
			deferred.reject(e);
		});
		return deferred.promise;
	};

	upload.restoreExif = function (orig, resized) {
		var ExifRestorer = {};

		ExifRestorer.KEY_STR = 'ABCDEFGHIJKLMNOP' +
		  'QRSTUVWXYZabcdef' +
		  'ghijklmnopqrstuv' +
		  'wxyz0123456789+/' +
		  '=';

		ExifRestorer.encode64 = function (input) {
			var output = '',
			  chr1, chr2, chr3 = '',
			  enc1, enc2, enc3, enc4 = '',
			  i = 0;

			do {
				chr1 = input[i++];
				chr2 = input[i++];
				chr3 = input[i++];

				enc1 = chr1 >> 2;
				enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
				enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
				enc4 = chr3 & 63;

				if (isNaN(chr2)) {
					enc3 = enc4 = 64;
				} else if (isNaN(chr3)) {
					enc4 = 64;
				}

				output = output +
				  this.KEY_STR.charAt(enc1) +
				  this.KEY_STR.charAt(enc2) +
				  this.KEY_STR.charAt(enc3) +
				  this.KEY_STR.charAt(enc4);
				chr1 = chr2 = chr3 = '';
				enc1 = enc2 = enc3 = enc4 = '';
			} while (i < input.length);

			return output;
		};

		ExifRestorer.restore = function (origFileBase64, resizedFileBase64) {
			if (origFileBase64.match('data:image/jpeg;base64,')) {
				origFileBase64 = origFileBase64.replace('data:image/jpeg;base64,', '');
			}

			var rawImage = this.decode64(origFileBase64);
			var segments = this.slice2Segments(rawImage);

			var image = this.exifManipulation(resizedFileBase64, segments);

			return 'data:image/jpeg;base64,' + this.encode64(image);
		};


		ExifRestorer.exifManipulation = function (resizedFileBase64, segments) {
			var exifArray = this.getExifArray(segments),
			  newImageArray = this.insertExif(resizedFileBase64, exifArray);
			return new Uint8Array(newImageArray);
		};


		ExifRestorer.getExifArray = function (segments) {
			var seg;
			for (var x = 0; x < segments.length; x++) {
				seg = segments[x];
				if (seg[0] === 255 & seg[1] === 225) //(ff e1)
				{
					return seg;
				}
			}
			return [];
		};


		ExifRestorer.insertExif = function (resizedFileBase64, exifArray) {
			var imageData = resizedFileBase64.replace('data:image/jpeg;base64,', ''),
			  buf = this.decode64(imageData),
			  separatePoint = buf.indexOf(255, 3),
			  mae = buf.slice(0, separatePoint),
			  ato = buf.slice(separatePoint),
			  array = mae;

			array = array.concat(exifArray);
			array = array.concat(ato);
			return array;
		};


		ExifRestorer.slice2Segments = function (rawImageArray) {
			var head = 0,
			  segments = [];

			while (1) {
				if (rawImageArray[head] === 255 & rawImageArray[head + 1] === 218) {
					break;
				}
				if (rawImageArray[head] === 255 & rawImageArray[head + 1] === 216) {
					head += 2;
				}
				else {
					var length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3],
					  endPoint = head + length + 2,
					  seg = rawImageArray.slice(head, endPoint);
					segments.push(seg);
					head = endPoint;
				}
				if (head > rawImageArray.length) {
					break;
				}
			}

			return segments;
		};


		ExifRestorer.decode64 = function (input) {
			var chr1, chr2, chr3 = '',
			  enc1, enc2, enc3, enc4 = '',
			  i = 0,
			  buf = [];

			// remove all characters that are not A-Z, a-z, 0-9, +, /, or =
			var base64test = /[^A-Za-z0-9\+\/\=]/g;
			if (base64test.exec(input)) {
				console.log('There were invalid base64 characters in the input text.\n' +
				  'Valid base64 characters are A-Z, a-z, 0-9, ' + ', ' / ',and "="\n' +
				  'Expect errors in decoding.');
			}
			input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');

			do {
				enc1 = this.KEY_STR.indexOf(input.charAt(i++));
				enc2 = this.KEY_STR.indexOf(input.charAt(i++));
				enc3 = this.KEY_STR.indexOf(input.charAt(i++));
				enc4 = this.KEY_STR.indexOf(input.charAt(i++));

				chr1 = (enc1 << 2) | (enc2 >> 4);
				chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
				chr3 = ((enc3 & 3) << 6) | enc4;

				buf.push(chr1);

				if (enc3 !== 64) {
					buf.push(chr2);
				}
				if (enc4 !== 64) {
					buf.push(chr3);
				}

				chr1 = chr2 = chr3 = '';
				enc1 = enc2 = enc3 = enc4 = '';

			} while (i < input.length);

			return buf;
		};

		return ExifRestorer.restore(orig, resized);  //<= EXIF
	};

	return upload;
}]);


/**
 * Angular Google Analytics - Easy tracking for your AngularJS application
 * @version v1.1.7 - 2016-03-25
 * @link http://github.com/revolunet/angular-google-analytics
 * @author Julien Bouquillon <julien@revolunet.com> (https://github.com/revolunet)
 * @contributors Julien Bouquillon (https://github.com/revolunet),Justin Saunders (https://github.com/justinsa),Chris Esplin (https://github.com/deltaepsilon),Adam Misiorny (https://github.com/adam187)
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
/* globals define */
(function (root, factory) {
  'use strict';
  if (typeof define === 'function' && define.amd) {
    define(['angular'], factory);
  } else if (typeof module === 'object' && module.exports) {
    module.exports = factory(require('angular'));
  } else {
    factory(root.angular);
  }
}(this, function (angular, undefined) {
  'use strict';
  angular.module('angular-google-analytics', [])
    .provider('Analytics', function () {
      var accounts,
          analyticsJS = true,
          cookieConfig = 'auto', // DEPRECATED
          created = false,
          crossDomainLinker = false,
          crossLinkDomains,
          currency = 'USD',
          debugMode = false,
          delayScriptTag = false,
          displayFeatures = false,
          disableAnalytics = false,
          domainName,
          ecommerce = false,
          enhancedEcommerce = false,
          enhancedLinkAttribution = false,
          experimentId,
          ignoreFirstPageLoad = false,
          logAllCalls = false,
          hybridMobileSupport = false,
          offlineMode = false,
          pageEvent = '$routeChangeSuccess',
          readFromRoute = false,
          removeRegExp,
          testMode = false,
          traceDebuggingMode = false,
          trackPrefix = '',
          trackRoutes = true,
          trackUrlParams = false;

      this.log = [];
      this.offlineQueue = [];

      /**
       * Configuration Methods
       **/

      this.setAccount = function (tracker) {
        if (angular.isUndefined(tracker) || tracker === false) {
          accounts = undefined;
        } else if (angular.isArray(tracker)) {
          accounts = tracker;
        } else if (angular.isObject(tracker)) {
          accounts = [tracker];
        } else {
          // In order to preserve an existing behavior with how the _trackEvent function works,
          // the trackEvent property must be set to true when there is only a single tracker.
          accounts = [{ tracker: tracker, trackEvent: true }];
        }
        return this;
      };

      this.trackPages = function (val) {
        trackRoutes = !!val;
        return this;
      };

      this.trackPrefix = function (prefix) {
        trackPrefix = prefix;
        return this;
      };

      this.setDomainName = function (domain) {
        domainName = domain;
        return this;
      };

      this.useDisplayFeatures = function (val) {
        displayFeatures = !!val;
        return this;
      };

      this.useAnalytics = function (val) {
        analyticsJS = !!val;
        return this;
      };

      this.useEnhancedLinkAttribution = function (val) {
        enhancedLinkAttribution = !!val;
        return this;
      };

      this.useCrossDomainLinker = function (val) {
        crossDomainLinker = !!val;
        return this;
      };

      this.setCrossLinkDomains = function (domains) {
        crossLinkDomains = domains;
        return this;
      };

      this.setPageEvent = function (name) {
        pageEvent = name;
        return this;
      };

      /* DEPRECATED */
      this.setCookieConfig = function (config) {
        cookieConfig = config;
        return this;
      };

      this.useECommerce = function (val, enhanced) {
        ecommerce = !!val;
        enhancedEcommerce = !!enhanced;
        return this;
      };

      this.setCurrency = function (currencyCode) {
        currency = currencyCode;
        return this;
      };

      this.setRemoveRegExp = function (regex) {
        if (regex instanceof RegExp) {
          removeRegExp = regex;
        }
        return this;
      };

      this.setExperimentId = function (id) {
        experimentId = id;
        return this;
      };

      this.ignoreFirstPageLoad = function (val) {
        ignoreFirstPageLoad = !!val;
        return this;
      };

      this.trackUrlParams = function (val) {
        trackUrlParams = !!val;
        return this;
      };

      this.disableAnalytics = function (val) {
        disableAnalytics = !!val;
        return this;
      };

      this.setHybridMobileSupport = function (val) {
        hybridMobileSupport = !!val;
        return this;
      };

      this.startOffline = function (val) {
        offlineMode = !!val;
        if (offlineMode === true) {
          this.delayScriptTag(true);
        }
        return this;
      };

      this.delayScriptTag = function (val) {
        delayScriptTag = !!val;
        return this;
      };

      this.logAllCalls = function (val) {
        logAllCalls = !!val;
        return this;
      };

      this.enterTestMode = function () {
        testMode = true;
        return this;
      };

      this.enterDebugMode = function (enableTraceDebugging) {
        debugMode = true;
        traceDebuggingMode = !!enableTraceDebugging;
        return this;
      };
      
      // Enable reading page url from route object
      this.readFromRoute = function(val) {
        readFromRoute = !!val;
        return this;
      };

      /**
       * Public Service
       */
      this.$get = ['$document', // To read title 
                   '$location', // 
                   '$log',      //
                   '$rootScope',// 
                   '$window',   //
                   '$injector', // To access ngRoute module without declaring a fixed dependency
                   function ($document, $location, $log, $rootScope, $window, $injector) {
        var that = this;

        /**
         * Side-effect Free Helper Methods
         **/

        var isPropertyDefined = function (key, config) {
          return angular.isObject(config) && angular.isDefined(config[key]);
        };

        var isPropertySetTo = function (key, config, value) {
          return isPropertyDefined(key, config) && config[key] === value;
        };

        var generateCommandName = function (commandName, config) {
          if (angular.isString(config)) {
            return config + '.' + commandName;
          }
          return isPropertyDefined('name', config) ? (config.name + '.' + commandName) : commandName;
        };
        
        // Try to read route configuration and log warning if not possible
        var $route = {};
        if (readFromRoute) {
          if (!$injector.has('$route')) {
            $log.warn('$route service is not available. Make sure you have included ng-route in your application dependencies.');
          } else {
            $route = $injector.get('$route');
          }
        }

        // Get url for current page 
        var getUrl = function () {
          // Using ngRoute provided tracking urls
          if (readFromRoute && $route.current && ('pageTrack' in $route.current)) {
            return $route.current.pageTrack;
          }
           
          // Otherwise go the old way
          var url = trackUrlParams ? $location.url() : $location.path(); 
          return removeRegExp ? url.replace(removeRegExp, '') : url;
        };

        var getUtmParams = function () {
          var utmToCampaignVar = {
            utm_source: 'campaignSource',
            utm_medium: 'campaignMedium',
            utm_term: 'campaignTerm',
            utm_content: 'campaignContent',
            utm_campaign: 'campaignName'
          };
          var object = {};

          angular.forEach($location.search(), function (value, key) {
            var campaignVar = utmToCampaignVar[key];

            if (angular.isDefined(campaignVar)) {
              object[campaignVar] = value;
            }
          });

          return object;
        };

        /**
         * get ActionFieldObject
         * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#action-data
         * @param id
         * @param affliation
         * @param revenue
         * @param tax
         * @param shipping
         * @param coupon
         * @param list
         * @param step
         * @param option
         */
        var getActionFieldObject = function (id, affiliation, revenue, tax, shipping, coupon, list, step, option) {
          var obj = {};
          if (id) { obj.id = id; }
          if (affiliation) { obj.affiliation = affiliation; }
          if (revenue) { obj.revenue = revenue; }
          if (tax) { obj.tax = tax; }
          if (shipping) { obj.shipping = shipping; }
          if (coupon) { obj.coupon = coupon; }
          if (list) { obj.list = list; }
          if (step) { obj.step = step; }
          if (option) { obj.option = option; }
          return obj;
        };

        /**
         * Private Methods
         */

        var _gaJs = function (fn) {
          if (!analyticsJS && $window._gaq && typeof fn === 'function') {
            fn();
          }
        };

        var _gaq = function () {
          var args = Array.prototype.slice.call(arguments);
          if (offlineMode === true) {
            that.offlineQueue.push([_gaq, args]);
            return;
          }
          if (!$window._gaq) {
            $window._gaq = [];
          }
          if (logAllCalls === true) {
            that._log.apply(that, args);
          }
          $window._gaq.push(args);
        };

        var _analyticsJs = function (fn) {
          if (analyticsJS && $window.ga && typeof fn === 'function') {
            fn();
          }
        };

        var _ga = function () {
          var args = Array.prototype.slice.call(arguments);
          if (offlineMode === true) {
            that.offlineQueue.push([_ga, args]);
            return;
          }
          if (typeof $window.ga !== 'function') {
            that._log('warn', 'ga function not set on window');
            return;
          }
          if (logAllCalls === true) {
            that._log.apply(that, args);
          }
          $window.ga.apply(null, args);
        };

        var _gaMultipleTrackers = function (includeFn) {
          // Drop the includeFn from the arguments and preserve the original command name
          var args = Array.prototype.slice.call(arguments, 1),
              commandName = args[0],
              trackers = [];
          if (typeof includeFn === 'function') {
            accounts.forEach(function (account) {
              if (includeFn(account)) {
                trackers.push(account);
              }
            });
          } else {
            // No include function indicates that all accounts are to be used
            trackers = accounts;
          }

          // To preserve backwards compatibility fallback to _ga method if no account
          // matches the specified includeFn. This preserves existing behaviors by
          // performing the single tracker operation.
          if (trackers.length === 0) {
            _ga.apply(that, args);
            return;
          }

          trackers.forEach(function (tracker) {
            // Check tracker 'select' function, if it exists, for whether the tracker should be used with the current command.
            // If the 'select' function returns false then the tracker will not be used with the current command.
            if (isPropertyDefined('select', tracker) && typeof tracker.select === 'function' && !tracker.select(args)) {
              return;
            }
            args[0] = generateCommandName(commandName, tracker);
            _ga.apply(that, args);
          });
        };

        this._log = function () {
          var args = Array.prototype.slice.call(arguments);
          if (args.length > 0) {
            if (args.length > 1) {
              switch (args[0]) {
                case 'debug':
                case 'error':
                case 'info':
                case 'log':
                case 'warn':
                  $log[args[0]](args.slice(1));
                  break;
              }
            }
            that.log.push(args);
          }
        };

        this._createScriptTag = function () {
          if (!accounts || accounts.length < 1) {
            that._log('warn', 'No account id set to create script tag');
            return;
          }
          if (accounts.length > 1) {
            that._log('warn', 'Multiple trackers are not supported with ga.js. Using first tracker only');
            accounts = accounts.slice(0, 1);
          }

          if (created === true) {
            that._log('warn', 'ga.js or analytics.js script tag already created');
            return;
          }

          if (disableAnalytics === true) {
            that._log('info', 'Analytics disabled: ' + accounts[0].tracker);
            $window['ga-disable-' + accounts[0].tracker] = true;
          }

          _gaq('_setAccount', accounts[0].tracker);
          if(domainName) {
            _gaq('_setDomainName', domainName);
          }
          if (enhancedLinkAttribution) {
            _gaq('_require', 'inpage_linkid', '//www.google-analytics.com/plugins/ga/inpage_linkid.js');
          }
          if (trackRoutes && !ignoreFirstPageLoad) {
            if (removeRegExp) {
              _gaq('_trackPageview', getUrl());
            } else {
              _gaq('_trackPageview');
            }
          }

          var document = $document[0];
          var scriptSource;
          if (displayFeatures === true) {
            scriptSource = ('https:' === document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js';
          } else {
            scriptSource = ('https:' === document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
          }

          if (testMode !== true) {
            // If not in test mode inject the Google Analytics tag
            (function () {
              var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
              ga.src = scriptSource;
              var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
            })();
          } else {
            // Log the source location for validation
            that._log('inject', scriptSource);
          }

          created = true;
          return true;
        };

        this._createAnalyticsScriptTag = function () {
          if (!accounts) {
            that._log('warn', 'No account id set to create analytics script tag');
            return;
          }

          if (created === true) {
            that._log('warn', 'ga.js or analytics.js script tag already created');
            return;
          }

          if (disableAnalytics === true) {
            accounts.forEach(function (trackerObj) {
              that._log('info', 'Analytics disabled: ' + trackerObj.tracker);
              $window['ga-disable-' + trackerObj.tracker] = true;
            });
          }

          var document = $document[0];
          var protocol = hybridMobileSupport === true ? 'https:' : '';
          var scriptSource = protocol + '//www.google-analytics.com/' + (debugMode ? 'analytics_debug.js' : 'analytics.js');
          if (testMode !== true) {
            // If not in test mode inject the Google Analytics tag
            (function (i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function (){
              (i[r].q=i[r].q||[]).push(arguments);},i[r].l=1*new Date();a=s.createElement(o),
              m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m);
            })(window,document,'script',scriptSource,'ga');
          } else {
            if (typeof $window.ga !== 'function') {
              // In test mode create a ga function if none exists that is a noop sink.
              $window.ga = function () {};
            }
            // Log script injection.
            that._log('inject', scriptSource);
          }

          if (traceDebuggingMode) {
            $window.ga_debug = { trace: true };
          }

          accounts.forEach(function (trackerObj) {
            trackerObj.crossDomainLinker = isPropertyDefined('crossDomainLinker', trackerObj) ? trackerObj.crossDomainLinker : crossDomainLinker;
            trackerObj.crossLinkDomains = isPropertyDefined('crossLinkDomains', trackerObj) ? trackerObj.crossLinkDomains : crossLinkDomains;
            trackerObj.displayFeatures = isPropertyDefined('displayFeatures', trackerObj) ? trackerObj.displayFeatures : displayFeatures;
            trackerObj.enhancedLinkAttribution = isPropertyDefined('enhancedLinkAttribution', trackerObj) ? trackerObj.enhancedLinkAttribution : enhancedLinkAttribution;
            trackerObj.set = isPropertyDefined('set', trackerObj) ? trackerObj.set : {};
            trackerObj.trackEcommerce = isPropertyDefined('trackEcommerce', trackerObj) ? trackerObj.trackEcommerce : ecommerce;
            trackerObj.trackEvent = isPropertyDefined('trackEvent', trackerObj) ? trackerObj.trackEvent : false;

            // Logic to choose the account fields to be used.
            // cookieConfig is being deprecated for a tracker specific property: fields.
            var fields = {};
            if (isPropertyDefined('fields', trackerObj)) {
              fields = trackerObj.fields;
            } else if (isPropertyDefined('cookieConfig', trackerObj)) {
              if (angular.isString(trackerObj.cookieConfig)) {
                fields.cookieDomain = trackerObj.cookieConfig;
              } else {
                fields = trackerObj.cookieConfig;
              }
            } else if (angular.isString(cookieConfig)) {
              fields.cookieDomain = cookieConfig;
            } else if (cookieConfig) {
              fields = cookieConfig;
            }
            if (trackerObj.crossDomainLinker === true) {
              fields.allowLinker = true;
            }
            if (isPropertyDefined('name', trackerObj)) {
              fields.name = trackerObj.name;
            }
            trackerObj.fields = fields;

            _ga('create', trackerObj.tracker, trackerObj.fields);

            // Hybrid mobile application support
            // https://developers.google.com/analytics/devguides/collection/analyticsjs/tasks
            if (hybridMobileSupport === true) {
              _ga(generateCommandName('set', trackerObj), 'checkProtocolTask', null);
            }

            // Send all custom set commands from the trackerObj.set property
            for (var key in trackerObj.set) {
              if (trackerObj.set.hasOwnProperty(key)) {
                _ga(generateCommandName('set', trackerObj), key, trackerObj.set[key]);
              }
            }

            if (trackerObj.crossDomainLinker === true) {
              _ga(generateCommandName('require', trackerObj), 'linker');
              if (angular.isDefined(trackerObj.crossLinkDomains)) {
                _ga(generateCommandName('linker:autoLink', trackerObj), trackerObj.crossLinkDomains);
              }
            }

            if (trackerObj.displayFeatures) {
              _ga(generateCommandName('require', trackerObj), 'displayfeatures');
            }

            if (trackerObj.trackEcommerce) {
              if (!enhancedEcommerce) {
                _ga(generateCommandName('require', trackerObj), 'ecommerce');
              } else {
                _ga(generateCommandName('require', trackerObj), 'ec');
                _ga(generateCommandName('set', trackerObj), '&cu', currency);
              }
            }

            if (trackerObj.enhancedLinkAttribution) {
              _ga(generateCommandName('require', trackerObj), 'linkid');
            }

            if (trackRoutes && !ignoreFirstPageLoad) {
              _ga(generateCommandName('send', trackerObj), 'pageview', trackPrefix + getUrl());
            }
          });

          if (experimentId) {
            var expScript = document.createElement('script'),
                s = document.getElementsByTagName('script')[0];
            expScript.src = protocol + '//www.google-analytics.com/cx/api.js?experiment=' + experimentId;
            s.parentNode.insertBefore(expScript, s);
          }

          created = true;
          return true;
        };

        this._ecommerceEnabled = function (warn, command) {
          var result = ecommerce && !enhancedEcommerce;
          if (warn === true && result === false) {
            if (ecommerce && enhancedEcommerce) {
              that._log('warn', command + ' is not available when Enhanced Ecommerce is enabled with analytics.js');
            } else {
              that._log('warn', 'Ecommerce must be enabled to use ' + command + ' with analytics.js');
            }
          }
          return result;
        };

        this._enhancedEcommerceEnabled = function (warn, command) {
          var result = ecommerce && enhancedEcommerce;
          if (warn === true && result === false) {
            that._log('warn', 'Enhanced Ecommerce must be enabled to use ' + command + ' with analytics.js');
          }
          return result;
        };

        /**
         * Track page
         https://developers.google.com/analytics/devguides/collection/gajs/
         https://developers.google.com/analytics/devguides/collection/analyticsjs/pages
         * @param url
         * @param title
         * @param custom
         * @private
         */
        this._trackPage = function (url, title, custom) {
          url = url ? url : getUrl();
          title = title ? title : $document[0].title;
          _gaJs(function () {
            // http://stackoverflow.com/questions/7322288/how-can-i-set-a-page-title-with-google-analytics
            _gaq('_set', 'title', title);
            _gaq('_trackPageview', (trackPrefix + url));
          });
          _analyticsJs(function () {
            var opt_fieldObject = {
              'page': trackPrefix + url,
              'title': title
            };
            angular.extend(opt_fieldObject, getUtmParams());
            if (angular.isObject(custom)) {
              angular.extend(opt_fieldObject, custom);
            }
            _gaMultipleTrackers(undefined, 'send', 'pageview', opt_fieldObject);
          });
        };

        /**
         * Track event
         https://developers.google.com/analytics/devguides/collection/gajs/eventTrackerGuide
         https://developers.google.com/analytics/devguides/collection/analyticsjs/events
         * @param category
         * @param action
         * @param label
         * @param value
         * @param noninteraction
         * @param custom
         * @private
         */
        this._trackEvent = function (category, action, label, value, noninteraction, custom) {
          _gaJs(function () {
            _gaq('_trackEvent', category, action, label, value, !!noninteraction);
          });
          _analyticsJs(function () {
            var opt_fieldObject = {};
            var includeFn = function (trackerObj) {
              return isPropertySetTo('trackEvent', trackerObj, true);
            };

            if (angular.isDefined(noninteraction)) {
              opt_fieldObject.nonInteraction = !!noninteraction;
            }
            if (angular.isObject(custom)) {
              angular.extend(opt_fieldObject, custom);
            }
            if (!angular.isDefined(opt_fieldObject.page)) {
              opt_fieldObject.page = getUrl();
            }
            _gaMultipleTrackers(includeFn, 'send', 'event', category, action, label, value, opt_fieldObject);
          });
        };

        /**
         * Add transaction
         * https://developers.google.com/analytics/devguides/collection/gajs/methods/gaJSApiEcommerce#_gat.GA_Tracker_._addTrans
         * https://developers.google.com/analytics/devguides/collection/analyticsjs/ecommerce#addTrans
         * @param transactionId
         * @param affiliation
         * @param total
         * @param tax
         * @param shipping
         * @param city
         * @param state
         * @param country
         * @private
         */
        this._addTrans = function (transactionId, affiliation, total, tax, shipping, city, state, country, currency) {
          _gaJs(function () {
            _gaq('_addTrans', transactionId, affiliation, total, tax, shipping, city, state, country);
          });
          _analyticsJs(function () {
            if (that._ecommerceEnabled(true, 'addTrans')) {
              var includeFn = function (trackerObj) {
                return isPropertySetTo('trackEcommerce', trackerObj, true);
              };

              _gaMultipleTrackers(
                includeFn,
                'ecommerce:addTransaction',
                {
                  id: transactionId,
                  affiliation: affiliation,
                  revenue: total,
                  tax: tax,
                  shipping: shipping,
                  currency: currency || 'USD'
                });
            }
          });
        };

        /**
         * Add item to transaction
         * https://developers.google.com/analytics/devguides/collection/gajs/methods/gaJSApiEcommerce#_gat.GA_Tracker_._addItem
         * https://developers.google.com/analytics/devguides/collection/analyticsjs/ecommerce#addItem
         * @param transactionId
         * @param sku
         * @param name
         * @param category
         * @param price
         * @param quantity
         * @private
         */
        this._addItem = function (transactionId, sku, name, category, price, quantity) {
          _gaJs(function () {
            _gaq('_addItem', transactionId, sku, name, category, price, quantity);
          });
          _analyticsJs(function () {
            if (that._ecommerceEnabled(true, 'addItem')) {
              var includeFn = function (trackerObj) {
                return isPropertySetTo('trackEcommerce', trackerObj, true);
              };

              _gaMultipleTrackers(
                includeFn,
                'ecommerce:addItem',
                {
                  id: transactionId,
                  name: name,
                  sku: sku,
                  category: category,
                  price: price,
                  quantity: quantity
                });
            }
          });
        };

        /**
         * Track transaction
         * https://developers.google.com/analytics/devguides/collection/gajs/methods/gaJSApiEcommerce#_gat.GA_Tracker_._trackTrans
         * https://developers.google.com/analytics/devguides/collection/analyticsjs/ecommerce#sendingData
         * @private
         */
        this._trackTrans = function () {
          _gaJs(function () {
            _gaq('_trackTrans');
          });
          _analyticsJs(function () {
            if (that._ecommerceEnabled(true, 'trackTrans')) {
              var includeFn = function (trackerObj) {
                return isPropertySetTo('trackEcommerce', trackerObj, true);
              };

              _gaMultipleTrackers(includeFn, 'ecommerce:send');
            }
          });
        };

        /**
         * Clear transaction
         * https://developers.google.com/analytics/devguides/collection/analyticsjs/ecommerce#clearingData
         * @private
         */
        this._clearTrans = function () {
          _analyticsJs(function () {
            if (that._ecommerceEnabled(true, 'clearTrans')) {
              var includeFn = function (trackerObj) {
                return isPropertySetTo('trackEcommerce', trackerObj, true);
              };

              _gaMultipleTrackers(includeFn, 'ecommerce:clear');
            }
          });
        };

        /**
         * Enhanced Ecommerce
         */

        /**
         * Add Product
         * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#product-data
         * @param productId
         * @param name
         * @param category
         * @param brand
         * @param variant
         * @param price
         * @param quantity
         * @param coupon
         * @param position
         * @param custom
         * @private
         */
        this._addProduct = function (productId, name, category, brand, variant, price, quantity, coupon, position, custom) {
          _gaJs(function () {
            _gaq('_addProduct', productId, name, category, brand, variant, price, quantity, coupon, position);
          });
          _analyticsJs(function () {
            if (that._enhancedEcommerceEnabled(true, 'addProduct')) {
              var includeFn = function (trackerObj) {
                return isPropertySetTo('trackEcommerce', trackerObj, true);
              };
              var details = {
                id: productId,
                name: name,
                category: category,
                brand: brand,
                variant: variant,
                price: price,
                quantity: quantity,
                coupon: coupon,
                position: position
              };
              if (angular.isObject(custom)) {
                angular.extend(details, custom);
              }
              _gaMultipleTrackers(includeFn, 'ec:addProduct', details);
            }
          });
        };

        /**
         * Add Impression
         * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#impression-data
         * @param id
         * @param name
         * @param list
         * @param brand
         * @param category
         * @param variant
         * @param position
         * @param price
         * @private
         */
        this._addImpression = function (id, name, list, brand, category, variant, position, price){
          _gaJs(function () {
            _gaq('_addImpression', id, name, list, brand, category, variant, position, price);
          });
          _analyticsJs(function () {
            if (that._enhancedEcommerceEnabled(true, 'addImpression')) {
              var includeFn = function (trackerObj) {
                return isPropertySetTo('trackEcommerce', trackerObj, true);
              };

              _gaMultipleTrackers(
                includeFn,
                'ec:addImpression',
                {
                  id: id,
                  name: name,
                  category: category,
                  brand: brand,
                  variant: variant,
                  list: list,
                  position: position,
                  price: price
                });
            }
          });
        };

        /**
         * Add Promo
         * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce
         * @param productId
         * @param name
         * @param creative
         * @param position
         * @private
         */
        this._addPromo = function (productId, name, creative, position) {
          _gaJs(function () {
            _gaq('_addPromo', productId, name, creative, position);
          });
          _analyticsJs(function () {
            if (that._enhancedEcommerceEnabled(true, 'addPromo')) {
              var includeFn = function (trackerObj) {
                return isPropertySetTo('trackEcommerce', trackerObj, true);
              };

              _gaMultipleTrackers(
                includeFn,
                'ec:addPromo',
                {
                  id: productId,
                  name: name,
                  creative: creative,
                  position: position
                });
            }
          });
        };

        /**
         * Set Action
         * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#measuring-actions
         * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#action-types
         * @param action
         * @param obj
         * @private
         */
        this._setAction = function (action, obj){
          _gaJs(function () {
            _gaq('_setAction', action, obj);
          });
          _analyticsJs(function () {
            if (that._enhancedEcommerceEnabled(true, 'setAction')) {
              var includeFn = function (trackerObj) {
                return isPropertySetTo('trackEcommerce', trackerObj, true);
              };

              _gaMultipleTrackers(includeFn, 'ec:setAction', action, obj);
            }
          });
        };

        /**
         * Track Transaction
         * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#measuring-transactions
         * @param transactionId
         * @param affiliation
         * @param revenue
         * @param tax
         * @param shipping
         * @param coupon
         * @param list
         * @param step
         * @param option
         * @private
         */
        this._trackTransaction = function (transactionId, affiliation, revenue, tax, shipping, coupon, list, step, option) {
          this._setAction('purchase', getActionFieldObject(transactionId, affiliation, revenue, tax, shipping, coupon, list, step, option));
        };

        /**
         * Track Refund
         * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#measuring-refunds
         * @param transactionId
         * @private
         */
        this._trackRefund = function (transactionId) {
          this._setAction('refund', getActionFieldObject(transactionId));
        };

        /**
         * Track Checkout
         * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#measuring-checkout
         * @param step
         * @param option
         * @private
         */
        this._trackCheckOut = function (step, option) {
          this._setAction('checkout', getActionFieldObject(null, null, null, null, null, null, null, step, option));
        };

        /**
         * Track detail
         * @private
         */
        this._trackDetail = function () {
          this._setAction('detail');
          this._pageView();
        };

        /**
         * Track add/remove to cart
         * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#add-remove-cart
         * @param action
         * @param list
         * @private
         */
        this._trackCart = function (action, listName) {
          if (['add', 'remove'].indexOf(action) !== -1) {
            this._setAction(action, { list: listName });
            this._trackEvent('UX', 'click', action + (action === 'add' ? ' to cart' : ' from cart'));
          }
        };

        /**
         * Track promo click
         * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#measuring-promo-clicks
         * @param promotionName
         * @private
         */
        this._promoClick = function (promotionName) {
          this._setAction('promo_click');
          this._trackEvent('Internal Promotions', 'click', promotionName);
        };

        /**
         * Track product click
         * https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#measuring-promo-clicks
         * @param promotionName
         * @private
         */
        this._productClick = function (listName) {
          this._setAction('click', getActionFieldObject(null, null, null, null, null, null, listName, null, null));
          this._trackEvent('UX', 'click', listName);
        };

        /**
         * Send page view
         * @param trackerName
         * @private
         */
        this._pageView = function (trackerName) {
          _analyticsJs(function () {
            _ga(generateCommandName('send', trackerName), 'pageview');
          });
        };

        /**
         * Send custom events
         * https://developers.google.com/analytics/devguides/collection/analyticsjs/user-timings#implementation
         * https://developers.google.com/analytics/devguides/collection/analyticsjs/social-interactions#implementation
         * @private
         */
        this._send = function () {
          var args = Array.prototype.slice.call(arguments);
          args.unshift('send');
          _analyticsJs(function () {
            _ga.apply(that, args);
          });
        };

        /**
         * Set custom dimensions, metrics or experiment
         * https://developers.google.com/analytics/devguides/collection/analyticsjs/custom-dims-mets
         * https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference#customs
         * @param name (Required)
         * @param value (Required)
         * @param trackerName (Optional)
         * @private
         */
        this._set = function (name, value, trackerName) {
          _analyticsJs(function () {
            _ga(generateCommandName('set', trackerName), name, value);
          });
        };

        /**
         * Track user timings
         * @param timingCategory (Required): A string for categorizing all user timing variables into logical groups(e.g jQuery).
         * @param timingVar (Required): A string to identify the variable being recorded(e.g. JavaScript Load).
         * @param timingValue (Required): The number of milliseconds in elapsed time to report to Google Analytics(e.g. 20).
         * @param timingLabel (Optional): A string that can be used to add flexibility in visualizing user timings in the reports(e.g. Google CDN).
         * @private
         */
        this._trackTimings = function (timingCategory, timingVar, timingValue, timingLabel) {
          _analyticsJs(function () {
            _gaMultipleTrackers(undefined, 'send', 'timing', timingCategory, timingVar, timingValue, timingLabel);
          });
        };

        /**
         * Exception tracking
         * https://developers.google.com/analytics/devguides/collection/analyticsjs/exceptions
         * @param description (Optional): A description of the exception.
         * @param isFatal (Optional): true if the exception was fatal, false otherwise.
         * @private
         */
        this._trackException = function (description, isFatal) {
          _analyticsJs(function () {
            _gaMultipleTrackers(undefined, 'send', 'exception', { exDescription: description, exFatal: !!isFatal});
          });
        };

        // creates the Google Analytics tracker
        if (!delayScriptTag) {
          if (analyticsJS) {
            this._createAnalyticsScriptTag();
          } else {
            this._createScriptTag();
          }
        }

        // activates page tracking
        if (trackRoutes) {
          $rootScope.$on(pageEvent, function () {
            // Apply $route based filtering if configured
            if (readFromRoute) {
              // Avoid tracking undefined routes, routes without template (e.g. redirect routes)
              // and those explicitly marked as 'do not track'
              if (!$route.current || !$route.current.templateUrl || $route.current.doNotTrack) {
                return;
              }
            }
            
            that._trackPage();
          });
        }

        return {
          log: that.log,
          offlineQueue: that.offlineQueue,
          configuration: {
            accounts: accounts,
            universalAnalytics: analyticsJS,
            crossDomainLinker: crossDomainLinker,
            crossLinkDomains: crossLinkDomains,
            currency: currency,
            debugMode: debugMode,
            delayScriptTag: delayScriptTag,
            disableAnalytics: disableAnalytics,
            displayFeatures: displayFeatures,
            domainName: domainName,
            ecommerce: that._ecommerceEnabled(),
            enhancedEcommerce: that._enhancedEcommerceEnabled(),
            enhancedLinkAttribution: enhancedLinkAttribution,
            experimentId: experimentId,
            hybridMobileSupport: hybridMobileSupport,
            ignoreFirstPageLoad: ignoreFirstPageLoad,
            logAllCalls: logAllCalls,
            pageEvent: pageEvent,
            readFromRoute: readFromRoute,
            removeRegExp: removeRegExp,
            testMode: testMode,
            traceDebuggingMode: traceDebuggingMode,
            trackPrefix: trackPrefix,
            trackRoutes: trackRoutes,
            trackUrlParams: trackUrlParams
          },
          getUrl: getUrl,
          /* DEPRECATED */
          setCookieConfig: that._setCookieConfig,
          /* DEPRECATED */
          getCookieConfig: function () {
            return cookieConfig;
          },
          createAnalyticsScriptTag: function (config) {
            if (config) {
              cookieConfig = config;
            }
            return that._createAnalyticsScriptTag();
          },
          createScriptTag: function () {
            return that._createScriptTag();
          },
          offline: function (mode) {
            if (mode === true && offlineMode === false) {
              // Go to offline mode
              offlineMode = true;
            }
            if (mode === false && offlineMode === true) {
              // Go to online mode and process the offline queue
              offlineMode = false;
              while (that.offlineQueue.length > 0) {
                var obj = that.offlineQueue.shift();
                obj[0].apply(that, obj[1]);
              }
            }
            return offlineMode;
          },
          trackPage: function (url, title, custom) {
            that._trackPage.apply(that, arguments);
          },
          trackEvent: function (category, action, label, value, noninteraction, custom) {
            that._trackEvent.apply(that, arguments);
          },
          addTrans: function (transactionId, affiliation, total, tax, shipping, city, state, country, currency) {
            that._addTrans.apply(that, arguments);
          },
          addItem: function (transactionId, sku, name, category, price, quantity) {
            that._addItem.apply(that, arguments);
          },
          trackTrans: function () {
            that._trackTrans.apply(that, arguments);
          },
          clearTrans: function () {
            that._clearTrans.apply(that, arguments);
          },
          addProduct: function (productId, name, category, brand, variant, price, quantity, coupon, position, custom) {
            that._addProduct.apply(that, arguments);
          },
          addPromo: function (productId, name, creative, position) {
            that._addPromo.apply(that, arguments);
          },
          addImpression: function (productId, name, list, brand, category, variant, position, price) {
            that._addImpression.apply(that, arguments);
          },
          productClick: function (listName) {
            that._productClick.apply(that, arguments);
          },
          promoClick : function (promotionName) {
            that._promoClick.apply(that, arguments);
          },
          trackDetail: function () {
            that._trackDetail.apply(that, arguments);
          },
          trackCart: function (action, list) {
            that._trackCart.apply(that, arguments);
          },
          trackCheckout: function (step, option) {
            that._trackCheckOut.apply(that, arguments);
          },
          trackTimings: function (timingCategory, timingVar, timingValue, timingLabel) {
            that._trackTimings.apply(that, arguments);
          },
          trackTransaction: function (transactionId, affiliation, revenue, tax, shipping, coupon, list, step, option) {
            that._trackTransaction.apply(that, arguments);
          },
          trackException: function (description, isFatal) {
            that._trackException.apply(that, arguments);
          },
          setAction: function (action, obj) {
            that._setAction.apply(that, arguments);
          },
          pageView: function () {
            that._pageView.apply(that, arguments);
          },
          send: function (obj) {
            that._send.apply(that, arguments);
          },
          set: function (name, value, trackerName) {
            that._set.apply(that, arguments);
          }
        };
      }];
    })

    .directive('gaTrackEvent', ['Analytics', '$parse', function (Analytics, $parse) {
      return {
        restrict: 'A',
        link: function (scope, element, attrs) {
          var options = $parse(attrs.gaTrackEvent);
          element.bind('click', function () {
            if(attrs.gaTrackEventIf){
              if(!scope.$eval(attrs.gaTrackEventIf)){
                return; // Cancel this event if we don't pass the ga-track-event-if condition
              }
            }
            if (options.length > 1) {
              Analytics.trackEvent.apply(Analytics, options(scope));
            }
          });
        }
      };
    }]);
  return angular.module('angular-google-analytics');
}));

(function (root, factory) {
	if (typeof exports === "object") {
		module.exports = factory(require('angular'));
	} else if (typeof define === "function" && define.amd) {
		define(['angular'], factory);
	} else {
		factory(root.angular);
	}
}(this, function (angular) {
	/**
	 * AngularJS Google Maps Ver. 1.17.94
	 *
	 * The MIT License (MIT)
	 * 
	 * Copyright (c) 2014, 2015, 1016 Allen Kim
	 * 
	 * Permission is hereby granted, free of charge, to any person obtaining a copy of
	 * this software and associated documentation files (the "Software"), to deal in
	 * the Software without restriction, including without limitation the rights to
	 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
	 * the Software, and to permit persons to whom the Software is furnished to do so,
	 * subject to the following conditions:
	 * 
	 * The above copyright notice and this permission notice shall be included in all
	 * copies or substantial portions of the Software.
	 * 
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
	 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
	 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
	 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
	 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 */
	angular.module('ngMap', []);

	/**
	 * @ngdoc controller
	 * @name MapController
	 */
	(function () {
		'use strict';
		var Attr2MapOptions;

		var __MapController = function (
			$scope, $element, $attrs, $parse, _Attr2MapOptions_, NgMap, NgMapPool
		  ) {
			Attr2MapOptions = _Attr2MapOptions_;
			var vm = this;

			vm.mapOptions; /** @memberof __MapController */
			vm.mapEvents;  /** @memberof __MapController */
			vm.eventListeners;  /** @memberof __MapController */

			/**
			 * Add an object to the collection of group
			 * @memberof __MapController
			 * @function addObject
			 * @param groupName the name of collection that object belongs to
			 * @param obj  an object to add into a collection, i.e. marker, shape
			 */
			vm.addObject = function (groupName, obj) {
				if (vm.map) {
					vm.map[groupName] = vm.map[groupName] || {};
					var len = Object.keys(vm.map[groupName]).length;
					vm.map[groupName][obj.id || len] = obj;

					if (vm.map instanceof google.maps.Map) {
						//infoWindow.setMap works like infoWindow.open
						if (groupName != "infoWindows" && obj.setMap) {
							obj.setMap && obj.setMap(vm.map);
						}
						if (obj.centered && obj.position) {
							vm.map.setCenter(obj.position);
						}
						(groupName == 'markers') && vm.objectChanged('markers');
						(groupName == 'customMarkers') && vm.objectChanged('customMarkers');
					}
				}
			};

			/**
			 * Delete an object from the collection and remove from map
			 * @memberof __MapController
			 * @function deleteObject
			 * @param {Array} objs the collection of objects. i.e., map.markers
			 * @param {Object} obj the object to be removed. i.e., marker
			 */
			vm.deleteObject = function (groupName, obj) {
				/* delete from group */
				if (obj.map) {
					var objs = obj.map[groupName];
					for (var name in objs) {
						if (objs[name] === obj) {
							void 0;
							google.maps.event.clearInstanceListeners(obj);
							delete objs[name];
						}
					}

					/* delete from map */
					obj.map && obj.setMap && obj.setMap(null);

					(groupName == 'markers') && vm.objectChanged('markers');
					(groupName == 'customMarkers') && vm.objectChanged('customMarkers');
				}
			};

			/**
			 * @memberof __MapController
			 * @function observeAttrSetObj
			 * @param {Hash} orgAttrs attributes before its initialization
			 * @param {Hash} attrs    attributes after its initialization
			 * @param {Object} obj    map object that an action is to be done
			 * @description watch changes of attribute values and
			 * do appropriate action based on attribute name
			 */
			vm.observeAttrSetObj = function (orgAttrs, attrs, obj) {
				if (attrs.noWatcher) {
					return false;
				}
				var attrsToObserve = Attr2MapOptions.getAttrsToObserve(orgAttrs);
				for (var i = 0; i < attrsToObserve.length; i++) {
					var attrName = attrsToObserve[i];
					attrs.$observe(attrName, NgMap.observeAndSet(attrName, obj));
				}
			};

			/**
			 * @memberof __MapController
			 * @function zoomToIncludeMarkers
			 */
			vm.zoomToIncludeMarkers = function () {
				// Only fit to bounds if we have any markers
				// object.keys is supported in all major browsers (IE9+)
				if ((vm.map.markers != null && Object.keys(vm.map.markers).length > 0) || (vm.map.customMarkers != null && Object.keys(vm.map.customMarkers).length > 0)) {
					var bounds = new google.maps.LatLngBounds();
					for (var k1 in vm.map.markers) {
						bounds.extend(vm.map.markers[k1].getPosition());
					}
					for (var k2 in vm.map.customMarkers) {
						bounds.extend(vm.map.customMarkers[k2].getPosition());
					}
					if (vm.mapOptions.maximumZoom) {
						vm.enableMaximumZoomCheck = true; //enable zoom check after resizing for markers
					}
					vm.map.fitBounds(bounds);
				}
			};

			/**
			 * @memberof __MapController
			 * @function objectChanged
			 * @param {String} group name of group e.g., markers
			 */
			vm.objectChanged = function (group) {
				if (vm.map &&
				  (group == 'markers' || group == 'customMarkers') &&
				  vm.map.zoomToIncludeMarkers == 'auto'
				) {
					vm.zoomToIncludeMarkers();
				}
			};

			/**
			 * @memberof __MapController
			 * @function initializeMap
			 * @description
			 *  . initialize Google map on <div> tag
			 *  . set map options, events, and observers
			 *  . reset zoom to include all (custom)markers
			 */
			vm.initializeMap = function () {
				var mapOptions = vm.mapOptions,
					mapEvents = vm.mapEvents;

				var lazyInitMap = vm.map; //prepared for lazy init
				vm.map = NgMapPool.getMapInstance($element[0]);
				NgMap.setStyle($element[0]);

				// set objects for lazyInit
				if (lazyInitMap) {

					/**
					 * rebuild mapOptions for lazyInit
					 * because attributes values might have been changed
					 */
					var filtered = Attr2MapOptions.filter($attrs);
					var options = Attr2MapOptions.getOptions(filtered);
					var controlOptions = Attr2MapOptions.getControlOptions(filtered);
					mapOptions = angular.extend(options, controlOptions);
					void 0;

					for (var group in lazyInitMap) {
						var groupMembers = lazyInitMap[group]; //e.g. markers
						if (typeof groupMembers == 'object') {
							for (var id in groupMembers) {
								vm.addObject(group, groupMembers[id]);
							}
						}
					}
					vm.map.showInfoWindow = vm.showInfoWindow;
					vm.map.hideInfoWindow = vm.hideInfoWindow;
				}

				// set options
				mapOptions.zoom = mapOptions.zoom || 15;
				var center = mapOptions.center;
				if (!mapOptions.center ||
				  ((typeof center === 'string') && center.match(/\{\{.*\}\}/))
				) {
					mapOptions.center = new google.maps.LatLng(0, 0);
				} else if ((typeof center === 'string') && center.match(/[0-9.-]*,[0-9.-]*/)) {
					mapOptions.center = new google.maps.LatLng(center);
				} else if (!(center instanceof google.maps.LatLng)) {
					var geoCenter = mapOptions.center;
					delete mapOptions.center;
					NgMap.getGeoLocation(geoCenter, mapOptions.geoLocationOptions).
					  then(function (latlng) {
					  	vm.map.setCenter(latlng);
					  	var geoCallback = mapOptions.geoCallback;
					  	geoCallback && $parse(geoCallback)($scope);
					  }, function () {
					  	if (mapOptions.geoFallbackCenter) {
					  		vm.map.setCenter(mapOptions.geoFallbackCenter);
					  	}
					  });
				}
				vm.map.setOptions(mapOptions);

				// set events
				for (var eventName in mapEvents) {
					var event = mapEvents[eventName];
					var listener = google.maps.event.addListener(vm.map, eventName, event);
					vm.eventListeners[eventName] = listener;
				}

				// set observers
				vm.observeAttrSetObj(orgAttrs, $attrs, vm.map);
				vm.singleInfoWindow = mapOptions.singleInfoWindow;

				google.maps.event.trigger(vm.map, 'resize');

				google.maps.event.addListenerOnce(vm.map, "idle", function () {
					NgMap.addMap(vm);
					if (mapOptions.zoomToIncludeMarkers) {
						vm.zoomToIncludeMarkers();
					}
					//TODO: it's for backward compatibiliy. will be removed
					$scope.map = vm.map;
					$scope.$emit('mapInitialized', vm.map);

					//callback
					if ($attrs.mapInitialized) {
						$parse($attrs.mapInitialized)($scope, { map: vm.map });
					}
				});

				//add maximum zoom listeners if zoom-to-include-markers and and maximum-zoom are valid attributes
				if (mapOptions.zoomToIncludeMarkers && mapOptions.maximumZoom) {
					google.maps.event.addListener(vm.map, 'zoom_changed', function () {
						if (vm.enableMaximumZoomCheck == true) {
							vm.enableMaximumZoomCheck = false;
							google.maps.event.addListenerOnce(vm.map, 'bounds_changed', function () {
								vm.map.setZoom(Math.min(mapOptions.maximumZoom, vm.map.getZoom()));
							});
						}
					});
				}
			};

			$scope.google = google; //used by $scope.eval to avoid eval()

			/**
			 * get map options and events
			 */
			var orgAttrs = Attr2MapOptions.orgAttributes($element);
			var filtered = Attr2MapOptions.filter($attrs);
			var options = Attr2MapOptions.getOptions(filtered, { scope: $scope });
			var controlOptions = Attr2MapOptions.getControlOptions(filtered);
			var mapOptions = angular.extend(options, controlOptions);
			var mapEvents = Attr2MapOptions.getEvents($scope, filtered);
			void 0;
			Object.keys(mapEvents).length && void 0;

			vm.mapOptions = mapOptions;
			vm.mapEvents = mapEvents;
			vm.eventListeners = {};

			if (options.lazyInit) { // allows controlled initialization
				// parse angular expression for dynamic ids
				if (!!$attrs.id &&
					// starts with, at position 0
				$attrs.id.indexOf("{{", 0) === 0 &&
					// ends with
				$attrs.id.indexOf("}}", $attrs.id.length - "}}".length) !== -1) {
					var idExpression = $attrs.id.slice(2, -2);
					var mapId = $parse(idExpression)($scope);
				} else {
					var mapId = $attrs.id;
				}
				vm.map = { id: mapId }; //set empty, not real, map
				NgMap.addMap(vm);
			} else {
				vm.initializeMap();
			}

			//Trigger Resize
			if (options.triggerResize) {
				google.maps.event.trigger(vm.map, 'resize');
			}

			$element.bind('$destroy', function () {
				NgMapPool.returnMapInstance(vm.map);
				NgMap.deleteMap(vm);
			});
		}; // __MapController

		__MapController.$inject = [
		  '$scope', '$element', '$attrs', '$parse', 'Attr2MapOptions', 'NgMap', 'NgMapPool'
		];
		angular.module('ngMap').controller('__MapController', __MapController);
	})();

	/**
	 * @ngdoc directive
	 * @name bicycling-layer
	 * @param Attr2Options {service}
	 *   convert html attribute to Gogole map api options
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 *
	 *   <map zoom="13" center="34.04924594193164, -118.24104309082031">
	 *     <bicycling-layer></bicycling-layer>
	 *    </map>
	 */
	(function () {
		'use strict';
		var parser;

		var linkFunc = function (scope, element, attrs, mapController) {
			mapController = mapController[0] || mapController[1];
			var orgAttrs = parser.orgAttributes(element);
			var filtered = parser.filter(attrs);
			var options = parser.getOptions(filtered, { scope: scope });
			var events = parser.getEvents(scope, filtered);

			void 0;

			var layer = getLayer(options, events);
			mapController.addObject('bicyclingLayers', layer);
			mapController.observeAttrSetObj(orgAttrs, attrs, layer);  //observers
			element.bind('$destroy', function () {
				mapController.deleteObject('bicyclingLayers', layer);
			});
		};

		var getLayer = function (options, events) {
			var layer = new google.maps.BicyclingLayer(options);
			for (var eventName in events) {
				google.maps.event.addListener(layer, eventName, events[eventName]);
			}
			return layer;
		};

		var bicyclingLayer = function (Attr2MapOptions) {
			parser = Attr2MapOptions;
			return {
				restrict: 'E',
				require: ['?^map', '?^ngMap'],
				link: linkFunc
			};
		};
		bicyclingLayer.$inject = ['Attr2MapOptions'];

		angular.module('ngMap').directive('bicyclingLayer', bicyclingLayer);
	})();

	/**
	 * @ngdoc directive
	 * @name custom-control
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @param $compile {service} AngularJS $compile service
	 * @description
	 *   Build custom control and set to the map with position
	 *
	 *   Requires:  map directive
	 *
	 *   Restrict To:  Element
	 *
	 * @attr {String} position position of this control
	 *        i.e. TOP_RIGHT
	 * @attr {Number} index index of the control
	 * @example
	 *
	 * Example:
	 *  <map center="41.850033,-87.6500523" zoom="3">
	 *    <custom-control id="home" position="TOP_LEFT" index="1">
	 *      <div style="background-color: white;">
	 *        <b>Home</b>
	 *      </div>
	 *    </custom-control>
	 *  </map>
	 *
	 */
	(function () {
		'use strict';
		var parser, $compile, NgMap;

		var linkFunc = function (scope, element, attrs, mapController) {
			mapController = mapController[0] || mapController[1];
			var filtered = parser.filter(attrs);
			var options = parser.getOptions(filtered, { scope: scope });
			var events = parser.getEvents(scope, filtered);

			/**
			 * build a custom control element
			 */
			var customControlEl = element[0].parentElement.removeChild(element[0]);
			$compile(customControlEl.innerHTML.trim())(scope);

			/**
			 * set events
			 */
			for (var eventName in events) {
				google.maps.event.addDomListener(customControlEl, eventName, events[eventName]);
			}

			mapController.addObject('customControls', customControlEl);
			var position = options.position;
			mapController.map.controls[google.maps.ControlPosition[position]].push(customControlEl);

			element.bind('$destroy', function () {
				mapController.deleteObject('customControls', customControlEl);
			});
		};

		var customControl = function (Attr2MapOptions, _$compile_, _NgMap_) {
			parser = Attr2MapOptions, $compile = _$compile_, NgMap = _NgMap_;

			return {
				restrict: 'E',
				require: ['?^map', '?^ngMap'],
				link: linkFunc
			}; // return
		};
		customControl.$inject = ['Attr2MapOptions', '$compile', 'NgMap'];

		angular.module('ngMap').directive('customControl', customControl);
	})();

	/**
	 * @ngdoc directive
	 * @memberof ngmap
	 * @name custom-marker
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @param $timeout {service} AngularJS $timeout
	 * @description
	 *   Marker with html
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @attr {String} position required, position on map
	 * @attr {Number} z-index optional
	 * @attr {Boolean} visible optional
	 * @example
	 *
	 * Example:
	 *   <map center="41.850033,-87.6500523" zoom="3">
	 *     <custom-marker position="41.850033,-87.6500523">
	 *       <div>
	 *         <b>Home</b>
	 *       </div>
	 *     </custom-marker>
	 *   </map>
	 *
	 */
	/* global document */
	(function () {
		'use strict';
		var parser, $timeout, $compile, NgMap;

		var CustomMarker = function (options) {
			options = options || {};

			this.el = document.createElement('div');
			this.el.style.display = 'inline-block';
			this.el.style.visibility = "hidden";
			this.visible = true;
			for (var key in options) { /* jshint ignore:line */
				this[key] = options[key];
			}
		};

		var setCustomMarker = function () {

			CustomMarker.prototype = new google.maps.OverlayView();

			CustomMarker.prototype.setContent = function (html, scope) {
				this.el.innerHTML = html;
				this.el.style.position = 'absolute';
				if (scope) {
					$compile(angular.element(this.el).contents())(scope);
				}
			};

			CustomMarker.prototype.getDraggable = function () {
				return this.draggable;
			};

			CustomMarker.prototype.setDraggable = function (draggable) {
				this.draggable = draggable;
			};

			CustomMarker.prototype.getPosition = function () {
				return this.position;
			};

			CustomMarker.prototype.setPosition = function (position) {
				position && (this.position = position); /* jshint ignore:line */
				var _this = this;
				if (this.getProjection() && typeof this.position.lng == 'function') {
					void 0;
					var setPosition = function () {
						if (_.isNull(_this.getProjection())) {
							return;
						}
						var posPixel = _this.getProjection().fromLatLngToDivPixel(_this.position);
						var x = Math.round(posPixel.x - (_this.el.offsetWidth / 2));
						var y = Math.round(posPixel.y - _this.el.offsetHeight - 10); // 10px for anchor
						_this.el.style.left = x + "px";
						_this.el.style.top = y + "px";
						_this.el.style.visibility = "visible";
					};
					if (_this.el.offsetWidth && _this.el.offsetHeight) {
						setPosition();
					} else {
						//delayed left/top calculation when width/height are not set instantly
						$timeout(setPosition, 300);
					}
				}
			};

			CustomMarker.prototype.setZIndex = function (zIndex) {
				zIndex && (this.zIndex = zIndex); /* jshint ignore:line */
				this.el.style.zIndex = this.zIndex;
			};

			CustomMarker.prototype.getVisible = function () {
				return this.visible;
			};

			CustomMarker.prototype.setVisible = function (visible) {
				this.el.style.display = visible ? 'inline-block' : 'none';
				this.visible = visible;
			};

			CustomMarker.prototype.addClass = function (className) {
				var classNames = this.el.className.trim().split(' ');
				(classNames.indexOf(className) == -1) && classNames.push(className); /* jshint ignore:line */
				this.el.className = classNames.join(' ');
			};

			CustomMarker.prototype.removeClass = function (className) {
				var classNames = this.el.className.split(' ');
				var index = classNames.indexOf(className);
				(index > -1) && classNames.splice(index, 1); /* jshint ignore:line */
				this.el.className = classNames.join(' ');
			};

			CustomMarker.prototype.onAdd = function () {
				this.getPanes().overlayMouseTarget.appendChild(this.el);
			};

			CustomMarker.prototype.draw = function () {
				this.setPosition();
				this.setZIndex(this.zIndex);
				this.setVisible(this.visible);
			};

			CustomMarker.prototype.onRemove = function () {
				this.el.parentNode.removeChild(this.el);
				//this.el = null;
			};
		};

		var linkFunc = function (orgHtml, varsToWatch) {
			//console.log('orgHtml', orgHtml, 'varsToWatch', varsToWatch);

			return function (scope, element, attrs, mapController) {
				mapController = mapController[0] || mapController[1];
				var orgAttrs = parser.orgAttributes(element);

				var filtered = parser.filter(attrs);
				var options = parser.getOptions(filtered, { scope: scope });
				var events = parser.getEvents(scope, filtered);

				/**
				 * build a custom marker element
				 */
				element[0].style.display = 'none';
				void 0;
				var customMarker = new CustomMarker(options);

				$timeout(function () { //apply contents, class, and location after it is compiled

					scope.$watch('[' + varsToWatch.join(',') + ']', function () {
						customMarker.setContent(orgHtml, scope);
					}, true);

					customMarker.setContent(element[0].innerHTML, scope);
					var classNames = element[0].firstElementChild.className;
					customMarker.addClass('custom-marker');
					customMarker.addClass(classNames);
					void 0;

					if (!(options.position instanceof google.maps.LatLng)) {
						NgMap.getGeoLocation(options.position).then(
							  function (latlng) {
							  	customMarker.setPosition(latlng);
							  }
						);
					}

				});

				void 0;
				for (var eventName in events) { /* jshint ignore:line */
					google.maps.event.addDomListener(
					  customMarker.el, eventName, events[eventName]);
				}
				mapController.addObject('customMarkers', customMarker);

				//set observers
				mapController.observeAttrSetObj(orgAttrs, attrs, customMarker);

				element.bind('$destroy', function () {
					//Is it required to remove event listeners when DOM is removed?
					mapController.deleteObject('customMarkers', customMarker);
				});

			}; // linkFunc
		};


		var customMarkerDirective = function (
			_$timeout_, _$compile_, Attr2MapOptions, _NgMap_
		  ) {
			parser = Attr2MapOptions;
			$timeout = _$timeout_;
			$compile = _$compile_;
			NgMap = _NgMap_;

			return {
				restrict: 'E',
				require: ['?^map', '?^ngMap'],
				compile: function (element) {
					setCustomMarker();
					element[0].style.display = 'none';
					var orgHtml = element.html();
					var matches = orgHtml.match(/{{([^}]+)}}/g);
					var varsToWatch = [];
					//filter out that contains '::', 'this.'
					(matches || []).forEach(function (match) {
						var toWatch = match.replace('{{', '').replace('}}', '');
						if (match.indexOf('::') == -1 &&
						  match.indexOf('this.') == -1 &&
						  varsToWatch.indexOf(toWatch) == -1) {
							varsToWatch.push(match.replace('{{', '').replace('}}', ''));
						}
					});

					return linkFunc(orgHtml, varsToWatch);
				}
			}; // return
		};// function
		customMarkerDirective.$inject =
		  ['$timeout', '$compile', 'Attr2MapOptions', 'NgMap'];

		angular.module('ngMap').directive('customMarker', customMarkerDirective);
	})();

	/**
	 * @ngdoc directive
	 * @name directions
	 * @description
	 *   Enable directions on map.
	 *   e.g., origin, destination, draggable, waypoints, etc
	 *
	 *   Requires:  map directive
	 *
	 *   Restrict To:  Element
	 *
	 * @attr {String} DirectionsRendererOptions
	 *   [Any DirectionsRendererOptions](https://developers.google.com/maps/documentation/javascript/reference#DirectionsRendererOptions)
	 * @attr {String} DirectionsRequestOptions
	 *   [Any DirectionsRequest options](https://developers.google.com/maps/documentation/javascript/reference#DirectionsRequest)
	 * @example
	 *  <map zoom="14" center="37.7699298, -122.4469157">
	 *    <directions
	 *      draggable="true"
	 *      panel="directions-panel"
	 *      travel-mode="{{travelMode}}"
	 *      waypoints="[{location:'kingston', stopover:true}]"
	 *      origin="{{origin}}"
	 *      destination="{{destination}}">
	 *    </directions>
	 *  </map>
	 */
	/* global document */
	(function () {
		'use strict';
		var NgMap, $timeout, NavigatorGeolocation;

		var getDirectionsRenderer = function (options, events) {
			if (options.panel) {
				options.panel = document.getElementById(options.panel) ||
				  document.querySelector(options.panel);
			}
			var renderer = new google.maps.DirectionsRenderer(options);
			for (var eventName in events) {
				google.maps.event.addListener(renderer, eventName, events[eventName]);
			}
			return renderer;
		};

		var updateRoute = function (renderer, options) {
			var directionsService = new google.maps.DirectionsService();

			/* filter out valid keys only for DirectionsRequest object*/
			var request = options;
			request.travelMode = request.travelMode || 'DRIVING';
			var validKeys = [
			  'origin', 'destination', 'travelMode', 'transitOptions', 'unitSystem',
			  'durationInTraffic', 'waypoints', 'optimizeWaypoints',
			  'provideRouteAlternatives', 'avoidHighways', 'avoidTolls', 'region'
			];
			for (var key in request) {
				(validKeys.indexOf(key) === -1) && (delete request[key]);
			}

			if (request.waypoints) {
				// Check fo valid values
				if (request.waypoints == "[]" || request.waypoints === "") {
					delete request.waypoints;
				}
			}

			var showDirections = function (request) {
				directionsService.route(request, function (response, status) {
					if (status == google.maps.DirectionsStatus.OK) {
						$timeout(function () {
							renderer.setDirections(response);
						});
					}
				});
			};

			if (request.origin && request.destination) {
				if (request.origin == 'current-location') {
					NavigatorGeolocation.getCurrentPosition().then(function (ll) {
						request.origin = new google.maps.LatLng(ll.coords.latitude, ll.coords.longitude);
						showDirections(request);
					});
				} else if (request.destination == 'current-location') {
					NavigatorGeolocation.getCurrentPosition().then(function (ll) {
						request.destination = new google.maps.LatLng(ll.coords.latitude, ll.coords.longitude);
						showDirections(request);
					});
				} else {
					showDirections(request);
				}
			}
		};

		var directions = function (
			Attr2MapOptions, _$timeout_, _NavigatorGeolocation_, _NgMap_) {
			var parser = Attr2MapOptions;
			NgMap = _NgMap_;
			$timeout = _$timeout_;
			NavigatorGeolocation = _NavigatorGeolocation_;

			var linkFunc = function (scope, element, attrs, mapController) {
				mapController = mapController[0] || mapController[1];

				var orgAttrs = parser.orgAttributes(element);
				var filtered = parser.filter(attrs);
				var options = parser.getOptions(filtered, { scope: scope });
				var events = parser.getEvents(scope, filtered);
				var attrsToObserve = parser.getAttrsToObserve(orgAttrs);

				var renderer = getDirectionsRenderer(options, events);
				mapController.addObject('directionsRenderers', renderer);

				attrsToObserve.forEach(function (attrName) {
					(function (attrName) {
						attrs.$observe(attrName, function (val) {
							if (attrName == 'panel') {
								$timeout(function () {
									var panel =
									  document.getElementById(val) || document.querySelector(val);
									void 0;
									panel && renderer.setPanel(panel);
								});
							} else if (options[attrName] !== val) { //apply only if changed
								var optionValue = parser.toOptionValue(val, { key: attrName });
								void 0;
								options[attrName] = optionValue;
								updateRoute(renderer, options);
							}
						});
					})(attrName);
				});

				NgMap.getMap().then(function () {
					updateRoute(renderer, options);
				});
				element.bind('$destroy', function () {
					mapController.deleteObject('directionsRenderers', renderer);
				});
			};

			return {
				restrict: 'E',
				require: ['?^map', '?^ngMap'],
				link: linkFunc
			};
		}; // var directions
		directions.$inject =
		  ['Attr2MapOptions', '$timeout', 'NavigatorGeolocation', 'NgMap'];

		angular.module('ngMap').directive('directions', directions);
	})();


	/**
	 * @ngdoc directive
	 * @name drawing-manager
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *
	 *  <map zoom="13" center="37.774546, -122.433523" map-type-id="SATELLITE">
	 *    <drawing-manager
	 *      on-overlaycomplete="onMapOverlayCompleted()"
	 *      position="ControlPosition.TOP_CENTER"
	 *      drawingModes="POLYGON,CIRCLE"
	 *      drawingControl="true"
	 *      circleOptions="fillColor: '#FFFF00';fillOpacity: 1;strokeWeight: 5;clickable: false;zIndex: 1;editable: true;" >
	 *    </drawing-manager>
	 *  </map>
	 *
	 *  TODO: Add remove button.
	 *  currently, for our solution, we have the shapes/markers in our own
	 *  controller, and we use some css classes to change the shape button
	 *  to a remove button (<div>X</div>) and have the remove operation in our own controller.
	 */
	(function () {
		'use strict';
		angular.module('ngMap').directive('drawingManager', [
		  'Attr2MapOptions', function (Attr2MapOptions) {
		  	var parser = Attr2MapOptions;

		  	return {
		  		restrict: 'E',
		  		require: ['?^map', '?^ngMap'],

		  		link: function (scope, element, attrs, mapController) {
		  			mapController = mapController[0] || mapController[1];

		  			var filtered = parser.filter(attrs);
		  			var options = parser.getOptions(filtered, { scope: scope });
		  			var controlOptions = parser.getControlOptions(filtered);
		  			var events = parser.getEvents(scope, filtered);

		  			/**
					 * set options
					 */
		  			var drawingManager = new google.maps.drawing.DrawingManager({
		  				drawingMode: options.drawingmode,
		  				drawingControl: options.drawingcontrol,
		  				drawingControlOptions: controlOptions.drawingControlOptions,
		  				circleOptions: options.circleoptions,
		  				markerOptions: options.markeroptions,
		  				polygonOptions: options.polygonoptions,
		  				polylineOptions: options.polylineoptions,
		  				rectangleOptions: options.rectangleoptions
		  			});

		  			//Observers
		  			attrs.$observe('drawingControlOptions', function (newValue) {
		  				drawingManager.drawingControlOptions = parser.getControlOptions({ drawingControlOptions: newValue }).drawingControlOptions;
		  				drawingManager.setDrawingMode(null);
		  				drawingManager.setMap(mapController.map);
		  			});


		  			/**
					 * set events
					 */
		  			for (var eventName in events) {
		  				google.maps.event.addListener(drawingManager, eventName, events[eventName]);
		  			}

		  			mapController.addObject('mapDrawingManager', drawingManager);

		  			element.bind('$destroy', function () {
		  				mapController.deleteObject('mapDrawingManager', drawingManager);
		  			});
		  		}
		  	}; // return
		  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name dynamic-maps-engine-layer
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *   <map zoom="14" center="[59.322506, 18.010025]">
	 *     <dynamic-maps-engine-layer
	 *       layer-id="06673056454046135537-08896501997766553811">
	 *     </dynamic-maps-engine-layer>
	 *    </map>
	 */
	(function () {
		'use strict';

		angular.module('ngMap').directive('dynamicMapsEngineLayer', [
		  'Attr2MapOptions', function (Attr2MapOptions) {
		  	var parser = Attr2MapOptions;

		  	var getDynamicMapsEngineLayer = function (options, events) {
		  		var layer = new google.maps.visualization.DynamicMapsEngineLayer(options);

		  		for (var eventName in events) {
		  			google.maps.event.addListener(layer, eventName, events[eventName]);
		  		}

		  		return layer;
		  	};

		  	return {
		  		restrict: 'E',
		  		require: ['?^map', '?^ngMap'],

		  		link: function (scope, element, attrs, mapController) {
		  			mapController = mapController[0] || mapController[1];

		  			var filtered = parser.filter(attrs);
		  			var options = parser.getOptions(filtered, { scope: scope });
		  			var events = parser.getEvents(scope, filtered, events);

		  			var layer = getDynamicMapsEngineLayer(options, events);
		  			mapController.addObject('mapsEngineLayers', layer);
		  		}
		  	}; // return
		  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name fusion-tables-layer
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *   <map zoom="11" center="41.850033, -87.6500523">
	 *     <fusion-tables-layer query="{
	 *       select: 'Geocodable address',
	 *       from: '1mZ53Z70NsChnBMm-qEYmSDOvLXgrreLTkQUvvg'}">
	 *     </fusion-tables-layer>
	 *   </map>
	 */
	(function () {
		'use strict';

		angular.module('ngMap').directive('fusionTablesLayer', [
		  'Attr2MapOptions', function (Attr2MapOptions) {
		  	var parser = Attr2MapOptions;

		  	var getLayer = function (options, events) {
		  		var layer = new google.maps.FusionTablesLayer(options);

		  		for (var eventName in events) {
		  			google.maps.event.addListener(layer, eventName, events[eventName]);
		  		}

		  		return layer;
		  	};

		  	return {
		  		restrict: 'E',
		  		require: ['?^map', '?^ngMap'],

		  		link: function (scope, element, attrs, mapController) {
		  			mapController = mapController[0] || mapController[1];

		  			var filtered = parser.filter(attrs);
		  			var options = parser.getOptions(filtered, { scope: scope });
		  			var events = parser.getEvents(scope, filtered, events);
		  			void 0;

		  			var layer = getLayer(options, events);
		  			mapController.addObject('fusionTablesLayers', layer);
		  		}
		  	}; // return
		  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name heatmap-layer
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 *
	 * <map zoom="11" center="[41.875696,-87.624207]">
	 *   <heatmap-layer data="taxiData"></heatmap-layer>
	 * </map>
	 */
	(function () {
		'use strict';

		angular.module('ngMap').directive('heatmapLayer', [
		  'Attr2MapOptions', '$window', function (Attr2MapOptions, $window) {
		  	var parser = Attr2MapOptions;
		  	return {
		  		restrict: 'E',
		  		require: ['?^map', '?^ngMap'],

		  		link: function (scope, element, attrs, mapController) {
		  			mapController = mapController[0] || mapController[1];

		  			var filtered = parser.filter(attrs);

		  			/**
					 * set options
					 */
		  			var options = parser.getOptions(filtered, { scope: scope });
		  			options.data = $window[attrs.data] || scope[attrs.data];
		  			if (options.data instanceof Array) {
		  				options.data = new google.maps.MVCArray(options.data);
		  			} else {
		  				throw "invalid heatmap data";
		  			}
		  			var layer = new google.maps.visualization.HeatmapLayer(options);

		  			/**
					 * set events
					 */
		  			var events = parser.getEvents(scope, filtered);
		  			void 0;

		  			mapController.addObject('heatmapLayers', layer);
		  		}
		  	}; // return
		  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name info-window
	 * @param Attr2MapOptions {service}
	 *   convert html attribute to Gogole map api options
	 * @param $compile {service} $compile service
	 * @description
	 *  Defines infoWindow and provides compile method
	 *
	 *  Requires:  map directive
	 *
	 *  Restrict To:  Element
	 *
	 *  NOTE: this directive should **NOT** be used with `ng-repeat`
	 *  because InfoWindow itself is a template, and a template must be
	 *  reused by each marker, thus, should not be redefined repeatedly
	 *  by `ng-repeat`.
	 *
	 * @attr {Boolean} visible
	 *   Indicates to show it when map is initialized
	 * @attr {Boolean} visible-on-marker
	 *   Indicates to show it on a marker when map is initialized
	 * @attr {Expression} geo-callback
	 *   if position is an address, the expression is will be performed
	 *   when geo-lookup is successful. e.g., geo-callback="showDetail()"
	 * @attr {String} &lt;InfoWindowOption> Any InfoWindow options,
	 *   https://developers.google.com/maps/documentation/javascript/reference?csw=1#InfoWindowOptions
	 * @attr {String} &lt;InfoWindowEvent> Any InfoWindow events,
	 *   https://developers.google.com/maps/documentation/javascript/reference
	 * @example
	 * Usage:
	 *   <map MAP_ATTRIBUTES>
	 *    <info-window id="foo" ANY_OPTIONS ANY_EVENTS"></info-window>
	 *   </map>
	 *
	 * Example:
	 *  <map center="41.850033,-87.6500523" zoom="3">
	 *    <info-window id="1" position="41.850033,-87.6500523" >
	 *      <div ng-non-bindable>
	 *        Chicago, IL<br/>
	 *        LatLng: {{chicago.lat()}}, {{chicago.lng()}}, <br/>
	 *        World Coordinate: {{worldCoordinate.x}}, {{worldCoordinate.y}}, <br/>
	 *        Pixel Coordinate: {{pixelCoordinate.x}}, {{pixelCoordinate.y}}, <br/>
	 *        Tile Coordinate: {{tileCoordinate.x}}, {{tileCoordinate.y}} at Zoom Level {{map.getZoom()}}
	 *      </div>
	 *    </info-window>
	 *  </map>
	 */
	/* global google */
	(function () {
		'use strict';

		var infoWindow = function (Attr2MapOptions, $compile, $q, $templateRequest, $timeout, $parse, NgMap) {
			var parser = Attr2MapOptions;

			var getInfoWindow = function (options, events, element) {
				var infoWindow;

				/**
				 * set options
				 */
				if (options.position && !(options.position instanceof google.maps.LatLng)) {
					delete options.position;
				}
				infoWindow = new google.maps.InfoWindow(options);

				/**
				 * set events
				 */
				for (var eventName in events) {
					if (eventName) {
						google.maps.event.addListener(infoWindow, eventName, events[eventName]);
					}
				}

				/**
				 * set template and template-related functions
				 * it must have a container element with ng-non-bindable
				 */
				var templatePromise = $q(function (resolve) {
					if (angular.isString(element)) {
						$templateRequest(element).then(function (requestedTemplate) {
							resolve(angular.element(requestedTemplate).wrap('<div>').parent());
						}, function (message) {
							throw "info-window template request failed: " + message;
						});
					}
					else {
						resolve(element);
					}
				}).then(function (resolvedTemplate) {
					var template = resolvedTemplate.html().trim();
					if (angular.element(template).length != 1) {
						throw "info-window working as a template must have a container";
					}
					infoWindow.__template = template.replace(/\s?ng-non-bindable[='"]+/, "");
				});

				infoWindow.__open = function (map, scope, anchor) {
					templatePromise.then(function () {
						$timeout(function () {
							anchor && (scope.anchor = anchor);
							var el = $compile(infoWindow.__template)(scope);
							infoWindow.setContent(el[0]);
							scope.$apply();
							if (anchor && anchor.getPosition) {
								infoWindow.open(map, anchor);
							} else if (anchor && anchor instanceof google.maps.LatLng) {
								infoWindow.open(map);
								infoWindow.setPosition(anchor);
							} else {
								infoWindow.open(map);
							}
							var infoWindowContainerEl = infoWindow.content.parentElement.parentElement.parentElement;
							infoWindowContainerEl.className = "ng-map-info-window";
						});
					});
				};

				return infoWindow;
			};

			var linkFunc = function (scope, element, attrs, mapController) {
				mapController = mapController[0] || mapController[1];

				element.css('display', 'none');

				var orgAttrs = parser.orgAttributes(element);
				var filtered = parser.filter(attrs);
				var options = parser.getOptions(filtered, { scope: scope });
				var events = parser.getEvents(scope, filtered);

				var infoWindow = getInfoWindow(options, events, options.template || element);
				var address;
				if (options.position && !(options.position instanceof google.maps.LatLng)) {
					address = options.position;
				}
				if (address) {
					NgMap.getGeoLocation(address).then(function (latlng) {
						infoWindow.setPosition(latlng);
						infoWindow.__open(mapController.map, scope, latlng);
						var geoCallback = attrs.geoCallback;
						geoCallback && $parse(geoCallback)(scope);
					});
				}

				mapController.addObject('infoWindows', infoWindow);
				mapController.observeAttrSetObj(orgAttrs, attrs, infoWindow);

				mapController.showInfoWindow =
				mapController.map.showInfoWindow = mapController.showInfoWindow ||
				  function (p1, p2, p3) { //event, id, marker
				  	var id = typeof p1 == 'string' ? p1 : p2;
				  	var marker = typeof p1 == 'string' ? p2 : p3;
				  	if (typeof marker == 'string') {
				  		//Check if markers if defined to avoid odd 'undefined' errors
				  		if (typeof mapController.map.markers != "undefined"
							&& typeof mapController.map.markers[marker] != "undefined") {
				  			marker = mapController.map.markers[marker];
				  		} else if (
				  			//additionally check if that marker is a custom marker
						typeof mapController.map.customMarkers
						&& typeof mapController.map.customMarkers[marker] != "undefined") {
				  			marker = mapController.map.customMarkers[marker];
				  		} else {
				  			//Better error output if marker with that id is not defined
				  			throw new Error("Cant open info window for id " + marker + ". Marker or CustomMarker is not defined")
				  		}
				  	}

				  	var infoWindow = mapController.map.infoWindows[id];
				  	var anchor = marker ? marker : (this.getPosition ? this : null);
				  	infoWindow.__open(mapController.map, scope, anchor);
				  	if (mapController.singleInfoWindow) {
				  		if (mapController.lastInfoWindow) {
				  			scope.hideInfoWindow(mapController.lastInfoWindow);
				  		}
				  		mapController.lastInfoWindow = id;
				  	}
				  };

				mapController.hideInfoWindow =
				mapController.map.hideInfoWindow = mapController.hideInfoWindow ||
				  function (p1, p2) {
				  	var id = typeof p1 == 'string' ? p1 : p2;
				  	var infoWindow = mapController.map.infoWindows[id];
				  	infoWindow.close();
				  };

				//TODO DEPRECATED
				scope.showInfoWindow = mapController.map.showInfoWindow;
				scope.hideInfoWindow = mapController.map.hideInfoWindow;

				var map = infoWindow.mapId ? { id: infoWindow.mapId } : 0;
				NgMap.getMap(map).then(function (map) {
					infoWindow.visible && infoWindow.__open(map, scope);
					if (infoWindow.visibleOnMarker) {
						var markerId = infoWindow.visibleOnMarker;
						infoWindow.__open(map, scope, map.markers[markerId]);
					}
				});

			}; //link

			return {
				restrict: 'E',
				require: ['?^map', '?^ngMap'],
				link: linkFunc
			};

		}; // infoWindow
		infoWindow.$inject =
		  ['Attr2MapOptions', '$compile', '$q', '$templateRequest', '$timeout', '$parse', 'NgMap'];

		angular.module('ngMap').directive('infoWindow', infoWindow);
	})();

	/**
	 * @ngdoc directive
	 * @name kml-layer
	 * @param Attr2MapOptions {service} convert html attribute to Gogole map api options
	 * @description
	 *   renders Kml layer on a map
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @attr {Url} url url of the kml layer
	 * @attr {KmlLayerOptions} KmlLayerOptions
	 *   (https://developers.google.com/maps/documentation/javascript/reference#KmlLayerOptions) 
	 * @attr {String} &lt;KmlLayerEvent> Any KmlLayer events,
	 *   https://developers.google.com/maps/documentation/javascript/reference
	 * @example
	 * Usage:
	 *   <map MAP_ATTRIBUTES>
	 *    <kml-layer ANY_KML_LAYER ANY_KML_LAYER_EVENTS"></kml-layer>
	 *   </map>
	 *
	 * Example:
	 *
	 * <map zoom="11" center="[41.875696,-87.624207]">
	 *   <kml-layer url="https://gmaps-samples.googlecode.com/svn/trunk/ggeoxml/cta.kml" >
	 *   </kml-layer>
	 * </map>
	 */
	(function () {
		'use strict';

		angular.module('ngMap').directive('kmlLayer', [
		  'Attr2MapOptions', function (Attr2MapOptions) {
		  	var parser = Attr2MapOptions;

		  	var getKmlLayer = function (options, events) {
		  		var kmlLayer = new google.maps.KmlLayer(options);
		  		for (var eventName in events) {
		  			google.maps.event.addListener(kmlLayer, eventName, events[eventName]);
		  		}
		  		return kmlLayer;
		  	};

		  	return {
		  		restrict: 'E',
		  		require: ['?^map', '?^ngMap'],

		  		link: function (scope, element, attrs, mapController) {
		  			mapController = mapController[0] || mapController[1];

		  			var orgAttrs = parser.orgAttributes(element);
		  			var filtered = parser.filter(attrs);
		  			var options = parser.getOptions(filtered, { scope: scope });
		  			var events = parser.getEvents(scope, filtered);
		  			void 0;

		  			var kmlLayer = getKmlLayer(options, events);
		  			mapController.addObject('kmlLayers', kmlLayer);
		  			mapController.observeAttrSetObj(orgAttrs, attrs, kmlLayer);  //observers
		  			element.bind('$destroy', function () {
		  				mapController.deleteObject('kmlLayers', kmlLayer);
		  			});
		  		}
		  	}; // return
		  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name map-data
	 * @param Attr2MapOptions {service}
	 *   convert html attribute to Gogole map api options
	 * @description
	 *   set map data
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @wn {String} method-name, run map.data[method-name] with attribute value
	 * @example
	 * Example:
	 *
	 *  <map zoom="11" center="[41.875696,-87.624207]">
	 *    <map-data load-geo-json="https://storage.googleapis.com/maps-devrel/google.json"></map-data>
	 *   </map>
	 */
	(function () {
		'use strict';

		angular.module('ngMap').directive('mapData', [
		  'Attr2MapOptions', 'NgMap', function (Attr2MapOptions, NgMap) {
		  	var parser = Attr2MapOptions;
		  	return {
		  		restrict: 'E',
		  		require: ['?^map', '?^ngMap'],

		  		link: function (scope, element, attrs) {
		  			var filtered = parser.filter(attrs);
		  			var options = parser.getOptions(filtered, { scope: scope });
		  			var events = parser.getEvents(scope, filtered, events);

		  			void 0;
		  			NgMap.getMap().then(function (map) {
		  				//options
		  				for (var key in options) {
		  					var val = options[key];
		  					if (typeof scope[val] === "function") {
		  						map.data[key](scope[val]);
		  					} else {
		  						map.data[key](val);
		  					}
		  				}

		  				//events
		  				for (var eventName in events) {
		  					map.data.addListener(eventName, events[eventName]);
		  				}
		  			});
		  		}
		  	}; // return
		  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name map-lazy-load
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @description
	 *  Requires: Delay the initialization of map directive
	 *    until the map is ready to be rendered
	 *  Restrict To: Attribute
	 *
	 * @attr {String} map-lazy-load
	 *    Maps api script source file location.
	 *    Example:
	 *      'https://maps.google.com/maps/api/js'
	 * @attr {String} map-lazy-load-params
	 *   Maps api script source file location via angular scope variable.
	 *   Also requires the map-lazy-load attribute to be present in the directive.
	 *   Example: In your controller, set
	 *     $scope.googleMapsURL = 'https://maps.google.com/maps/api/js?v=3.20&client=XXXXXenter-api-key-hereXXXX'
	 *
	 * @example
	 * Example:
	 *
	 *   <div map-lazy-load="http://maps.google.com/maps/api/js">
	 *     <map center="Brampton" zoom="10">
	 *       <marker position="Brampton"></marker>
	 *     </map>
	 *   </div>
	 *
	 *   <div map-lazy-load="http://maps.google.com/maps/api/js"
	 *        map-lazy-load-params="{{googleMapsUrl}}">
	 *     <map center="Brampton" zoom="10">
	 *       <marker position="Brampton"></marker>
	 *     </map>
	 *   </div>
	 */
	/* global window, document */
	(function () {
		'use strict';
		var $timeout, $compile, src, savedHtml = [], elements = [];

		var preLinkFunc = function (scope, element, attrs) {
			var mapsUrl = attrs.mapLazyLoadParams || attrs.mapLazyLoad;

			if (window.google === undefined || window.google.maps === undefined) {
				elements.push({
					scope: scope,
					element: element,
					savedHtml: savedHtml[elements.length],
				});

				window.lazyLoadCallback = function () {
					void 0;
					$timeout(function () { /* give some time to load */
						elements.forEach(function (elm) {
							elm.element.html(elm.savedHtml);
							$compile(elm.element.contents())(elm.scope);
						});
					}, 100);
				};

				var scriptEl = document.createElement('script');
				void 0;

				scriptEl.src = mapsUrl +
				  (mapsUrl.indexOf('?') > -1 ? '&' : '?') +
				  'callback=lazyLoadCallback';

				if (!document.querySelector('script[src="' + scriptEl.src + '"]')) {
					document.body.appendChild(scriptEl);
				}
			} else {
				element.html(savedHtml);
				$compile(element.contents())(scope);
			}
		};

		var compileFunc = function (tElement, tAttrs) {

			(!tAttrs.mapLazyLoad) && void 0;
			savedHtml.push(tElement.html());
			src = tAttrs.mapLazyLoad;

			/**
			 * if already loaded, stop processing it
			 */
			if (window.google !== undefined && window.google.maps !== undefined) {
				return false;
			}

			tElement.html('');  // will compile again after script is loaded

			return {
				pre: preLinkFunc
			};
		};

		var mapLazyLoad = function (_$compile_, _$timeout_) {
			$compile = _$compile_, $timeout = _$timeout_;
			return {
				compile: compileFunc
			};
		};
		mapLazyLoad.$inject = ['$compile', '$timeout'];

		angular.module('ngMap').directive('mapLazyLoad', mapLazyLoad);
	})();

	/**
	 * @ngdoc directive
	 * @name map-type
	 * @param Attr2MapOptions {service} 
	 *   convert html attribute to Google map api options
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *
	 *   <map zoom="13" center="34.04924594193164, -118.24104309082031">
	 *     <map-type name="coordinate" object="coordinateMapType"></map-type>
	 *   </map>
	 */
	(function () {
		'use strict';

		angular.module('ngMap').directive('mapType', ['$parse', 'NgMap',
		  function ($parse, NgMap) {

		  	return {
		  		restrict: 'E',
		  		require: ['?^map', '?^ngMap'],

		  		link: function (scope, element, attrs, mapController) {
		  			mapController = mapController[0] || mapController[1];

		  			var mapTypeName = attrs.name, mapTypeObject;
		  			if (!mapTypeName) {
		  				throw "invalid map-type name";
		  			}
		  			mapTypeObject = $parse(attrs.object)(scope);
		  			if (!mapTypeObject) {
		  				throw "invalid map-type object";
		  			}

		  			NgMap.getMap().then(function (map) {
		  				map.mapTypes.set(mapTypeName, mapTypeObject);
		  			});
		  			mapController.addObject('mapTypes', mapTypeObject);
		  		}
		  	}; // return
		  }]);
	})();

	/**
	 * @ngdoc directive
	 * @memberof ngMap
	 * @name ng-map
	 * @param Attr2Options {service}
	 *  convert html attribute to Gogole map api options
	 * @description
	 * Implementation of {@link __MapController}
	 * Initialize a Google map within a `<div>` tag
	 *   with given options and register events
	 *
	 * @attr {Expression} map-initialized
	 *   callback function when map is initialized
	 *   e.g., map-initialized="mycallback(map)"
	 * @attr {Expression} geo-callback if center is an address or current location,
	 *   the expression is will be executed when geo-lookup is successful.
	 *   e.g., geo-callback="showMyStoreInfo()"
	 * @attr {Array} geo-fallback-center
	 *   The center of map incase geolocation failed. i.e. [0,0]
	 * @attr {Object} geo-location-options
	 *  The navigator geolocation options.
	 *  e.g., { maximumAge: 3000, timeout: 5000, enableHighAccuracy: true }.
	 *  If none specified, { timeout: 5000 }.
	 *  If timeout not specified, timeout: 5000 added
	 * @attr {Boolean} zoom-to-include-markers
	 *  When true, map boundary will be changed automatially
	 *  to include all markers when initialized
	 * @attr {Boolean} default-style
	 *  When false, the default styling,
	 *  `display:block;height:300px`, will be ignored.
	 * @attr {String} &lt;MapOption> Any Google map options,
	 *  https://developers.google.com/maps/documentation/javascript/reference?csw=1#MapOptions
	 * @attr {String} &lt;MapEvent> Any Google map events,
	 *  https://rawgit.com/allenhwkim/angularjs-google-maps/master/build/map_events.html
	 * @attr {Boolean} single-info-window
	 *  When true the map will only display one info window at the time,
	 *  if not set or false,
	 *  everytime an info window is open it will be displayed with the othe one.
	 * @attr {Boolean} trigger-resize
	 *  Default to false.  Set to true to trigger resize of the map.  Needs to be done anytime you resize the map
	 * @example
	 * Usage:
	 *   <map MAP_OPTIONS_OR_MAP_EVENTS ..>
	 *     ... Any children directives
	 *   </map>
	 *
	 * Example:
	 *   <map center="[40.74, -74.18]" on-click="doThat()">
	 *   </map>
	 *
	 *   <map geo-fallback-center="[40.74, -74.18]" zoom-to-inlude-markers="true">
	 *   </map>
	 */
	(function () {
		'use strict';

		var mapDirective = function () {
			return {
				restrict: 'AE',
				controller: '__MapController',
				controllerAs: 'ngmap'
			};
		};

		angular.module('ngMap').directive('map', [mapDirective]);
		angular.module('ngMap').directive('ngMap', [mapDirective]);
	})();

	/**
	 * @ngdoc directive
	 * @name maps-engine-layer
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *  <map zoom="14" center="[59.322506, 18.010025]">
	 *    <maps-engine-layer layer-id="06673056454046135537-08896501997766553811">
	 *    </maps-engine-layer>
	 *  </map>
	 */
	(function () {
		'use strict';

		angular.module('ngMap').directive('mapsEngineLayer', ['Attr2MapOptions', function (Attr2MapOptions) {
			var parser = Attr2MapOptions;

			var getMapsEngineLayer = function (options, events) {
				var layer = new google.maps.visualization.MapsEngineLayer(options);

				for (var eventName in events) {
					google.maps.event.addListener(layer, eventName, events[eventName]);
				}

				return layer;
			};

			return {
				restrict: 'E',
				require: ['?^map', '?^ngMap'],

				link: function (scope, element, attrs, mapController) {
					mapController = mapController[0] || mapController[1];

					var filtered = parser.filter(attrs);
					var options = parser.getOptions(filtered, { scope: scope });
					var events = parser.getEvents(scope, filtered, events);
					void 0;

					var layer = getMapsEngineLayer(options, events);
					mapController.addObject('mapsEngineLayers', layer);
				}
			}; // return
		}]);
	})();

	/**
	 * @ngdoc directive
	 * @name marker
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @param NavigatorGeolocation It is used to find the current location
	 * @description
	 *  Draw a Google map marker on a map with given options and register events
	 *
	 *  Requires:  map directive
	 *
	 *  Restrict To:  Element
	 *
	 * @attr {String} position address, 'current', or [latitude, longitude]
	 *  example:
	 *    '1600 Pennsylvania Ave, 20500  Washingtion DC',
	 *    'current position',
	 *    '[40.74, -74.18]'
	 * @attr {Boolean} centered if set, map will be centered with this marker
	 * @attr {Expression} geo-callback if position is an address,
	 *   the expression is will be performed when geo-lookup is successful.
	 *   e.g., geo-callback="showStoreInfo()"
	 * @attr {Boolean} no-watcher if true, no attribute observer is added.
	 *   Useful for many ng-repeat
	 * @attr {String} &lt;MarkerOption>
	 *   [Any Marker options](https://developers.google.com/maps/documentation/javascript/reference?csw=1#MarkerOptions)
	 * @attr {String} &lt;MapEvent>
	 *   [Any Marker events](https://developers.google.com/maps/documentation/javascript/reference)
	 * @example
	 * Usage:
	 *   <map MAP_ATTRIBUTES>
	 *    <marker ANY_MARKER_OPTIONS ANY_MARKER_EVENTS"></MARKER>
	 *   </map>
	 *
	 * Example:
	 *   <map center="[40.74, -74.18]">
	 *    <marker position="[40.74, -74.18]" on-click="myfunc()"></div>
	 *   </map>
	 *
	 *   <map center="the cn tower">
	 *    <marker position="the cn tower" on-click="myfunc()"></div>
	 *   </map>
	 */
	/* global google */
	(function () {
		'use strict';
		var parser, $parse, NgMap;

		var getMarker = function (options, events) {
			var marker;

			if (NgMap.defaultOptions.marker) {
				for (var key in NgMap.defaultOptions.marker) {
					if (typeof options[key] == 'undefined') {
						void 0;
						options[key] = NgMap.defaultOptions.marker[key];
					}
				}
			}

			if (!(options.position instanceof google.maps.LatLng)) {
				options.position = new google.maps.LatLng(0, 0);
			}
			marker = new google.maps.Marker(options);

			/**
			 * set events
			 */
			if (Object.keys(events).length > 0) {
				void 0;
			}
			for (var eventName in events) {
				if (eventName) {
					google.maps.event.addListener(marker, eventName, events[eventName]);
				}
			}

			return marker;
		};

		var linkFunc = function (scope, element, attrs, mapController) {
			mapController = mapController[0] || mapController[1];

			var orgAttrs = parser.orgAttributes(element);
			var filtered = parser.filter(attrs);
			var markerOptions = parser.getOptions(filtered, scope, { scope: scope });
			var markerEvents = parser.getEvents(scope, filtered);
			void 0;

			var address;
			if (!(markerOptions.position instanceof google.maps.LatLng)) {
				address = markerOptions.position;
			}
			var marker = getMarker(markerOptions, markerEvents);
			mapController.addObject('markers', marker);
			if (address) {
				NgMap.getGeoLocation(address).then(function (latlng) {
					marker.setPosition(latlng);
					markerOptions.centered && marker.map.setCenter(latlng);
					var geoCallback = attrs.geoCallback;
					geoCallback && $parse(geoCallback)(scope);
				});
			}

			//set observers
			mapController.observeAttrSetObj(orgAttrs, attrs, marker); /* observers */

			element.bind('$destroy', function () {
				mapController.deleteObject('markers', marker);
			});
		};

		var marker = function (Attr2MapOptions, _$parse_, _NgMap_) {
			parser = Attr2MapOptions;
			$parse = _$parse_;
			NgMap = _NgMap_;

			return {
				restrict: 'E',
				require: ['^?map', '?^ngMap'],
				link: linkFunc
			};
		};

		marker.$inject = ['Attr2MapOptions', '$parse', 'NgMap'];
		angular.module('ngMap').directive('marker', marker);

	})();

	/**
	 * @ngdoc directive
	 * @name overlay-map-type
	 * @param Attr2MapOptions {service} convert html attribute to Gogole map api options
	 * @param $window {service}
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *
	 * <map zoom="13" center="34.04924594193164, -118.24104309082031">
	 *   <overlay-map-type index="0" object="coordinateMapType"></map-type>
	 * </map>
	 */
	(function () {
		'use strict';

		angular.module('ngMap').directive('overlayMapType', [
		  'NgMap', function (NgMap) {

		  	return {
		  		restrict: 'E',
		  		require: ['?^map', '?^ngMap'],

		  		link: function (scope, element, attrs, mapController) {
		  			mapController = mapController[0] || mapController[1];

		  			var initMethod = attrs.initMethod || "insertAt";
		  			var overlayMapTypeObject = scope[attrs.object];

		  			NgMap.getMap().then(function (map) {
		  				if (initMethod == "insertAt") {
		  					var index = parseInt(attrs.index, 10);
		  					map.overlayMapTypes.insertAt(index, overlayMapTypeObject);
		  				} else if (initMethod == "push") {
		  					map.overlayMapTypes.push(overlayMapTypeObject);
		  				}
		  			});
		  			mapController.addObject('overlayMapTypes', overlayMapTypeObject);
		  		}
		  	}; // return
		  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name places-auto-complete
	 * @param Attr2MapOptions {service} convert html attribute to Gogole map api options
	 * @description
	 *   Provides address auto complete feature to an input element
	 *   Requires: input tag
	 *   Restrict To: Attribute
	 *
	 * @attr {AutoCompleteOptions}
	 *   [Any AutocompleteOptions](https://developers.google.com/maps/documentation/javascript/3.exp/reference#AutocompleteOptions)
	 *
	 * @example
	 * Example:
	 *   <script src="https://maps.googleapis.com/maps/api/js?libraries=places"></script>
	 *   <input places-auto-complete types="['geocode']" on-place-changed="myCallback(place)" component-restrictions="{country:'au'}"/>
	 */
	/* global google */
	(function () {
		'use strict';

		var placesAutoComplete = function (Attr2MapOptions, $timeout) {
			var parser = Attr2MapOptions;

			var linkFunc = function (scope, element, attrs, ngModelCtrl) {
				if (attrs.placesAutoComplete === 'false') {
					return false;
				}
				var filtered = parser.filter(attrs);
				var options = parser.getOptions(filtered, { scope: scope });
				var events = parser.getEvents(scope, filtered);
				var autocomplete = new google.maps.places.Autocomplete(element[0], options);
				for (var eventName in events) {
					google.maps.event.addListener(autocomplete, eventName, events[eventName]);
				}

				var updateModel = function () {
					$timeout(function () {
						ngModelCtrl && ngModelCtrl.$setViewValue(element.val());
					}, 100);
				};
				google.maps.event.addListener(autocomplete, 'place_changed', updateModel);
				element[0].addEventListener('change', updateModel);

				attrs.$observe('types', function (val) {
					if (val) {
						var optionValue = parser.toOptionValue(val, { key: 'types' });
						autocomplete.setTypes(optionValue);
					}
				});

				attrs.$observe('componentRestrictions', function (val) {
					if (val) {
						autocomplete.setComponentRestrictions(scope.$eval(val));
					}
				});
			};

			return {
				restrict: 'A',
				require: '?ngModel',
				link: linkFunc
			};
		};

		placesAutoComplete.$inject = ['Attr2MapOptions', '$timeout'];
		angular.module('ngMap').directive('placesAutoComplete', placesAutoComplete);
	})();

	/**
	 * @ngdoc directive
	 * @name shape
	 * @param Attr2MapOptions {service} convert html attribute to Gogole map api options
	 * @description
	 *   Initialize a Google map shape in map with given options and register events
	 *   The shapes are:
	 *     . circle
	 *     . polygon
	 *     . polyline
	 *     . rectangle
	 *     . groundOverlay(or image)
	 *
	 *   Requires:  map directive
	 *
	 *   Restrict To:  Element
	 *
	 * @attr {Boolean} centered if set, map will be centered with this marker
	 * @attr {Expression} geo-callback if shape is a circle and the center is
	 *   an address, the expression is will be performed when geo-lookup
	 *   is successful. e.g., geo-callback="showDetail()"
	 * @attr {String} &lt;OPTIONS>
	 *   For circle, [any circle options](https://developers.google.com/maps/documentation/javascript/reference#CircleOptions)
	 *   For polygon, [any polygon options](https://developers.google.com/maps/documentation/javascript/reference#PolygonOptions)
	 *   For polyline, [any polyline options](https://developers.google.com/maps/documentation/javascript/reference#PolylineOptions)
	 *   For rectangle, [any rectangle options](https://developers.google.com/maps/documentation/javascript/reference#RectangleOptions)
	 *   For image, [any groundOverlay options](https://developers.google.com/maps/documentation/javascript/reference#GroundOverlayOptions)
	 * @attr {String} &lt;MapEvent> [Any Shape events](https://developers.google.com/maps/documentation/javascript/reference)
	 * @example
	 * Usage:
	 *   <map MAP_ATTRIBUTES>
	 *    <shape name=SHAPE_NAME ANY_SHAPE_OPTIONS ANY_SHAPE_EVENTS"></MARKER>
	 *   </map>
	 *
	 * Example:
	 *
	 *   <map zoom="11" center="[40.74, -74.18]">
	 *     <shape id="polyline" name="polyline" geodesic="true"
	 *       stroke-color="#FF0000" stroke-opacity="1.0" stroke-weight="2"
	 *       path="[[40.74,-74.18],[40.64,-74.10],[40.54,-74.05],[40.44,-74]]" >
	 *     </shape>
	 *   </map>
	 *
	 *   <map zoom="11" center="[40.74, -74.18]">
	 *     <shape id="polygon" name="polygon" stroke-color="#FF0000"
	 *       stroke-opacity="1.0" stroke-weight="2"
	 *       paths="[[40.74,-74.18],[40.64,-74.18],[40.84,-74.08],[40.74,-74.18]]" >
	 *     </shape>
	 *   </map>
	 *
	 *   <map zoom="11" center="[40.74, -74.18]">
	 *     <shape id="rectangle" name="rectangle" stroke-color='#FF0000'
	 *       stroke-opacity="0.8" stroke-weight="2"
	 *       bounds="[[40.74,-74.18], [40.78,-74.14]]" editable="true" >
	 *     </shape>
	 *   </map>
	 *
	 *   <map zoom="11" center="[40.74, -74.18]">
	 *     <shape id="circle" name="circle" stroke-color='#FF0000'
	 *       stroke-opacity="0.8"stroke-weight="2"
	 *       center="[40.70,-74.14]" radius="4000" editable="true" >
	 *     </shape>
	 *   </map>
	 *
	 *   <map zoom="11" center="[40.74, -74.18]">
	 *     <shape id="image" name="image"
	 *       url="https://www.lib.utexas.edu/maps/historical/newark_nj_1922.jpg"
	 *       bounds="[[40.71,-74.22],[40.77,-74.12]]" opacity="0.7"
	 *       clickable="true">
	 *     </shape>
	 *   </map>
	 *
	 *  For full-working example, please visit
	 *    [shape example](https://rawgit.com/allenhwkim/angularjs-google-maps/master/build/shape.html)
	 */
	/* global google */
	(function () {
		'use strict';

		var getShape = function (options, events) {
			var shape;

			var shapeName = options.name;
			delete options.name;  //remove name bcoz it's not for options
			void 0;

			/**
			 * set options
			 */
			switch (shapeName) {
				case "circle":
					if (!(options.center instanceof google.maps.LatLng)) {
						options.center = new google.maps.LatLng(0, 0);
					}
					shape = new google.maps.Circle(options);
					break;
				case "polygon":
					shape = new google.maps.Polygon(options);
					break;
				case "polyline":
					shape = new google.maps.Polyline(options);
					break;
				case "rectangle":
					shape = new google.maps.Rectangle(options);
					break;
				case "groundOverlay":
				case "image":
					var url = options.url;
					var opts = { opacity: options.opacity, clickable: options.clickable, id: options.id };
					shape = new google.maps.GroundOverlay(url, options.bounds, opts);
					break;
			}

			/**
			 * set events
			 */
			for (var eventName in events) {
				if (events[eventName]) {
					google.maps.event.addListener(shape, eventName, events[eventName]);
				}
			}
			return shape;
		};

		var shape = function (Attr2MapOptions, $parse, NgMap) {
			var parser = Attr2MapOptions;

			var linkFunc = function (scope, element, attrs, mapController) {
				mapController = mapController[0] || mapController[1];

				var orgAttrs = parser.orgAttributes(element);
				var filtered = parser.filter(attrs);
				var shapeOptions = parser.getOptions(filtered, { scope: scope });
				var shapeEvents = parser.getEvents(scope, filtered);

				var address, shapeType;
				shapeType = shapeOptions.name;
				if (!(shapeOptions.center instanceof google.maps.LatLng)) {
					address = shapeOptions.center;
				}
				var shape = getShape(shapeOptions, shapeEvents);
				mapController.addObject('shapes', shape);

				if (address && shapeType == 'circle') {
					NgMap.getGeoLocation(address).then(function (latlng) {
						shape.setCenter(latlng);
						shape.centered && shape.map.setCenter(latlng);
						var geoCallback = attrs.geoCallback;
						geoCallback && $parse(geoCallback)(scope);
					});
				}

				//set observers
				mapController.observeAttrSetObj(orgAttrs, attrs, shape);
				element.bind('$destroy', function () {
					mapController.deleteObject('shapes', shape);
				});
			};

			return {
				restrict: 'E',
				require: ['?^map', '?^ngMap'],
				link: linkFunc
			}; // return
		};
		shape.$inject = ['Attr2MapOptions', '$parse', 'NgMap'];

		angular.module('ngMap').directive('shape', shape);

	})();

	/**
	 * @ngdoc directive
	 * @name streetview-panorama
	 * @param Attr2MapOptions {service} convert html attribute to Gogole map api options
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @attr container Optional, id or css selector, if given, streetview will be in the given html element
	 * @attr {String} &lt;StreetViewPanoramaOption>
	 *   [Any Google StreetViewPanorama options](https://developers.google.com/maps/documentation/javascript/reference?csw=1#StreetViewPanoramaOptions)
	 * @attr {String} &lt;StreetViewPanoramaEvent>
	 *   [Any Google StreetViewPanorama events](https://developers.google.com/maps/documentation/javascript/reference#StreetViewPanorama)
	 *
	 * @example
	 *   <map zoom="11" center="[40.688738,-74.043871]" >
	 *     <street-view-panorama
	 *       click-to-go="true"
	 *       disable-default-ui="true"
	 *       disable-double-click-zoom="true"
	 *       enable-close-button="true"
	 *       pano="my-pano"
	 *       position="40.688738,-74.043871"
	 *       pov="{heading:0, pitch: 90}"
	 *       scrollwheel="false"
	 *       visible="true">
	 *     </street-view-panorama>
	 *   </map>
	 */
	/* global google, document */
	(function () {
		'use strict';

		var streetViewPanorama = function (Attr2MapOptions, NgMap) {
			var parser = Attr2MapOptions;

			var getStreetViewPanorama = function (map, options, events) {
				var svp, container;
				if (options.container) {
					container = document.getElementById(options.container);
					container = container || document.querySelector(options.container);
				}
				if (container) {
					svp = new google.maps.StreetViewPanorama(container, options);
				} else {
					svp = map.getStreetView();
					svp.setOptions(options);
				}

				for (var eventName in events) {
					eventName &&
					  google.maps.event.addListener(svp, eventName, events[eventName]);
				}
				return svp;
			};

			var linkFunc = function (scope, element, attrs) {
				var filtered = parser.filter(attrs);
				var options = parser.getOptions(filtered, { scope: scope });
				var controlOptions = parser.getControlOptions(filtered);
				var svpOptions = angular.extend(options, controlOptions);

				var svpEvents = parser.getEvents(scope, filtered);
				void 0;

				NgMap.getMap().then(function (map) {
					var svp = getStreetViewPanorama(map, svpOptions, svpEvents);

					map.setStreetView(svp);
					(!svp.getPosition()) && svp.setPosition(map.getCenter());
					google.maps.event.addListener(svp, 'position_changed', function () {
						if (svp.getPosition() !== map.getCenter()) {
							map.setCenter(svp.getPosition());
						}
					});
					//needed for geo-callback
					var listener =
					  google.maps.event.addListener(map, 'center_changed', function () {
					  	svp.setPosition(map.getCenter());
					  	google.maps.event.removeListener(listener);
					  });
				});

			}; //link

			return {
				restrict: 'E',
				require: ['?^map', '?^ngMap'],
				link: linkFunc
			};

		};
		streetViewPanorama.$inject = ['Attr2MapOptions', 'NgMap'];

		angular.module('ngMap').directive('streetViewPanorama', streetViewPanorama);
	})();

	/**
	 * @ngdoc directive
	 * @name traffic-layer
	 * @param Attr2MapOptions {service} convert html attribute to Gogole map api options
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *
	 *   <map zoom="13" center="34.04924594193164, -118.24104309082031">
	 *     <traffic-layer></traffic-layer>
	 *    </map>
	 */
	(function () {
		'use strict';

		angular.module('ngMap').directive('trafficLayer', [
		  'Attr2MapOptions', function (Attr2MapOptions) {
		  	var parser = Attr2MapOptions;

		  	var getLayer = function (options, events) {
		  		var layer = new google.maps.TrafficLayer(options);
		  		for (var eventName in events) {
		  			google.maps.event.addListener(layer, eventName, events[eventName]);
		  		}
		  		return layer;
		  	};

		  	return {
		  		restrict: 'E',
		  		require: ['?^map', '?^ngMap'],

		  		link: function (scope, element, attrs, mapController) {
		  			mapController = mapController[0] || mapController[1];

		  			var orgAttrs = parser.orgAttributes(element);
		  			var filtered = parser.filter(attrs);
		  			var options = parser.getOptions(filtered, { scope: scope });
		  			var events = parser.getEvents(scope, filtered);
		  			void 0;

		  			var layer = getLayer(options, events);
		  			mapController.addObject('trafficLayers', layer);
		  			mapController.observeAttrSetObj(orgAttrs, attrs, layer);  //observers
		  			element.bind('$destroy', function () {
		  				mapController.deleteObject('trafficLayers', layer);
		  			});
		  		}
		  	}; // return
		  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name transit-layer
	 * @param Attr2MapOptions {service} convert html attribute to Gogole map api options
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *
	 *  <map zoom="13" center="34.04924594193164, -118.24104309082031">
	 *    <transit-layer></transit-layer>
	 *  </map>
	 */
	(function () {
		'use strict';

		angular.module('ngMap').directive('transitLayer', [
		  'Attr2MapOptions', function (Attr2MapOptions) {
		  	var parser = Attr2MapOptions;

		  	var getLayer = function (options, events) {
		  		var layer = new google.maps.TransitLayer(options);
		  		for (var eventName in events) {
		  			google.maps.event.addListener(layer, eventName, events[eventName]);
		  		}
		  		return layer;
		  	};

		  	return {
		  		restrict: 'E',
		  		require: ['?^map', '?^ngMap'],

		  		link: function (scope, element, attrs, mapController) {
		  			mapController = mapController[0] || mapController[1];

		  			var orgAttrs = parser.orgAttributes(element);
		  			var filtered = parser.filter(attrs);
		  			var options = parser.getOptions(filtered, { scope: scope });
		  			var events = parser.getEvents(scope, filtered);
		  			void 0;

		  			var layer = getLayer(options, events);
		  			mapController.addObject('transitLayers', layer);
		  			mapController.observeAttrSetObj(orgAttrs, attrs, layer);  //observers
		  			element.bind('$destroy', function () {
		  				mapController.deleteObject('transitLayers', layer);
		  			});
		  		}
		  	}; // return
		  }]);
	})();

	/**
	 * @ngdoc filter
	 * @name camel-case
	 * @description
	 *   Converts string to camel cased
	 */
	(function () {
		'use strict';

		var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
		var MOZ_HACK_REGEXP = /^moz([A-Z])/;

		var camelCaseFilter = function () {
			return function (name) {
				return name.
				  replace(SPECIAL_CHARS_REGEXP,
					function (_, separator, letter, offset) {
						return offset ? letter.toUpperCase() : letter;
					}).
				  replace(MOZ_HACK_REGEXP, 'Moz$1');
			};
		};

		angular.module('ngMap').filter('camelCase', camelCaseFilter);
	})();

	/**
	 * @ngdoc filter
	 * @name jsonize
	 * @description
	 *   Converts json-like string to json string
	 */
	(function () {
		'use strict';

		var jsonizeFilter = function () {
			return function (str) {
				try {       // if parsable already, return as it is
					JSON.parse(str);
					return str;
				} catch (e) { // if not parsable, change little
					return str
					  // wrap keys without quote with valid double quote
					  .replace(/([\$\w]+)\s*:/g,
						function (_, $1) {
							return '"' + $1 + '":';
						}
					  )
					  // replacing single quote wrapped ones to double quote
					  .replace(/'([^']+)'/g,
						function (_, $1) {
							return '"' + $1 + '"';
						}
					  );
				}
			};
		};

		angular.module('ngMap').filter('jsonize', jsonizeFilter);
	})();

	/**
	 * @ngdoc service
	 * @name Attr2MapOptions
	 * @description
	 *   Converts tag attributes to options used by google api v3 objects
	 */
	/* global google */
	(function () {
		'use strict';

		//i.e. "2015-08-12T06:12:40.858Z"
		var isoDateRE =
		  /^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*)?)([zZ]|([+\-])(\d\d):?(\d\d))?$/;

		var Attr2MapOptions = function (
			$parse, $timeout, $log, NavigatorGeolocation, GeoCoder,
			camelCaseFilter, jsonizeFilter
		  ) {

			/**
			 * Returns the attributes of an element as hash
			 * @memberof Attr2MapOptions
			 * @param {HTMLElement} el html element
			 * @returns {Hash} attributes
			 */
			var orgAttributes = function (el) {
				(el.length > 0) && (el = el[0]);
				var orgAttributes = {};
				for (var i = 0; i < el.attributes.length; i++) {
					var attr = el.attributes[i];
					orgAttributes[attr.name] = attr.value;
				}
				return orgAttributes;
			};

			var getJSON = function (input) {
				var re = /^[\+\-]?[0-9\.]+,[ ]*\ ?[\+\-]?[0-9\.]+$/; //lat,lng
				if (input.match(re)) {
					input = "[" + input + "]";
				}
				return JSON.parse(jsonizeFilter(input));
			};

			var getLatLng = function (input) {
				var output = input;
				if (input[0].constructor == Array) { // [[1,2],[3,4]]
					output = input.map(function (el) {
						return new google.maps.LatLng(el[0], el[1]);
					});
				} else if (!isNaN(parseFloat(input[0])) && isFinite(input[0])) {
					output = new google.maps.LatLng(output[0], output[1]);
				}
				return output;
			};

			var toOptionValue = function (input, options) {
				var output;
				try { // 1. Number?
					output = getNumber(input);
				} catch (err) {
					try { // 2. JSON?
						var output = getJSON(input);
						if (output instanceof Array) {
							// [{a:1}] : not lat/lng ones
							if (output[0].constructor == Object) {
								output = output;
							} else { // [[1,2],[3,4]] or [1,2]
								output = getLatLng(output);
							}
						}
							// JSON is an object (not array or null)
						else if (output === Object(output)) {
							// check for nested hashes and convert to Google API options
							var newOptions = options;
							newOptions.doNotConverStringToNumber = true;
							output = getOptions(output, newOptions);
						}
					} catch (err2) {
						// 3. Google Map Object function Expression. i.e. LatLng(80,-49)
						if (input.match(/^[A-Z][a-zA-Z0-9]+\(.*\)$/)) {
							try {
								var exp = "new google.maps." + input;
								output = eval(exp); /* jshint ignore:line */
							} catch (e) {
								output = input;
							}
							// 4. Google Map Object constant Expression. i.e. MayTypeId.HYBRID
						} else if (input.match(/^([A-Z][a-zA-Z0-9]+)\.([A-Z]+)$/)) {
							try {
								var matches = input.match(/^([A-Z][a-zA-Z0-9]+)\.([A-Z]+)$/);
								output = google.maps[matches[1]][matches[2]];
							} catch (e) {
								output = input;
							}
							// 5. Google Map Object constant Expression. i.e. HYBRID
						} else if (input.match(/^[A-Z]+$/)) {
							try {
								var capitalizedKey = options.key.charAt(0).toUpperCase() +
								  options.key.slice(1);
								if (options.key.match(/temperatureUnit|windSpeedUnit|labelColor/)) {
									capitalizedKey = capitalizedKey.replace(/s$/, "");
									output = google.maps.weather[capitalizedKey][input];
								} else {
									output = google.maps[capitalizedKey][input];
								}
							} catch (e) {
								output = input;
							}
							// 6. Date Object as ISO String
						} else if (input.match(isoDateRE)) {
							try {
								output = new Date(input);
							} catch (e) {
								output = input;
							}
							// 7. evaluate dynamically bound values
						} else if (input.match(/^{/) && options.scope) {
							try {
								var expr = input.replace(/{{/, '').replace(/}}/g, '');
								output = options.scope.$eval(expr);
							} catch (err) {
								output = input;
							}
						} else {
							output = input;
						}
					} // catch(err2)
				} // catch(err)

				// convert output more for center and position
				if (
				  (options.key == 'center' || options.key == 'position') &&
				  output instanceof Array
				) {
					output = new google.maps.LatLng(output[0], output[1]);
				}

				// convert output more for shape bounds
				if (options.key == 'bounds' && output instanceof Array) {
					output = new google.maps.LatLngBounds(output[0], output[1]);
				}

				// convert output more for shape icons
				if (options.key == 'icons' && output instanceof Array) {

					for (var i = 0; i < output.length; i++) {
						var el = output[i];
						if (el.icon.path.match(/^[A-Z_]+$/)) {
							el.icon.path = google.maps.SymbolPath[el.icon.path];
						}
					}
				}

				// convert output more for marker icon
				if (options.key == 'icon' && output instanceof Object) {
					if (("" + output.path).match(/^[A-Z_]+$/)) {
						output.path = google.maps.SymbolPath[output.path];
					}
					for (var key in output) { //jshint ignore:line
						var arr = output[key];
						if (key == "anchor" || key == "origin" || key == "labelOrigin") {
							output[key] = new google.maps.Point(arr[0], arr[1]);
						} else if (key == "size" || key == "scaledSize") {
							output[key] = new google.maps.Size(arr[0], arr[1]);
						}
					}
				}

				return output;
			};

			var getAttrsToObserve = function (attrs) {
				var attrsToObserve = [];

				if (!attrs.noWatcher) {
					for (var attrName in attrs) { //jshint ignore:line
						var attrValue = attrs[attrName];
						if (attrValue && attrValue.match(/\{\{.*\}\}/)) { // if attr value is {{..}}
							attrsToObserve.push(camelCaseFilter(attrName));
						}
					}
				}

				return attrsToObserve;
			};

			/**
			 * filters attributes by skipping angularjs methods $.. $$..
			 * @memberof Attr2MapOptions
			 * @param {Hash} attrs tag attributes
			 * @returns {Hash} filterd attributes
			 */
			var filter = function (attrs) {
				var options = {};
				for (var key in attrs) {
					if (key.match(/^\$/) || key.match(/^ng[A-Z]/)) {
						void (0);
					} else {
						options[key] = attrs[key];
					}
				}
				return options;
			};

			/**
			 * converts attributes hash to Google Maps API v3 options
			 * ```
			 *  . converts numbers to number
			 *  . converts class-like string to google maps instance
			 *    i.e. `LatLng(1,1)` to `new google.maps.LatLng(1,1)`
			 *  . converts constant-like string to google maps constant
			 *    i.e. `MapTypeId.HYBRID` to `google.maps.MapTypeId.HYBRID`
			 *    i.e. `HYBRID"` to `google.maps.MapTypeId.HYBRID`
			 * ```
			 * @memberof Attr2MapOptions
			 * @param {Hash} attrs tag attributes
			 * @param {Hash} options
			 * @returns {Hash} options converted attributess
			 */
			var getOptions = function (attrs, params) {
				params = params || {};
				var options = {};
				for (var key in attrs) {
					if (attrs[key] || attrs[key] === 0) {
						if (key.match(/^on[A-Z]/)) { //skip events, i.e. on-click
							continue;
						} else if (key.match(/ControlOptions$/)) { // skip controlOptions
							continue;
						} else {
							// nested conversions need to be typechecked
							// (non-strings are fully converted)
							if (typeof attrs[key] !== 'string') {
								options[key] = attrs[key];
							} else {
								if (params.doNotConverStringToNumber &&
								  attrs[key].match(/^[0-9]+$/)
								) {
									options[key] = attrs[key];
								} else {
									options[key] = toOptionValue(attrs[key], { key: key, scope: params.scope });
								}
							}
						}
					} // if (attrs[key])
				} // for(var key in attrs)
				return options;
			};

			/**
			 * converts attributes hash to scope-specific event function 
			 * @memberof Attr2MapOptions
			 * @param {scope} scope angularjs scope
			 * @param {Hash} attrs tag attributes
			 * @returns {Hash} events converted events
			 */
			var getEvents = function (scope, attrs) {
				var events = {};
				var toLowercaseFunc = function ($1) {
					return "_" + $1.toLowerCase();
				};
				var EventFunc = function (attrValue) {
					// funcName(argsStr)
					var matches = attrValue.match(/([^\(]+)\(([^\)]*)\)/);
					var funcName = matches[1];
					var argsStr = matches[2].replace(/event[ ,]*/, '');  //remove string 'event'
					var argsExpr = $parse("[" + argsStr + "]"); //for perf when triggering event
					return function (event) {
						var args = argsExpr(scope); //get args here to pass updated model values
						function index(obj, i) { return obj[i]; }
						var f = funcName.split('.').reduce(index, scope);
						f && f.apply(this, [event].concat(args));
						$timeout(function () {
							scope.$apply();
						});
					};
				};

				for (var key in attrs) {
					if (attrs[key]) {
						if (!key.match(/^on[A-Z]/)) { //skip if not events
							continue;
						}

						//get event name as underscored. i.e. zoom_changed
						var eventName = key.replace(/^on/, '');
						eventName = eventName.charAt(0).toLowerCase() + eventName.slice(1);
						eventName = eventName.replace(/([A-Z])/g, toLowercaseFunc);

						var attrValue = attrs[key];
						events[eventName] = new EventFunc(attrValue);
					}
				}
				return events;
			};

			/**
			 * control means map controls, i.e streetview, pan, etc, not a general control
			 * @memberof Attr2MapOptions
			 * @param {Hash} filtered filtered tag attributes
			 * @returns {Hash} Google Map options
			 */
			var getControlOptions = function (filtered) {
				var controlOptions = {};
				if (typeof filtered != 'object') {
					return false;
				}

				for (var attr in filtered) {
					if (filtered[attr]) {
						if (!attr.match(/(.*)ControlOptions$/)) {
							continue; // if not controlOptions, skip it
						}

						//change invalid json to valid one, i.e. {foo:1} to {"foo": 1}
						var orgValue = filtered[attr];
						var newValue = orgValue.replace(/'/g, '"');
						newValue = newValue.replace(/([^"]+)|("[^"]+")/g, function ($0, $1, $2) {
							if ($1) {
								return $1.replace(/([a-zA-Z0-9]+?):/g, '"$1":');
							} else {
								return $2;
							}
						});
						try {
							var options = JSON.parse(newValue);
							for (var key in options) { //assign the right values
								if (options[key]) {
									var value = options[key];
									if (typeof value === 'string') {
										value = value.toUpperCase();
									} else if (key === "mapTypeIds") {
										value = value.map(function (str) {
											if (str.match(/^[A-Z]+$/)) { // if constant
												return google.maps.MapTypeId[str.toUpperCase()];
											} else { // else, custom map-type
												return str;
											}
										});
									}

									if (key === "style") {
										var str = attr.charAt(0).toUpperCase() + attr.slice(1);
										var objName = str.replace(/Options$/, '') + "Style";
										options[key] = google.maps[objName][value];
									} else if (key === "position") {
										options[key] = google.maps.ControlPosition[value];
									} else {
										options[key] = value;
									}
								}
							}
							controlOptions[attr] = options;
						} catch (e) {
							void 0;
						}
					}
				} // for

				return controlOptions;
			};

			return {
				filter: filter,
				getOptions: getOptions,
				getEvents: getEvents,
				getControlOptions: getControlOptions,
				toOptionValue: toOptionValue,
				getAttrsToObserve: getAttrsToObserve,
				orgAttributes: orgAttributes
			}; // return

		};
		Attr2MapOptions.$inject = [
		  '$parse', '$timeout', '$log', 'NavigatorGeolocation', 'GeoCoder',
		  'camelCaseFilter', 'jsonizeFilter'
		];

		angular.module('ngMap').service('Attr2MapOptions', Attr2MapOptions);
	})();

	/**
	 * @ngdoc service
	 * @name GeoCoder
	 * @description
	 *   Provides [defered/promise API](https://docs.angularjs.org/api/ng/service/$q)
	 *   service for Google Geocoder service
	 */
	(function () {
		'use strict';
		var $q;
		/**
		 * @memberof GeoCoder
		 * @param {Hash} options
		 *   https://developers.google.com/maps/documentation/geocoding/#geocoding
		 * @example
		 * ```
		 *   GeoCoder.geocode({address: 'the cn tower'}).then(function(result) {
		 *     //... do something with result
		 *   });
		 * ```
		 * @returns {HttpPromise} Future object
		 */
		var geocodeFunc = function (options) {
			var deferred = $q.defer();
			var geocoder = new google.maps.Geocoder();
			geocoder.geocode(options, function (results, status) {
				if (status == google.maps.GeocoderStatus.OK) {
					deferred.resolve(results);
				} else {
					deferred.reject(status);
				}
			});
			return deferred.promise;
		};

		var GeoCoder = function (_$q_) {
			$q = _$q_;
			return {
				geocode: geocodeFunc
			};
		};
		GeoCoder.$inject = ['$q'];

		angular.module('ngMap').service('GeoCoder', GeoCoder);
	})();

	/**
	 * @ngdoc service
	 * @name NavigatorGeolocation
	 * @description
	 *  Provides [defered/promise API](https://docs.angularjs.org/api/ng/service/$q)
	 *  service for navigator.geolocation methods
	 */
	/* global google */
	(function () {
		'use strict';
		var $q;

		/**
		 * @memberof NavigatorGeolocation
		 * @param {Object} geoLocationOptions the navigator geolocations options.
		 *  i.e. { maximumAge: 3000, timeout: 5000, enableHighAccuracy: true }.
		 *  If none specified, { timeout: 5000 }. 
		 *  If timeout not specified, timeout: 5000 added
		 * @param {function} success success callback function
		 * @param {function} failure failure callback function
		 * @example
		 * ```
		 *  NavigatorGeolocation.getCurrentPosition()
		 *    .then(function(position) {
		 *      var lat = position.coords.latitude, lng = position.coords.longitude;
		 *      .. do something lat and lng
		 *    });
		 * ```
		 * @returns {HttpPromise} Future object
		 */
		var getCurrentPosition = function (geoLocationOptions) {
			var deferred = $q.defer();
			if (navigator.geolocation) {

				if (geoLocationOptions === undefined) {
					geoLocationOptions = { timeout: 5000 };
				}
				else if (geoLocationOptions.timeout === undefined) {
					geoLocationOptions.timeout = 5000;
				}

				navigator.geolocation.getCurrentPosition(
				  function (position) {
				  	deferred.resolve(position);
				  }, function (evt) {
				  	void 0;
				  	deferred.reject(evt);
				  },
				  geoLocationOptions
				);
			} else {
				deferred.reject("Browser Geolocation service failed.");
			}
			return deferred.promise;
		};

		var NavigatorGeolocation = function (_$q_) {
			$q = _$q_;
			return {
				getCurrentPosition: getCurrentPosition
			};
		};
		NavigatorGeolocation.$inject = ['$q'];

		angular.module('ngMap').
		  service('NavigatorGeolocation', NavigatorGeolocation);
	})();

	/**
	 * @ngdoc factory
	 * @name NgMapPool
	 * @description
	 *   Provide map instance to avoid memory leak
	 */
	(function () {
		'use strict';
		/**
		 * @memberof NgMapPool
		 * @desc map instance pool
		 */
		var mapInstances = [];
		var $window, $document, $timeout;

		var add = function (el) {
			var mapDiv = $document.createElement("div");
			mapDiv.style.width = "100%";
			mapDiv.style.height = "100%";
			el.appendChild(mapDiv);
			var map = new $window.google.maps.Map(mapDiv, {});
			mapInstances.push(map);
			return map;
		};

		var findById = function (el, id) {
			var notInUseMap;
			for (var i = 0; i < mapInstances.length; i++) {
				var map = mapInstances[i];
				if (map.id == id && !map.inUse) {
					var mapDiv = map.getDiv();
					el.appendChild(mapDiv);
					notInUseMap = map;
					break;
				}
			}
			return notInUseMap;
		};

		var findUnused = function (el) { //jshint ignore:line
			var notInUseMap;
			for (var i = 0; i < mapInstances.length; i++) {
				var map = mapInstances[i];
				if (map.id) {
					continue;
				}
				if (!map.inUse) {
					var mapDiv = map.getDiv();
					el.appendChild(mapDiv);
					notInUseMap = map;
					break;
				}
			}
			return notInUseMap;
		};

		/**
		 * @memberof NgMapPool
		 * @function getMapInstance
		 * @param {HtmlElement} el map container element
		 * @return map instance for the given element
		 */
		var getMapInstance = function (el) {
			var map = findById(el, el.id) || findUnused(el);
			if (!map) {
				map = add(el);
			} else {
				/* firing map idle event, which is used by map controller */
				$timeout(function () {
					google.maps.event.trigger(map, 'idle');
				}, 100);
			}
			map.inUse = true;
			return map;
		};

		/**
		 * @memberof NgMapPool
		 * @function returnMapInstance
		 * @param {Map} an instance of google.maps.Map
		 * @desc sets the flag inUse of the given map instance to false, so that it 
		 * can be reused later
		 */
		var returnMapInstance = function (map) {
			map.inUse = false;
		};

		/**
		 * @memberof NgMapPool
		 * @function resetMapInstances
		 * @desc resets mapInstance array
		 */
		var resetMapInstances = function () {
			for (var i = 0; i < mapInstances.length; i++) {
				mapInstances[i] = null;
			}
			mapInstances = [];
		};

		/**
		 * @memberof NgMapPool
		 * @function deleteMapInstance
		 * @desc selete a mapInstance
		 */
		var deleteMapInstance = function (mapId) {
			for (var i = 0; i < mapInstances.length; i++) {
				if ((mapInstances[i] !== null) && (mapInstances[i].id == mapId)) {
					mapInstances[i] = null;
					mapInstances.splice(i, 1);
				}
			}
		};

		var NgMapPool = function (_$document_, _$window_, _$timeout_) {
			$document = _$document_[0], $window = _$window_, $timeout = _$timeout_;

			return {
				mapInstances: mapInstances,
				resetMapInstances: resetMapInstances,
				getMapInstance: getMapInstance,
				returnMapInstance: returnMapInstance,
				deleteMapInstance: deleteMapInstance
			};
		};

		NgMapPool.$inject = ['$document', '$window', '$timeout'];

		angular.module('ngMap').factory('NgMapPool', NgMapPool);

	})();

	/**
	 * @ngdoc provider
	 * @name NgMap
	 * @description
	 *  common utility service for ng-map
	 */
	(function () {
		'use strict';
		var $window, $document, $q;
		var NavigatorGeolocation, Attr2MapOptions, GeoCoder, camelCaseFilter, NgMapPool;

		var mapControllers = {};

		var getStyle = function (el, styleProp) {
			var y;
			if (el.currentStyle) {
				y = el.currentStyle[styleProp];
			} else if ($window.getComputedStyle) {
				y = $document.defaultView.
				  getComputedStyle(el, null).
				  getPropertyValue(styleProp);
			}
			return y;
		};

		/**
		 * @memberof NgMap
		 * @function initMap
		 * @param id optional, id of the map. default 0
		 */
		var initMap = function (id) {
			var ctrl = mapControllers[id || 0];
			if (!(ctrl.map instanceof google.maps.Map)) {
				ctrl.initializeMap();
				return ctrl.map;
			} else {
				void 0;
			}
		};

		/**
		 * @memberof NgMap
		 * @function getMap
		 * @param {String} optional, id e.g., 'foo'
		 * @returns promise
		 */
		var getMap = function (id) {
			id = typeof id === 'object' ? id.id : id;
			id = id || 0;

			var deferred = $q.defer();
			var timeout = 2000;

			function waitForMap(timeElapsed) {
				if (mapControllers[id]) {
					deferred.resolve(mapControllers[id].map);
				} else if (timeElapsed > timeout) {
					deferred.reject('could not find map');
				} else {
					$window.setTimeout(function () {
						waitForMap(timeElapsed + 100);
					}, 100);
				}
			}
			waitForMap(0);

			return deferred.promise;
		};

		/**
		 * @memberof NgMap
		 * @function addMap
		 * @param mapController {__MapContoller} a map controller
		 * @returns promise
		 */
		var addMap = function (mapCtrl) {
			if (mapCtrl.map) {
				var len = Object.keys(mapControllers).length;
				mapControllers[mapCtrl.map.id || len] = mapCtrl;
			}
		};

		/**
		 * @memberof NgMap
		 * @function deleteMap
		 * @param mapController {__MapContoller} a map controller
		 */
		var deleteMap = function (mapCtrl) {
			var len = Object.keys(mapControllers).length - 1;
			var mapId = mapCtrl.map.id || len;
			if (mapCtrl.map) {
				for (var eventName in mapCtrl.eventListeners) {
					void 0;
					var listener = mapCtrl.eventListeners[eventName];
					google.maps.event.removeListener(listener);
				}
				if (mapCtrl.map.controls) {
					mapCtrl.map.controls.forEach(function (ctrl) {
						ctrl.clear();
					});
				}
			}

			//Remove Heatmap Layers
			if (mapCtrl.map.heatmapLayers) {
				Object.keys(mapCtrl.map.heatmapLayers).forEach(function (layer) {
					mapCtrl.deleteObject('heatmapLayers', mapCtrl.map.heatmapLayers[layer]);
				});
			}

			NgMapPool.deleteMapInstance(mapId);

			delete mapControllers[mapId];
		};

		/**
		 * @memberof NgMap
		 * @function getGeoLocation
		 * @param {String} address
		 * @param {Hash} options geo options
		 * @returns promise
		 */
		var getGeoLocation = function (string, options) {
			var deferred = $q.defer();
			if (!string || string.match(/^current/i)) { // current location
				NavigatorGeolocation.getCurrentPosition(options).then(
				  function (position) {
				  	var lat = position.coords.latitude;
				  	var lng = position.coords.longitude;
				  	var latLng = new google.maps.LatLng(lat, lng);
				  	deferred.resolve(latLng);
				  },
				  function (error) {
				  	deferred.reject(error);
				  }
				);
			} else {
				GeoCoder.geocode({ address: string }).then(
				  function (results) {
				  	deferred.resolve(results[0].geometry.location);
				  },
				  function (error) {
				  	deferred.reject(error);
				  }
				);
				// var geocoder = new google.maps.Geocoder();
				// geocoder.geocode(options, function (results, status) {
				//   if (status == google.maps.GeocoderStatus.OK) {
				//     deferred.resolve(results);
				//   } else {
				//     deferred.reject(status);
				//   }
				// });
			}

			return deferred.promise;
		};

		/**
		 * @memberof NgMap
		 * @function observeAndSet
		 * @param {String} attrName attribute name
		 * @param {Object} object A Google maps object to be changed
		 * @returns attribue observe function
		 */
		var observeAndSet = function (attrName, object) {
			void 0;
			return function (val) {
				if (val) {
					var setMethod = camelCaseFilter('set-' + attrName);
					var optionValue = Attr2MapOptions.toOptionValue(val, { key: attrName });
					if (object[setMethod]) { //if set method does exist
						void 0;
						/* if an location is being observed */
						if (attrName.match(/center|position/) &&
						  typeof optionValue == 'string') {
							getGeoLocation(optionValue).then(function (latlng) {
								object[setMethod](latlng);
							});
						} else {
							object[setMethod](optionValue);
						}
					}
				}
			};
		};

		/**
		 * @memberof NgMap
		 * @function setStyle
		 * @param {HtmlElement} map contriner element
		 * @desc set display, width, height of map container element
		 */
		var setStyle = function (el) {
			//if style is not given to the map element, set display and height
			var defaultStyle = el.getAttribute('default-style');
			if (defaultStyle == "true") {
				el.style.display = 'block';
				el.style.height = '300px';
			} else {
				if (getStyle(el, 'display') != "block") {
					el.style.display = 'block';
				}
				if (getStyle(el, 'height').match(/^(0|auto)/)) {
					el.style.height = '300px';
				}
			}
		};

		angular.module('ngMap').provider('NgMap', function () {
			var defaultOptions = {};

			/**
			 * @memberof NgMap
			 * @function setDefaultOptions
			 * @param {Hash} options
			 * @example
			 *  app.config(function(NgMapProvider) {
			 *    NgMapProvider.setDefaultOptions({
			 *      marker: {
			 *        optimized: false
			 *      }
			 *    });
			 *  });
			 */
			this.setDefaultOptions = function (options) {
				defaultOptions = options;
			};

			var NgMap = function (
				_$window_, _$document_, _$q_,
				_NavigatorGeolocation_, _Attr2MapOptions_,
				_GeoCoder_, _camelCaseFilter_, _NgMapPool_
			  ) {
				$window = _$window_;
				$document = _$document_[0];
				$q = _$q_;
				NavigatorGeolocation = _NavigatorGeolocation_;
				Attr2MapOptions = _Attr2MapOptions_;
				GeoCoder = _GeoCoder_;
				camelCaseFilter = _camelCaseFilter_;
				NgMapPool = _NgMapPool_;

				return {
					defaultOptions: defaultOptions,
					addMap: addMap,
					deleteMap: deleteMap,
					getMap: getMap,
					initMap: initMap,
					setStyle: setStyle,
					getGeoLocation: getGeoLocation,
					observeAndSet: observeAndSet
				};
			};
			NgMap.$inject = [
			  '$window', '$document', '$q',
			  'NavigatorGeolocation', 'Attr2MapOptions',
			  'GeoCoder', 'camelCaseFilter', 'NgMapPool'
			];

			this.$get = NgMap;
		});
	})();

	/**
	 * @ngdoc service
	 * @name StreetView
	 * @description
	 *  Provides [defered/promise API](https://docs.angularjs.org/api/ng/service/$q)
	 *  service for [Google StreetViewService]
	 *  (https://developers.google.com/maps/documentation/javascript/streetview)
	 */
	(function () {
		'use strict';
		var $q;

		/**
		 * Retrieves panorama id from the given map (and or position)
		 * @memberof StreetView
		 * @param {map} map Google map instance
		 * @param {LatLng} latlng Google LatLng instance
		 *   default: the center of the map
		 * @example
		 *   StreetView.getPanorama(map).then(function(panoId) {
		 *     $scope.panoId = panoId;
		 *   });
		 * @returns {HttpPromise} Future object
		 */
		var getPanorama = function (map, latlng) {
			latlng = latlng || map.getCenter();
			var deferred = $q.defer();
			var svs = new google.maps.StreetViewService();
			svs.getPanoramaByLocation((latlng || map.getCenter), 100,
			  function (data, status) {
			  	// if streetView available
			  	if (status === google.maps.StreetViewStatus.OK) {
			  		deferred.resolve(data.location.pano);
			  	} else {
			  		// no street view available in this range, or some error occurred
			  		deferred.resolve(false);
			  		//deferred.reject('Geocoder failed due to: '+ status);
			  	}
			  }
			);
			return deferred.promise;
		};

		/**
		 * Set panorama view on the given map with the panorama id
		 * @memberof StreetView
		 * @param {map} map Google map instance
		 * @param {String} panoId Panorama id fro getPanorama method
		 * @example
		 *   StreetView.setPanorama(map, panoId);
		 */
		var setPanorama = function (map, panoId) {
			var svp = new google.maps.StreetViewPanorama(
			  map.getDiv(), { enableCloseButton: true }
			);
			svp.setPano(panoId);
		};

		var StreetView = function (_$q_) {
			$q = _$q_;

			return {
				getPanorama: getPanorama,
				setPanorama: setPanorama
			};
		};
		StreetView.$inject = ['$q'];

		angular.module('ngMap').service('StreetView', StreetView);
	})();

	return 'ngMap';
}));
/**
 * An Angular module that gives you access to the browsers local storage
 * @version v0.5.2 - 2016-09-28
 * @link https://github.com/grevory/angular-local-storage
 * @author grevory <greg@gregpike.ca>
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
(function (window, angular) {
	var isDefined = angular.isDefined,
	  isUndefined = angular.isUndefined,
	  isNumber = angular.isNumber,
	  isObject = angular.isObject,
	  isArray = angular.isArray,
	  isString = angular.isString,
	  extend = angular.extend,
	  toJson = angular.toJson;

	angular
	  .module('LocalStorageModule', [])
	  .provider('localStorageService', function () {
	  	// You should set a prefix to avoid overwriting any local storage variables from the rest of your app
	  	// e.g. localStorageServiceProvider.setPrefix('yourAppName');
	  	// With provider you can use config as this:
	  	// myApp.config(function (localStorageServiceProvider) {
	  	//    localStorageServiceProvider.prefix = 'yourAppName';
	  	// });
	  	this.prefix = 'ls';

	  	// You could change web storage type localstorage or sessionStorage
	  	this.storageType = 'localStorage';

	  	// Cookie options (usually in case of fallback)
	  	// expiry = Number of days before cookies expire // 0 = Does not expire
	  	// path = The web path the cookie represents
	  	// secure = Wether the cookies should be secure (i.e only sent on HTTPS requests)
	  	this.cookie = {
	  		expiry: 30,
	  		path: '/',
	  		secure: false
	  	};

	  	// Decides wether we should default to cookies if localstorage is not supported.
	  	this.defaultToCookie = true;

	  	// Send signals for each of the following actions?
	  	this.notify = {
	  		setItem: true,
	  		removeItem: false
	  	};

	  	// Setter for the prefix
	  	this.setPrefix = function (prefix) {
	  		this.prefix = prefix;
	  		return this;
	  	};

	  	// Setter for the storageType
	  	this.setStorageType = function (storageType) {
	  		this.storageType = storageType;
	  		return this;
	  	};
	  	// Setter for defaultToCookie value, default is true.
	  	this.setDefaultToCookie = function (shouldDefault) {
	  		this.defaultToCookie = !!shouldDefault; // Double-not to make sure it's a bool value.
	  		return this;
	  	};
	  	// Setter for cookie config
	  	this.setStorageCookie = function (exp, path, secure) {
	  		this.cookie.expiry = exp;
	  		this.cookie.path = path;
	  		this.cookie.secure = secure;
	  		return this;
	  	};

	  	// Setter for cookie domain
	  	this.setStorageCookieDomain = function (domain) {
	  		this.cookie.domain = domain;
	  		return this;
	  	};

	  	// Setter for notification config
	  	// itemSet & itemRemove should be booleans
	  	this.setNotify = function (itemSet, itemRemove) {
	  		this.notify = {
	  			setItem: itemSet,
	  			removeItem: itemRemove
	  		};
	  		return this;
	  	};

	  	this.$get = ['$rootScope', '$window', '$document', '$parse', '$timeout', function ($rootScope, $window, $document, $parse, $timeout) {
	  		var self = this;
	  		var prefix = self.prefix;
	  		var cookie = self.cookie;
	  		var notify = self.notify;
	  		var storageType = self.storageType;
	  		var webStorage;

	  		// When Angular's $document is not available
	  		if (!$document) {
	  			$document = document;
	  		} else if ($document[0]) {
	  			$document = $document[0];
	  		}

	  		// If there is a prefix set in the config lets use that with an appended period for readability
	  		if (prefix.substr(-1) !== '.') {
	  			prefix = !!prefix ? prefix + '.' : '';
	  		}
	  		var deriveQualifiedKey = function (key) {
	  			return prefix + key;
	  		};

	  		// Removes prefix from the key.
	  		var underiveQualifiedKey = function (key) {
	  			return key.replace(new RegExp('^' + prefix, 'g'), '');
	  		};

	  		// Check if the key is within our prefix namespace.
	  		var isKeyPrefixOurs = function (key) {
	  			return key.indexOf(prefix) === 0;
	  		};

	  		// Checks the browser to see if local storage is supported
	  		var checkSupport = function () {
	  			try {
	  				var supported = (storageType in $window && $window[storageType] !== null);

	  				// When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage
	  				// is available, but trying to call .setItem throws an exception.
	  				//
	  				// "QUOTA_EXCEEDED_ERR: DOM Exception 22: An attempt was made to add something to storage
	  				// that exceeded the quota."
	  				var key = deriveQualifiedKey('__' + Math.round(Math.random() * 1e7));
	  				if (supported) {
	  					webStorage = $window[storageType];
	  					webStorage.setItem(key, '');
	  					webStorage.removeItem(key);
	  				}

	  				return supported;
	  			} catch (e) {
	  				// Only change storageType to cookies if defaulting is enabled.
	  				if (self.defaultToCookie)
	  					storageType = 'cookie';
	  				$rootScope.$broadcast('LocalStorageModule.notification.error', e.message);
	  				return false;
	  			}
	  		};
	  		var browserSupportsLocalStorage = checkSupport();

	  		// Directly adds a value to local storage
	  		// If local storage is not available in the browser use cookies
	  		// Example use: localStorageService.add('library','angular');
	  		var addToLocalStorage = function (key, value, type) {
	  			setStorageType(type);

	  			// Let's convert undefined values to null to get the value consistent
	  			if (isUndefined(value)) {
	  				value = null;
	  			} else {
	  				value = toJson(value);
	  			}

	  			// If this browser does not support local storage use cookies
	  			if (!browserSupportsLocalStorage && self.defaultToCookie || self.storageType === 'cookie') {
	  				if (!browserSupportsLocalStorage) {
	  					$rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');
	  				}

	  				if (notify.setItem) {
	  					$rootScope.$broadcast('LocalStorageModule.notification.setitem', { key: key, newvalue: value, storageType: 'cookie' });
	  				}
	  				return addToCookies(key, value);
	  			}

	  			try {
	  				if (webStorage) {
	  					webStorage.setItem(deriveQualifiedKey(key), value);
	  				}
	  				if (notify.setItem) {
	  					$rootScope.$broadcast('LocalStorageModule.notification.setitem', { key: key, newvalue: value, storageType: self.storageType });
	  				}
	  			} catch (e) {
	  				$rootScope.$broadcast('LocalStorageModule.notification.error', e.message);
	  				return addToCookies(key, value);
	  			}
	  			return true;
	  		};

	  		// Directly get a value from local storage
	  		// Example use: localStorageService.get('library'); // returns 'angular'
	  		var getFromLocalStorage = function (key, type) {
	  			setStorageType(type);

	  			if (!browserSupportsLocalStorage && self.defaultToCookie || self.storageType === 'cookie') {
	  				if (!browserSupportsLocalStorage) {
	  					$rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');
	  				}

	  				return getFromCookies(key);
	  			}

	  			var item = webStorage ? webStorage.getItem(deriveQualifiedKey(key)) : null;
	  			// angular.toJson will convert null to 'null', so a proper conversion is needed
	  			// FIXME not a perfect solution, since a valid 'null' string can't be stored
	  			if (!item || item === 'null') {
	  				return null;
	  			}

	  			try {
	  				return JSON.parse(item);
	  			} catch (e) {
	  				return item;
	  			}
	  		};

	  		// Remove an item from local storage
	  		// Example use: localStorageService.remove('library'); // removes the key/value pair of library='angular'
	  		//
	  		// This is var-arg removal, check the last argument to see if it is a storageType
	  		// and set type accordingly before removing.
	  		//
	  		var removeFromLocalStorage = function () {
	  			// can't pop on arguments, so we do this
	  			var consumed = 0;
	  			if (arguments.length >= 1 &&
					(arguments[arguments.length - 1] === 'localStorage' ||
					 arguments[arguments.length - 1] === 'sessionStorage')) {
	  				consumed = 1;
	  				setStorageType(arguments[arguments.length - 1]);
	  			}

	  			var i, key;
	  			for (i = 0; i < arguments.length - consumed; i++) {
	  				key = arguments[i];
	  				if (!browserSupportsLocalStorage && self.defaultToCookie || self.storageType === 'cookie') {
	  					if (!browserSupportsLocalStorage) {
	  						$rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');
	  					}

	  					if (notify.removeItem) {
	  						$rootScope.$broadcast('LocalStorageModule.notification.removeitem', { key: key, storageType: 'cookie' });
	  					}
	  					removeFromCookies(key);
	  				}
	  				else {
	  					try {
	  						webStorage.removeItem(deriveQualifiedKey(key));
	  						if (notify.removeItem) {
	  							$rootScope.$broadcast('LocalStorageModule.notification.removeitem', {
	  								key: key,
	  								storageType: self.storageType
	  							});
	  						}
	  					} catch (e) {
	  						$rootScope.$broadcast('LocalStorageModule.notification.error', e.message);
	  						removeFromCookies(key);
	  					}
	  				}
	  			}
	  		};

	  		// Return array of keys for local storage
	  		// Example use: var keys = localStorageService.keys()
	  		var getKeysForLocalStorage = function (type) {
	  			setStorageType(type);

	  			if (!browserSupportsLocalStorage) {
	  				$rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');
	  				return [];
	  			}

	  			var prefixLength = prefix.length;
	  			var keys = [];
	  			for (var key in webStorage) {
	  				// Only return keys that are for this app
	  				if (key.substr(0, prefixLength) === prefix) {
	  					try {
	  						keys.push(key.substr(prefixLength));
	  					} catch (e) {
	  						$rootScope.$broadcast('LocalStorageModule.notification.error', e.Description);
	  						return [];
	  					}
	  				}
	  			}
	  			return keys;
	  		};

	  		// Remove all data for this app from local storage
	  		// Also optionally takes a regular expression string and removes the matching key-value pairs
	  		// Example use: localStorageService.clearAll();
	  		// Should be used mostly for development purposes
	  		var clearAllFromLocalStorage = function (regularExpression, type) {
	  			setStorageType(type);

	  			// Setting both regular expressions independently
	  			// Empty strings result in catchall RegExp
	  			var prefixRegex = !!prefix ? new RegExp('^' + prefix) : new RegExp();
	  			var testRegex = !!regularExpression ? new RegExp(regularExpression) : new RegExp();

	  			if (!browserSupportsLocalStorage && self.defaultToCookie || self.storageType === 'cookie') {
	  				if (!browserSupportsLocalStorage) {
	  					$rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');
	  				}
	  				return clearAllFromCookies();
	  			}
	  			if (!browserSupportsLocalStorage && !self.defaultToCookie)
	  				return false;
	  			var prefixLength = prefix.length;

	  			for (var key in webStorage) {
	  				// Only remove items that are for this app and match the regular expression
	  				if (prefixRegex.test(key) && testRegex.test(key.substr(prefixLength))) {
	  					try {
	  						removeFromLocalStorage(key.substr(prefixLength));
	  					} catch (e) {
	  						$rootScope.$broadcast('LocalStorageModule.notification.error', e.message);
	  						return clearAllFromCookies();
	  					}
	  				}
	  			}
	  			return true;
	  		};

	  		// Checks the browser to see if cookies are supported
	  		var browserSupportsCookies = (function () {
	  			try {
	  				return $window.navigator.cookieEnabled ||
					("cookie" in $document && ($document.cookie.length > 0 ||
					  ($document.cookie = "test").indexOf.call($document.cookie, "test") > -1));
	  			} catch (e) {
	  				$rootScope.$broadcast('LocalStorageModule.notification.error', e.message);
	  				return false;
	  			}
	  		}());

	  		// Directly adds a value to cookies
	  		// Typically used as a fallback if local storage is not available in the browser
	  		// Example use: localStorageService.cookie.add('library','angular');
	  		var addToCookies = function (key, value, daysToExpiry, secure) {

	  			if (isUndefined(value)) {
	  				return false;
	  			} else if (isArray(value) || isObject(value)) {
	  				value = toJson(value);
	  			}

	  			if (!browserSupportsCookies) {
	  				$rootScope.$broadcast('LocalStorageModule.notification.error', 'COOKIES_NOT_SUPPORTED');
	  				return false;
	  			}

	  			try {
	  				var expiry = '',
					expiryDate = new Date(),
					cookieDomain = '';

	  				if (value === null) {
	  					// Mark that the cookie has expired one day ago
	  					expiryDate.setTime(expiryDate.getTime() + (-1 * 24 * 60 * 60 * 1000));
	  					expiry = "; expires=" + expiryDate.toGMTString();
	  					value = '';
	  				} else if (isNumber(daysToExpiry) && daysToExpiry !== 0) {
	  					expiryDate.setTime(expiryDate.getTime() + (daysToExpiry * 24 * 60 * 60 * 1000));
	  					expiry = "; expires=" + expiryDate.toGMTString();
	  				} else if (cookie.expiry !== 0) {
	  					expiryDate.setTime(expiryDate.getTime() + (cookie.expiry * 24 * 60 * 60 * 1000));
	  					expiry = "; expires=" + expiryDate.toGMTString();
	  				}
	  				if (!!key) {
	  					var cookiePath = "; path=" + cookie.path;
	  					if (cookie.domain) {
	  						cookieDomain = "; domain=" + cookie.domain;
	  					}
	  					/* Providing the secure parameter always takes precedence over config
						 * (allows developer to mix and match secure + non-secure) */
	  					if (typeof secure === 'boolean') {
	  						if (secure === true) {
	  							/* We've explicitly specified secure,
								 * add the secure attribute to the cookie (after domain) */
	  							cookieDomain += "; secure";
	  						}
	  						// else - secure has been supplied but isn't true - so don't set secure flag, regardless of what config says
	  					}
	  					else if (cookie.secure === true) {
	  						// secure parameter wasn't specified, get default from config
	  						cookieDomain += "; secure";
	  					}
	  					$document.cookie = deriveQualifiedKey(key) + "=" + encodeURIComponent(value) + expiry + cookiePath + cookieDomain;
	  				}
	  			} catch (e) {
	  				$rootScope.$broadcast('LocalStorageModule.notification.error', e.message);
	  				return false;
	  			}
	  			return true;
	  		};

	  		// Directly get a value from a cookie
	  		// Example use: localStorageService.cookie.get('library'); // returns 'angular'
	  		var getFromCookies = function (key) {
	  			if (!browserSupportsCookies) {
	  				$rootScope.$broadcast('LocalStorageModule.notification.error', 'COOKIES_NOT_SUPPORTED');
	  				return false;
	  			}

	  			var cookies = $document.cookie && $document.cookie.split(';') || [];
	  			for (var i = 0; i < cookies.length; i++) {
	  				var thisCookie = cookies[i];
	  				while (thisCookie.charAt(0) === ' ') {
	  					thisCookie = thisCookie.substring(1, thisCookie.length);
	  				}
	  				if (thisCookie.indexOf(deriveQualifiedKey(key) + '=') === 0) {
	  					var storedValues = decodeURIComponent(thisCookie.substring(prefix.length + key.length + 1, thisCookie.length));
	  					try {
	  						var parsedValue = JSON.parse(storedValues);
	  						return typeof (parsedValue) === 'number' ? storedValues : parsedValue;
	  					} catch (e) {
	  						return storedValues;
	  					}
	  				}
	  			}
	  			return null;
	  		};

	  		var removeFromCookies = function (key) {
	  			addToCookies(key, null);
	  		};

	  		var clearAllFromCookies = function () {
	  			var thisCookie = null;
	  			var prefixLength = prefix.length;
	  			var cookies = $document.cookie.split(';');
	  			for (var i = 0; i < cookies.length; i++) {
	  				thisCookie = cookies[i];

	  				while (thisCookie.charAt(0) === ' ') {
	  					thisCookie = thisCookie.substring(1, thisCookie.length);
	  				}

	  				var key = thisCookie.substring(prefixLength, thisCookie.indexOf('='));
	  				removeFromCookies(key);
	  			}
	  		};

	  		var getStorageType = function () {
	  			return storageType;
	  		};

	  		var setStorageType = function (type) {
	  			if (type && storageType !== type) {
	  				storageType = type;
	  				browserSupportsLocalStorage = checkSupport();
	  			}
	  			return browserSupportsLocalStorage;
	  		};

	  		// Add a listener on scope variable to save its changes to local storage
	  		// Return a function which when called cancels binding
	  		var bindToScope = function (scope, key, def, lsKey, type) {
	  			lsKey = lsKey || key;
	  			var value = getFromLocalStorage(lsKey, type);

	  			if (value === null && isDefined(def)) {
	  				value = def;
	  			} else if (isObject(value) && isObject(def)) {
	  				value = extend(value, def);
	  			}

	  			$parse(key).assign(scope, value);

	  			return scope.$watch(key, function (newVal) {
	  				addToLocalStorage(lsKey, newVal, type);
	  			}, isObject(scope[key]));
	  		};

	  		// Add listener to local storage, for update callbacks.
	  		if (browserSupportsLocalStorage) {
	  			if ($window.addEventListener) {
	  				$window.addEventListener("storage", handleStorageChangeCallback, false);
	  				$rootScope.$on('$destroy', function () {
	  					$window.removeEventListener("storage", handleStorageChangeCallback);
	  				});
	  			} else if ($window.attachEvent) {
	  				// attachEvent and detachEvent are proprietary to IE v6-10
	  				$window.attachEvent("onstorage", handleStorageChangeCallback);
	  				$rootScope.$on('$destroy', function () {
	  					$window.detachEvent("onstorage", handleStorageChangeCallback);
	  				});
	  			}
	  		}

	  		// Callback handler for storage changed.
	  		function handleStorageChangeCallback(e) {
	  			if (!e) { e = $window.event; }
	  			if (notify.setItem) {
	  				if (isString(e.key) && isKeyPrefixOurs(e.key)) {
	  					var key = underiveQualifiedKey(e.key);
	  					// Use timeout, to avoid using $rootScope.$apply.
	  					$timeout(function () {
	  						$rootScope.$broadcast('LocalStorageModule.notification.changed', { key: key, newvalue: e.newValue, storageType: self.storageType });
	  					});
	  				}
	  			}
	  		}

	  		// Return localStorageService.length
	  		// ignore keys that not owned
	  		var lengthOfLocalStorage = function (type) {
	  			setStorageType(type);

	  			var count = 0;
	  			var storage = $window[storageType];
	  			for (var i = 0; i < storage.length; i++) {
	  				if (storage.key(i).indexOf(prefix) === 0) {
	  					count++;
	  				}
	  			}
	  			return count;
	  		};

	  		return {
	  			isSupported: browserSupportsLocalStorage,
	  			getStorageType: getStorageType,
	  			setStorageType: setStorageType,
	  			set: addToLocalStorage,
	  			add: addToLocalStorage, //DEPRECATED
	  			get: getFromLocalStorage,
	  			keys: getKeysForLocalStorage,
	  			remove: removeFromLocalStorage,
	  			clearAll: clearAllFromLocalStorage,
	  			bind: bindToScope,
	  			deriveKey: deriveQualifiedKey,
	  			underiveKey: underiveQualifiedKey,
	  			length: lengthOfLocalStorage,
	  			defaultToCookie: this.defaultToCookie,
	  			cookie: {
	  				isSupported: browserSupportsCookies,
	  				set: addToCookies,
	  				add: addToCookies, //DEPRECATED
	  				get: getFromCookies,
	  				remove: removeFromCookies,
	  				clearAll: clearAllFromCookies
	  			}
	  		};
	  	}];
	  });
})(window, window.angular);
/* angular-moment.js / v1.0.0 / (c) 2013, 2014, 2015, 2016 Uri Shaked / MIT Licence */

'format amd';
/* global define */

(function () {
	'use strict';

	function isUndefinedOrNull(val) {
		return angular.isUndefined(val) || val === null;
	}

	function requireMoment() {
		try {
			return require('moment'); // Using nw.js or browserify?
		} catch (e) {
			throw new Error('Please install moment via npm. Please reference to: https://github.com/urish/angular-moment'); // Add wiki/troubleshooting section?
		}
	}

	function angularMoment(angular, moment) {

		if(typeof moment === 'undefined') {
			if(typeof require === 'function') {
				moment = requireMoment();
			}else{
				throw new Error('Moment cannot be found by angular-moment! Please reference to: https://github.com/urish/angular-moment'); // Add wiki/troubleshooting section?
			}
		}

		/**
		 * @ngdoc overview
		 * @name angularMoment
		 *
		 * @description
		 * angularMoment module provides moment.js functionality for angular.js apps.
		 */
		angular.module('angularMoment', [])

		/**
		 * @ngdoc object
		 * @name angularMoment.config:angularMomentConfig
		 *
		 * @description
		 * Common configuration of the angularMoment module
		 */
			.constant('angularMomentConfig', {
				/**
				 * @ngdoc property
				 * @name angularMoment.config.angularMomentConfig#preprocess
				 * @propertyOf angularMoment.config:angularMomentConfig
				 * @returns {function} A preprocessor function that will be applied on all incoming dates
				 *
				 * @description
				 * Defines a preprocessor function to apply on all input dates (e.g. the input of `am-time-ago`,
				 * `amCalendar`, etc.). The function must return a `moment` object.
				 *
				 * @example
				 *   // Causes angular-moment to always treat the input values as unix timestamps
				 *   angularMomentConfig.preprocess = function(value) {
				 * 	   return moment.unix(value);
				 *   }
				 */
				preprocess: null,

				/**
				 * @ngdoc property
				 * @name angularMoment.config.angularMomentConfig#timezone
				 * @propertyOf angularMoment.config:angularMomentConfig
				 * @returns {string} The default timezone
				 *
				 * @description
				 * The default timezone (e.g. 'Europe/London'). Empty string by default (does not apply
				 * any timezone shift).
				 *
				 * NOTE: This option requires moment-timezone >= 0.3.0.
				 */
				timezone: null,

				/**
				 * @ngdoc property
				 * @name angularMoment.config.angularMomentConfig#format
				 * @propertyOf angularMoment.config:angularMomentConfig
				 * @returns {string} The pre-conversion format of the date
				 *
				 * @description
				 * Specify the format of the input date. Essentially it's a
				 * default and saves you from specifying a format in every
				 * element. Overridden by element attr. Null by default.
				 */
				format: null,

				/**
				 * @ngdoc property
				 * @name angularMoment.config.angularMomentConfig#statefulFilters
				 * @propertyOf angularMoment.config:angularMomentConfig
				 * @returns {boolean} Whether angular-moment filters should be stateless (or not)
				 *
				 * @description
				 * Specifies whether the filters included with angular-moment are stateful.
				 * Stateful filters will automatically re-evaluate whenever you change the timezone
				 * or locale settings, but may negatively impact performance. true by default.
				 */
				statefulFilters: true
			})

		/**
		 * @ngdoc object
		 * @name angularMoment.object:moment
		 *
		 * @description
		 * moment global (as provided by the moment.js library)
		 */
			.constant('moment', moment)

		/**
		 * @ngdoc object
		 * @name angularMoment.config:amTimeAgoConfig
		 * @module angularMoment
		 *
		 * @description
		 * configuration specific to the amTimeAgo directive
		 */
			.constant('amTimeAgoConfig', {
				/**
				 * @ngdoc property
				 * @name angularMoment.config.amTimeAgoConfig#withoutSuffix
				 * @propertyOf angularMoment.config:amTimeAgoConfig
				 * @returns {boolean} Whether to include a suffix in am-time-ago directive
				 *
				 * @description
				 * Defaults to false.
				 */
				withoutSuffix: false,

				/**
				 * @ngdoc property
				 * @name angularMoment.config.amTimeAgoConfig#serverTime
				 * @propertyOf angularMoment.config:amTimeAgoConfig
				 * @returns {number} Server time in milliseconds since the epoch
				 *
				 * @description
				 * If set, time ago will be calculated relative to the given value.
				 * If null, local time will be used. Defaults to null.
				 */
				serverTime: null,

				/**
				 * @ngdoc property
				 * @name angularMoment.config.amTimeAgoConfig#titleFormat
				 * @propertyOf angularMoment.config:amTimeAgoConfig
				 * @returns {string} The format of the date to be displayed in the title of the element. If null,
				 *        the directive set the title of the element.
				 *
				 * @description
				 * The format of the date used for the title of the element. null by default.
				 */
				titleFormat: null,

				/**
				 * @ngdoc property
				 * @name angularMoment.config.amTimeAgoConfig#fullDateThreshold
				 * @propertyOf angularMoment.config:amTimeAgoConfig
				 * @returns {number} The minimum number of days for showing a full date instead of relative time
				 *
				 * @description
				 * The threshold for displaying a full date. The default is null, which means the date will always
				 * be relative, and full date will never be displayed.
				 */
				fullDateThreshold: null,

				/**
				 * @ngdoc property
				 * @name angularMoment.config.amTimeAgoConfig#fullDateFormat
				 * @propertyOf angularMoment.config:amTimeAgoConfig
				 * @returns {string} The format to use when displaying a full date.
				 *
				 * @description
				 * Specify the format of the date when displayed as full date. null by default.
				 */
				fullDateFormat: null,

				fullDateThresholdUnit: 'day'
			})

		/**
		 * @ngdoc directive
		 * @name angularMoment.directive:amTimeAgo
		 * @module angularMoment
		 *
		 * @restrict A
		 */
			.directive('amTimeAgo', ['$window', 'moment', 'amMoment', 'amTimeAgoConfig', function ($window, moment, amMoment, amTimeAgoConfig) {

				return function (scope, element, attr) {
					var activeTimeout = null;
					var currentValue;
					var withoutSuffix = amTimeAgoConfig.withoutSuffix;
					var titleFormat = amTimeAgoConfig.titleFormat;
					var fullDateThreshold = amTimeAgoConfig.fullDateThreshold;
					var fullDateFormat = amTimeAgoConfig.fullDateFormat;
					var fullDateThresholdUnit = amTimeAgoConfig.fullDateThresholdUnit;

					var localDate = new Date().getTime();
					var modelName = attr.amTimeAgo;
					var currentFrom;
					var isTimeElement = ('TIME' === element[0].nodeName.toUpperCase());
					var setTitleTime = !element.attr('title');

					function getNow() {
						var now;
						if (currentFrom) {
							now = currentFrom;
						} else if (amTimeAgoConfig.serverTime) {
							var localNow = new Date().getTime();
							var nowMillis = localNow - localDate + amTimeAgoConfig.serverTime;
							now = moment(nowMillis);
						}
						else {
							now = moment();
						}
						return now;
					}

					function cancelTimer() {
						if (activeTimeout) {
							$window.clearTimeout(activeTimeout);
							activeTimeout = null;
						}
					}

					function updateTime(momentInstance) {
						var timeAgo = getNow().diff(momentInstance, fullDateThresholdUnit);
						var showFullDate = fullDateThreshold && timeAgo >= fullDateThreshold;

						if (showFullDate) {
							element.text(momentInstance.format(fullDateFormat));
						} else {
							element.text(momentInstance.from(getNow(), withoutSuffix));
						}

						if (titleFormat && setTitleTime) {
							element.attr('title', momentInstance.format(titleFormat));
						}

						if (!showFullDate) {
							var howOld = Math.abs(getNow().diff(momentInstance, 'minute'));
							var secondsUntilUpdate = 3600;
							if (howOld < 1) {
								secondsUntilUpdate = 1;
							} else if (howOld < 60) {
								secondsUntilUpdate = 30;
							} else if (howOld < 180) {
								secondsUntilUpdate = 300;
							}

							activeTimeout = $window.setTimeout(function () {
								updateTime(momentInstance);
							}, secondsUntilUpdate * 1000);
						}
					}

					function updateDateTimeAttr(value) {
						if (isTimeElement) {
							element.attr('datetime', value);
						}
					}

					function updateMoment() {
						cancelTimer();
						if (currentValue) {
							var momentValue = amMoment.preprocessDate(currentValue);
							updateTime(momentValue);
							updateDateTimeAttr(momentValue.toISOString());
						}
					}

					scope.$watch(modelName, function (value) {
						if (isUndefinedOrNull(value) || (value === '')) {
							cancelTimer();
							if (currentValue) {
								element.text('');
								updateDateTimeAttr('');
								currentValue = null;
							}
							return;
						}

						currentValue = value;
						updateMoment();
					});

					if (angular.isDefined(attr.amFrom)) {
						scope.$watch(attr.amFrom, function (value) {
							if (isUndefinedOrNull(value) || (value === '')) {
								currentFrom = null;
							} else {
								currentFrom = moment(value);
							}
							updateMoment();
						});
					}

					if (angular.isDefined(attr.amWithoutSuffix)) {
						scope.$watch(attr.amWithoutSuffix, function (value) {
							if (typeof value === 'boolean') {
								withoutSuffix = value;
								updateMoment();
							} else {
								withoutSuffix = amTimeAgoConfig.withoutSuffix;
							}
						});
					}

					attr.$observe('amFullDateThreshold', function (newValue) {
						fullDateThreshold = newValue;
						updateMoment();
					});

					attr.$observe('amFullDateFormat', function (newValue) {
						fullDateFormat = newValue;
						updateMoment();
					});

					attr.$observe('amFullDateThresholdUnit', function (newValue) {
						fullDateThresholdUnit = newValue;
						updateMoment();
					});

					scope.$on('$destroy', function () {
						cancelTimer();
					});

					scope.$on('amMoment:localeChanged', function () {
						updateMoment();
					});
				};
			}])

		/**
		 * @ngdoc service
		 * @name angularMoment.service.amMoment
		 * @module angularMoment
		 */
			.service('amMoment', ['moment', '$rootScope', '$log', 'angularMomentConfig', function (moment, $rootScope, $log, angularMomentConfig) {
				var defaultTimezone = null;

				/**
				 * @ngdoc function
				 * @name angularMoment.service.amMoment#changeLocale
				 * @methodOf angularMoment.service.amMoment
				 *
				 * @description
				 * Changes the locale for moment.js and updates all the am-time-ago directive instances
				 * with the new locale. Also broadcasts an `amMoment:localeChanged` event on $rootScope.
				 *
				 * @param {string} locale Locale code (e.g. en, es, ru, pt-br, etc.)
				 * @param {object} customization object of locale strings to override
				 */
				this.changeLocale = function (locale, customization) {
					var result = moment.locale(locale, customization);
					if (angular.isDefined(locale)) {
						$rootScope.$broadcast('amMoment:localeChanged');

					}
					return result;
				};

				/**
				 * @ngdoc function
				 * @name angularMoment.service.amMoment#changeTimezone
				 * @methodOf angularMoment.service.amMoment
				 *
				 * @description
				 * Changes the default timezone for amCalendar, amDateFormat and amTimeAgo. Also broadcasts an
				 * `amMoment:timezoneChanged` event on $rootScope.
				 *
				 * Note: this method works only if moment-timezone > 0.3.0 is loaded
				 *
				 * @param {string} timezone Timezone name (e.g. UTC)
				 */
				this.changeTimezone = function (timezone) {
					if (moment.tz && moment.tz.setDefault) {
						moment.tz.setDefault(timezone);
						$rootScope.$broadcast('amMoment:timezoneChanged');
					} else {
						$log.warn('angular-moment: changeTimezone() works only with moment-timezone.js v0.3.0 or greater.');
					}
					angularMomentConfig.timezone = timezone;
					defaultTimezone = timezone;
				};

				/**
				 * @ngdoc function
				 * @name angularMoment.service.amMoment#preprocessDate
				 * @methodOf angularMoment.service.amMoment
				 *
				 * @description
				 * Preprocess a given value and convert it into a Moment instance appropriate for use in the
				 * am-time-ago directive and the filters. The behavior of this function can be overriden by
				 * setting `angularMomentConfig.preprocess`.
				 *
				 * @param {*} value The value to be preprocessed
				 * @return {Moment} A `moment` object
				 */
				this.preprocessDate = function (value) {
					// Configure the default timezone if needed
					if (defaultTimezone !== angularMomentConfig.timezone) {
						this.changeTimezone(angularMomentConfig.timezone);
					}

					if (angularMomentConfig.preprocess) {
						return angularMomentConfig.preprocess(value);
					}

					if (!isNaN(parseFloat(value)) && isFinite(value)) {
						// Milliseconds since the epoch
						return moment(parseInt(value, 10));
					}

					// else just returns the value as-is.
					return moment(value);
				};
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amParse
		 * @module angularMoment
		 */
			.filter('amParse', ['moment', function (moment) {
				return function (value, format) {
					return moment(value, format);
				};
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amFromUnix
		 * @module angularMoment
		 */
			.filter('amFromUnix', ['moment', function (moment) {
				return function (value) {
					return moment.unix(value);
				};
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amUtc
		 * @module angularMoment
		 */
			.filter('amUtc', ['moment', function (moment) {
				return function (value) {
					return moment.utc(value);
				};
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amUtcOffset
		 * @module angularMoment
		 *
		 * @description
		 * Adds a UTC offset to the given timezone object. The offset can be a number of minutes, or a string such as
		 * '+0300', '-0300' or 'Z'.
		 */
			.filter('amUtcOffset', ['amMoment', function (amMoment) {
				function amUtcOffset(value, offset) {
					return amMoment.preprocessDate(value).utcOffset(offset);
				}

				return amUtcOffset;
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amLocal
		 * @module angularMoment
		 */
			.filter('amLocal', ['moment', function (moment) {
				return function (value) {
					return moment.isMoment(value) ? value.local() : null;
				};
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amTimezone
		 * @module angularMoment
		 *
		 * @description
		 * Apply a timezone onto a given moment object, e.g. 'America/Phoenix').
		 *
		 * You need to include moment-timezone.js for timezone support.
		 */
			.filter('amTimezone', ['amMoment', 'angularMomentConfig', '$log', function (amMoment, angularMomentConfig, $log) {
				function amTimezone(value, timezone) {
					var aMoment = amMoment.preprocessDate(value);

					if (!timezone) {
						return aMoment;
					}

					if (aMoment.tz) {
						return aMoment.tz(timezone);
					} else {
						$log.warn('angular-moment: named timezone specified but moment.tz() is undefined. Did you forget to include moment-timezone.js ?');
						return aMoment;
					}
				}

				return amTimezone;
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amCalendar
		 * @module angularMoment
		 */
			.filter('amCalendar', ['moment', 'amMoment', 'angularMomentConfig', function (moment, amMoment, angularMomentConfig) {
				function amCalendarFilter(value, referenceTime, formats) {
					if (isUndefinedOrNull(value)) {
						return '';
					}

					var date = amMoment.preprocessDate(value);
					return date.isValid() ? date.calendar(referenceTime, formats) : '';
				}

				// Since AngularJS 1.3, filters have to explicitly define being stateful
				// (this is no longer the default).
				amCalendarFilter.$stateful = angularMomentConfig.statefulFilters;

				return amCalendarFilter;
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amDifference
		 * @module angularMoment
		 */
			.filter('amDifference', ['moment', 'amMoment', 'angularMomentConfig', function (moment, amMoment, angularMomentConfig) {
				function amDifferenceFilter(value, otherValue, unit, usePrecision) {
					if (isUndefinedOrNull(value)) {
						return '';
					}

					var date = amMoment.preprocessDate(value);
					var date2 = !isUndefinedOrNull(otherValue) ? amMoment.preprocessDate(otherValue) : moment();

					if (!date.isValid() || !date2.isValid()) {
						return '';
					}

					return date.diff(date2, unit, usePrecision);
				}

				amDifferenceFilter.$stateful = angularMomentConfig.statefulFilters;

				return amDifferenceFilter;
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amDateFormat
		 * @module angularMoment
		 * @function
		 */
			.filter('amDateFormat', ['moment', 'amMoment', 'angularMomentConfig', function (moment, amMoment, angularMomentConfig) {
				function amDateFormatFilter(value, format) {
					if (isUndefinedOrNull(value)) {
						return '';
					}

					var date = amMoment.preprocessDate(value);
					if (!date.isValid()) {
						return '';
					}

					return date.format(format);
				}

				amDateFormatFilter.$stateful = angularMomentConfig.statefulFilters;

				return amDateFormatFilter;
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amDurationFormat
		 * @module angularMoment
		 * @function
		 */
			.filter('amDurationFormat', ['moment', 'angularMomentConfig', function (moment, angularMomentConfig) {
				function amDurationFormatFilter(value, format, suffix) {
					if (isUndefinedOrNull(value)) {
						return '';
					}

					return moment.duration(value, format).humanize(suffix);
				}

				amDurationFormatFilter.$stateful = angularMomentConfig.statefulFilters;

				return amDurationFormatFilter;
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amTimeAgo
		 * @module angularMoment
		 * @function
		 */
			.filter('amTimeAgo', ['moment', 'amMoment', 'angularMomentConfig', function (moment, amMoment, angularMomentConfig) {
				function amTimeAgoFilter(value, suffix, from) {
					var date, dateFrom;

					if (isUndefinedOrNull(value)) {
						return '';
					}

					value = amMoment.preprocessDate(value);
					date = moment(value);
					if (!date.isValid()) {
						return '';
					}

					dateFrom = moment(from);
					if (!isUndefinedOrNull(from) && dateFrom.isValid()) {
						return date.from(dateFrom, suffix);
					}

					return date.fromNow(suffix);
				}

				amTimeAgoFilter.$stateful = angularMomentConfig.statefulFilters;

				return amTimeAgoFilter;
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amSubtract
		 * @module angularMoment
		 * @function
		 */
			.filter('amSubtract', ['moment', 'angularMomentConfig', function (moment, angularMomentConfig) {
				function amSubtractFilter(value, amount, type) {

					if (isUndefinedOrNull(value)) {
						return '';
					}

					return moment(value).subtract(parseInt(amount, 10), type);
				}

				amSubtractFilter.$stateful = angularMomentConfig.statefulFilters;

				return amSubtractFilter;
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amAdd
		 * @module angularMoment
		 * @function
		 */
			.filter('amAdd', ['moment', 'angularMomentConfig', function (moment, angularMomentConfig) {
				function amAddFilter(value, amount, type) {

					if (isUndefinedOrNull(value)) {
						return '';
					}

					return moment(value).add(parseInt(amount, 10), type);
				}

				amAddFilter.$stateful = angularMomentConfig.statefulFilters;

				return amAddFilter;
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amStartOf
		 * @module angularMoment
		 * @function
		 */
			.filter('amStartOf', ['moment', 'angularMomentConfig', function (moment, angularMomentConfig) {
				function amStartOfFilter(value, type) {

					if (isUndefinedOrNull(value)) {
						return '';
					}

					return moment(value).startOf(type);
				}

				amStartOfFilter.$stateful = angularMomentConfig.statefulFilters;

				return amStartOfFilter;
			}])

		/**
		 * @ngdoc filter
		 * @name angularMoment.filter:amEndOf
		 * @module angularMoment
		 * @function
		 */
			.filter('amEndOf', ['moment', 'angularMomentConfig', function (moment, angularMomentConfig) {
				function amEndOfFilter(value, type) {

					if (isUndefinedOrNull(value)) {
						return '';
					}

					return moment(value).endOf(type);
				}

				amEndOfFilter.$stateful = angularMomentConfig.statefulFilters;

				return amEndOfFilter;
 			}]);

		return 'angularMoment';
	}

	if (typeof define === 'function' && define.amd) {
		define(['angular', 'moment'], angularMoment);
	} else if (typeof module !== 'undefined' && module && module.exports && (typeof require === 'function')) {
		module.exports = angularMoment(require('angular'), require('moment'));
	} else {
		angularMoment(angular, (typeof global !== 'undefined' ? global : window).moment);
	}
})();

/*! angular-trix - v1.0.0 - 2015-12-09
* https://github.com/sachinchoolur/angular-trix
* Copyright (c) 2015 Sachin; Licensed MIT */
(function () {
	'use strict';
	angular.module('angularTrix', []).directive('angularTrix', function () {
		return {
			restrict: 'A',
			require: 'ngModel',
			scope: {
				trixInitialize: '&',
				trixChange: '&',
				trixSelectionChange: '&',
				trixFocus: '&',
				trixBlur: '&',
				trixFileAccept: '&',
				trixAttachmentAdd: '&',
				trixAttachmentRemove: '&'
			},
			link: function (scope, element, attrs, ngModel) {

				element.on('trix-initialize', function () {
					if (ngModel.$modelValue) {
						element[0].editor.loadHTML(ngModel.$modelValue);
					}
				});

				ngModel.$render = function () {
					if (element[0].editor) {
						element[0].editor.loadHTML(ngModel.$modelValue);
					}

					element.on('trix-change', function () {
						ngModel.$setViewValue(element[0].inputElement.value);
					});
				};

				var registerEvents = function (type, method) {
					element[0].addEventListener(type, function (e) {
						if (type === 'trix-file-accept' && attrs.preventTrixFileAccept === 'true') {
							e.preventDefault();
						}

						scope[method]({
							e: e,
							editor: element[0].editor
						});
					});
				};

				registerEvents('trix-initialize', 'trixInitialize');
				registerEvents('trix-change', 'trixChange');
				registerEvents('trix-selection-change', 'trixSelectionChange');
				registerEvents('trix-focus', 'trixFocus');
				registerEvents('trix-blur', 'trixBlur');
				registerEvents('trix-file-accept', 'trixFileAccept');
				registerEvents('trix-attachment-add', 'trixAttachmentAdd');
				registerEvents('trix-attachment-remove', 'trixAttachmentRemove');

			}
		};
	});

}());
/**
 * State-based routing for AngularJS
 * @version v0.3.2
 * @link http://angular-ui.github.com/
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */

/* commonjs package manager support (eg componentjs) */
if (typeof module !== "undefined" && typeof exports !== "undefined" && module.exports === exports) {
	module.exports = 'ui.router';
}

(function (window, angular, undefined) {
	/*jshint globalstrict:true*/
	/*global angular:false*/
	'use strict';

	var isDefined = angular.isDefined,
		isFunction = angular.isFunction,
		isString = angular.isString,
		isObject = angular.isObject,
		isArray = angular.isArray,
		forEach = angular.forEach,
		extend = angular.extend,
		copy = angular.copy,
		toJson = angular.toJson;

	function inherit(parent, extra) {
		return extend(new (extend(function () { }, { prototype: parent }))(), extra);
	}

	function merge(dst) {
		forEach(arguments, function (obj) {
			if (obj !== dst) {
				forEach(obj, function (value, key) {
					if (!dst.hasOwnProperty(key)) dst[key] = value;
				});
			}
		});
		return dst;
	}

	/**
	 * Finds the common ancestor path between two states.
	 *
	 * @param {Object} first The first state.
	 * @param {Object} second The second state.
	 * @return {Array} Returns an array of state names in descending order, not including the root.
	 */
	function ancestors(first, second) {
		var path = [];

		for (var n in first.path) {
			if (first.path[n] !== second.path[n]) break;
			path.push(first.path[n]);
		}
		return path;
	}

	/**
	 * IE8-safe wrapper for `Object.keys()`.
	 *
	 * @param {Object} object A JavaScript object.
	 * @return {Array} Returns the keys of the object as an array.
	 */
	function objectKeys(object) {
		if (Object.keys) {
			return Object.keys(object);
		}
		var result = [];

		forEach(object, function (val, key) {
			result.push(key);
		});
		return result;
	}

	/**
	 * IE8-safe wrapper for `Array.prototype.indexOf()`.
	 *
	 * @param {Array} array A JavaScript array.
	 * @param {*} value A value to search the array for.
	 * @return {Number} Returns the array index value of `value`, or `-1` if not present.
	 */
	function indexOf(array, value) {
		if (Array.prototype.indexOf) {
			return array.indexOf(value, Number(arguments[2]) || 0);
		}
		var len = array.length >>> 0, from = Number(arguments[2]) || 0;
		from = (from < 0) ? Math.ceil(from) : Math.floor(from);

		if (from < 0) from += len;

		for (; from < len; from++) {
			if (from in array && array[from] === value) return from;
		}
		return -1;
	}

	/**
	 * Merges a set of parameters with all parameters inherited between the common parents of the
	 * current state and a given destination state.
	 *
	 * @param {Object} currentParams The value of the current state parameters ($stateParams).
	 * @param {Object} newParams The set of parameters which will be composited with inherited params.
	 * @param {Object} $current Internal definition of object representing the current state.
	 * @param {Object} $to Internal definition of object representing state to transition to.
	 */
	function inheritParams(currentParams, newParams, $current, $to) {
		var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];

		for (var i in parents) {
			if (!parents[i] || !parents[i].params) continue;
			parentParams = objectKeys(parents[i].params);
			if (!parentParams.length) continue;

			for (var j in parentParams) {
				if (indexOf(inheritList, parentParams[j]) >= 0) continue;
				inheritList.push(parentParams[j]);
				inherited[parentParams[j]] = currentParams[parentParams[j]];
			}
		}
		return extend({}, inherited, newParams);
	}

	/**
	 * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
	 *
	 * @param {Object} a The first object.
	 * @param {Object} b The second object.
	 * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
	 *                     it defaults to the list of keys in `a`.
	 * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
	 */
	function equalForKeys(a, b, keys) {
		if (!keys) {
			keys = [];
			for (var n in a) keys.push(n); // Used instead of Object.keys() for IE8 compatibility
		}

		for (var i = 0; i < keys.length; i++) {
			var k = keys[i];
			if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized
		}
		return true;
	}

	/**
	 * Returns the subset of an object, based on a list of keys.
	 *
	 * @param {Array} keys
	 * @param {Object} values
	 * @return {Boolean} Returns a subset of `values`.
	 */
	function filterByKeys(keys, values) {
		var filtered = {};

		forEach(keys, function (name) {
			filtered[name] = values[name];
		});
		return filtered;
	}

	// like _.indexBy
	// when you know that your index values will be unique, or you want last-one-in to win
	function indexBy(array, propName) {
		var result = {};
		forEach(array, function (item) {
			result[item[propName]] = item;
		});
		return result;
	}

	// extracted from underscore.js
	// Return a copy of the object only containing the whitelisted properties.
	function pick(obj) {
		var copy = {};
		var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
		forEach(keys, function (key) {
			if (key in obj) copy[key] = obj[key];
		});
		return copy;
	}

	// extracted from underscore.js
	// Return a copy of the object omitting the blacklisted properties.
	function omit(obj) {
		var copy = {};
		var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
		for (var key in obj) {
			if (indexOf(keys, key) == -1) copy[key] = obj[key];
		}
		return copy;
	}

	function pluck(collection, key) {
		var result = isArray(collection) ? [] : {};

		forEach(collection, function (val, i) {
			result[i] = isFunction(key) ? key(val) : val[key];
		});
		return result;
	}

	function filter(collection, callback) {
		var array = isArray(collection);
		var result = array ? [] : {};
		forEach(collection, function (val, i) {
			if (callback(val, i)) {
				result[array ? result.length : i] = val;
			}
		});
		return result;
	}

	function map(collection, callback) {
		var result = isArray(collection) ? [] : {};

		forEach(collection, function (val, i) {
			result[i] = callback(val, i);
		});
		return result;
	}

	// issue #2676 #2889
	function silenceUncaughtInPromise(promise) {
		return promise.then(undefined, function () { }) && promise;
	}

	/**
	 * @ngdoc overview
	 * @name ui.router.util
	 *
	 * @description
	 * # ui.router.util sub-module
	 *
	 * This module is a dependency of other sub-modules. Do not include this module as a dependency
	 * in your angular app (use {@link ui.router} module instead).
	 *
	 */
	angular.module('ui.router.util', ['ng']);

	/**
	 * @ngdoc overview
	 * @name ui.router.router
	 * 
	 * @requires ui.router.util
	 *
	 * @description
	 * # ui.router.router sub-module
	 *
	 * This module is a dependency of other sub-modules. Do not include this module as a dependency
	 * in your angular app (use {@link ui.router} module instead).
	 */
	angular.module('ui.router.router', ['ui.router.util']);

	/**
	 * @ngdoc overview
	 * @name ui.router.state
	 * 
	 * @requires ui.router.router
	 * @requires ui.router.util
	 *
	 * @description
	 * # ui.router.state sub-module
	 *
	 * This module is a dependency of the main ui.router module. Do not include this module as a dependency
	 * in your angular app (use {@link ui.router} module instead).
	 * 
	 */
	angular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);

	/**
	 * @ngdoc overview
	 * @name ui.router
	 *
	 * @requires ui.router.state
	 *
	 * @description
	 * # ui.router
	 * 
	 * ## The main module for ui.router 
	 * There are several sub-modules included with the ui.router module, however only this module is needed
	 * as a dependency within your angular app. The other modules are for organization purposes. 
	 *
	 * The modules are:
	 * * ui.router - the main "umbrella" module
	 * * ui.router.router - 
	 * 
	 * *You'll need to include **only** this module as the dependency within your angular app.*
	 * 
	 * <pre>
	 * <!doctype html>
	 * <html ng-app="myApp">
	 * <head>
	 *   <script src="js/angular.js"></script>
	 *   <!-- Include the ui-router script -->
	 *   <script src="js/angular-ui-router.min.js"></script>
	 *   <script>
	 *     // ...and add 'ui.router' as a dependency
	 *     var myApp = angular.module('myApp', ['ui.router']);
	 *   </script>
	 * </head>
	 * <body>
	 * </body>
	 * </html>
	 * </pre>
	 */
	angular.module('ui.router', ['ui.router.state']);

	angular.module('ui.router.compat', ['ui.router']);

	/**
	 * @ngdoc object
	 * @name ui.router.util.$resolve
	 *
	 * @requires $q
	 * @requires $injector
	 *
	 * @description
	 * Manages resolution of (acyclic) graphs of promises.
	 */
	$Resolve.$inject = ['$q', '$injector'];
	function $Resolve($q, $injector) {

		var VISIT_IN_PROGRESS = 1,
			VISIT_DONE = 2,
			NOTHING = {},
			NO_DEPENDENCIES = [],
			NO_LOCALS = NOTHING,
			NO_PARENT = extend($q.when(NOTHING), { $$promises: NOTHING, $$values: NOTHING });


		/**
		 * @ngdoc function
		 * @name ui.router.util.$resolve#study
		 * @methodOf ui.router.util.$resolve
		 *
		 * @description
		 * Studies a set of invocables that are likely to be used multiple times.
		 * <pre>
		 * $resolve.study(invocables)(locals, parent, self)
		 * </pre>
		 * is equivalent to
		 * <pre>
		 * $resolve.resolve(invocables, locals, parent, self)
		 * </pre>
		 * but the former is more efficient (in fact `resolve` just calls `study` 
		 * internally).
		 *
		 * @param {object} invocables Invocable objects
		 * @return {function} a function to pass in locals, parent and self
		 */
		this.study = function (invocables) {
			if (!isObject(invocables)) throw new Error("'invocables' must be an object");
			var invocableKeys = objectKeys(invocables || {});

			// Perform a topological sort of invocables to build an ordered plan
			var plan = [], cycle = [], visited = {};
			function visit(value, key) {
				if (visited[key] === VISIT_DONE) return;

				cycle.push(key);
				if (visited[key] === VISIT_IN_PROGRESS) {
					cycle.splice(0, indexOf(cycle, key));
					throw new Error("Cyclic dependency: " + cycle.join(" -> "));
				}
				visited[key] = VISIT_IN_PROGRESS;

				if (isString(value)) {
					plan.push(key, [function () { return $injector.get(value); }], NO_DEPENDENCIES);
				} else {
					var params = $injector.annotate(value);
					forEach(params, function (param) {
						if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);
					});
					plan.push(key, value, params);
				}

				cycle.pop();
				visited[key] = VISIT_DONE;
			}
			forEach(invocables, visit);
			invocables = cycle = visited = null; // plan is all that's required

			function isResolve(value) {
				return isObject(value) && value.then && value.$$promises;
			}

			return function (locals, parent, self) {
				if (isResolve(locals) && self === undefined) {
					self = parent; parent = locals; locals = null;
				}
				if (!locals) locals = NO_LOCALS;
				else if (!isObject(locals)) {
					throw new Error("'locals' must be an object");
				}
				if (!parent) parent = NO_PARENT;
				else if (!isResolve(parent)) {
					throw new Error("'parent' must be a promise returned by $resolve.resolve()");
				}

				// To complete the overall resolution, we have to wait for the parent
				// promise and for the promise for each invokable in our plan.
				var resolution = $q.defer(),
					result = resolution.promise,
					promises = result.$$promises = {},
					values = extend({}, locals),
					wait = 1 + plan.length / 3,
					merged = false;

				function done() {
					// Merge parent values we haven't got yet and publish our own $$values
					if (!--wait) {
						if (!merged) merge(values, parent.$$values);
						result.$$values = values;
						result.$$promises = result.$$promises || true; // keep for isResolve()
						delete result.$$inheritedValues;
						resolution.resolve(values);
					}
				}

				function fail(reason) {
					result.$$failure = reason;
					resolution.reject(reason);
				}

				// Short-circuit if parent has already failed
				if (isDefined(parent.$$failure)) {
					fail(parent.$$failure);
					return result;
				}

				if (parent.$$inheritedValues) {
					merge(values, omit(parent.$$inheritedValues, invocableKeys));
				}

				// Merge parent values if the parent has already resolved, or merge
				// parent promises and wait if the parent resolve is still in progress.
				extend(promises, parent.$$promises);
				if (parent.$$values) {
					merged = merge(values, omit(parent.$$values, invocableKeys));
					result.$$inheritedValues = omit(parent.$$values, invocableKeys);
					done();
				} else {
					if (parent.$$inheritedValues) {
						result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);
					}
					parent.then(done, fail);
				}

				// Process each invocable in the plan, but ignore any where a local of the same name exists.
				for (var i = 0, ii = plan.length; i < ii; i += 3) {
					if (locals.hasOwnProperty(plan[i])) done();
					else invoke(plan[i], plan[i + 1], plan[i + 2]);
				}

				function invoke(key, invocable, params) {
					// Create a deferred for this invocation. Failures will propagate to the resolution as well.
					var invocation = $q.defer(), waitParams = 0;
					function onfailure(reason) {
						invocation.reject(reason);
						fail(reason);
					}
					// Wait for any parameter that we have a promise for (either from parent or from this
					// resolve; in that case study() will have made sure it's ordered before us in the plan).
					forEach(params, function (dep) {
						if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
							waitParams++;
							promises[dep].then(function (result) {
								values[dep] = result;
								if (!(--waitParams)) proceed();
							}, onfailure);
						}
					});
					if (!waitParams) proceed();
					function proceed() {
						if (isDefined(result.$$failure)) return;
						try {
							invocation.resolve($injector.invoke(invocable, self, values));
							invocation.promise.then(function (result) {
								values[key] = result;
								done();
							}, onfailure);
						} catch (e) {
							onfailure(e);
						}
					}
					// Publish promise synchronously; invocations further down in the plan may depend on it.
					promises[key] = invocation.promise;
				}

				return result;
			};
		};

		/**
		 * @ngdoc function
		 * @name ui.router.util.$resolve#resolve
		 * @methodOf ui.router.util.$resolve
		 *
		 * @description
		 * Resolves a set of invocables. An invocable is a function to be invoked via 
		 * `$injector.invoke()`, and can have an arbitrary number of dependencies. 
		 * An invocable can either return a value directly,
		 * or a `$q` promise. If a promise is returned it will be resolved and the 
		 * resulting value will be used instead. Dependencies of invocables are resolved 
		 * (in this order of precedence)
		 *
		 * - from the specified `locals`
		 * - from another invocable that is part of this `$resolve` call
		 * - from an invocable that is inherited from a `parent` call to `$resolve` 
		 *   (or recursively
		 * - from any ancestor `$resolve` of that parent).
		 *
		 * The return value of `$resolve` is a promise for an object that contains 
		 * (in this order of precedence)
		 *
		 * - any `locals` (if specified)
		 * - the resolved return values of all injectables
		 * - any values inherited from a `parent` call to `$resolve` (if specified)
		 *
		 * The promise will resolve after the `parent` promise (if any) and all promises 
		 * returned by injectables have been resolved. If any invocable 
		 * (or `$injector.invoke`) throws an exception, or if a promise returned by an 
		 * invocable is rejected, the `$resolve` promise is immediately rejected with the 
		 * same error. A rejection of a `parent` promise (if specified) will likewise be 
		 * propagated immediately. Once the `$resolve` promise has been rejected, no 
		 * further invocables will be called.
		 * 
		 * Cyclic dependencies between invocables are not permitted and will cause `$resolve`
		 * to throw an error. As a special case, an injectable can depend on a parameter 
		 * with the same name as the injectable, which will be fulfilled from the `parent` 
		 * injectable of the same name. This allows inherited values to be decorated. 
		 * Note that in this case any other injectable in the same `$resolve` with the same
		 * dependency would see the decorated value, not the inherited value.
		 *
		 * Note that missing dependencies -- unlike cyclic dependencies -- will cause an 
		 * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous) 
		 * exception.
		 *
		 * Invocables are invoked eagerly as soon as all dependencies are available. 
		 * This is true even for dependencies inherited from a `parent` call to `$resolve`.
		 *
		 * As a special case, an invocable can be a string, in which case it is taken to 
		 * be a service name to be passed to `$injector.get()`. This is supported primarily 
		 * for backwards-compatibility with the `resolve` property of `$routeProvider` 
		 * routes.
		 *
		 * @param {object} invocables functions to invoke or 
		 * `$injector` services to fetch.
		 * @param {object} locals  values to make available to the injectables
		 * @param {object} parent  a promise returned by another call to `$resolve`.
		 * @param {object} self  the `this` for the invoked methods
		 * @return {object} Promise for an object that contains the resolved return value
		 * of all invocables, as well as any inherited and local values.
		 */
		this.resolve = function (invocables, locals, parent, self) {
			return this.study(invocables)(locals, parent, self);
		};
	}

	angular.module('ui.router.util').service('$resolve', $Resolve);


	/**
	 * @ngdoc object
	 * @name ui.router.util.$templateFactory
	 *
	 * @requires $http
	 * @requires $templateCache
	 * @requires $injector
	 *
	 * @description
	 * Service. Manages loading of templates.
	 */
	$TemplateFactory.$inject = ['$http', '$templateCache', '$injector'];
	function $TemplateFactory($http, $templateCache, $injector) {

		/**
		 * @ngdoc function
		 * @name ui.router.util.$templateFactory#fromConfig
		 * @methodOf ui.router.util.$templateFactory
		 *
		 * @description
		 * Creates a template from a configuration object. 
		 *
		 * @param {object} config Configuration object for which to load a template. 
		 * The following properties are search in the specified order, and the first one 
		 * that is defined is used to create the template:
		 *
		 * @param {string|object} config.template html string template or function to 
		 * load via {@link ui.router.util.$templateFactory#fromString fromString}.
		 * @param {string|object} config.templateUrl url to load or a function returning 
		 * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.
		 * @param {Function} config.templateProvider function to invoke via 
		 * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.
		 * @param {object} params  Parameters to pass to the template function.
		 * @param {object} locals Locals to pass to `invoke` if the template is loaded 
		 * via a `templateProvider`. Defaults to `{ params: params }`.
		 *
		 * @return {string|object}  The template html as a string, or a promise for 
		 * that string,or `null` if no template is configured.
		 */
		this.fromConfig = function (config, params, locals) {
			return (
			  isDefined(config.template) ? this.fromString(config.template, params) :
			  isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :
			  isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) :
			  null
			);
		};

		/**
		 * @ngdoc function
		 * @name ui.router.util.$templateFactory#fromString
		 * @methodOf ui.router.util.$templateFactory
		 *
		 * @description
		 * Creates a template from a string or a function returning a string.
		 *
		 * @param {string|object} template html template as a string or function that 
		 * returns an html template as a string.
		 * @param {object} params Parameters to pass to the template function.
		 *
		 * @return {string|object} The template html as a string, or a promise for that 
		 * string.
		 */
		this.fromString = function (template, params) {
			return isFunction(template) ? template(params) : template;
		};

		/**
		 * @ngdoc function
		 * @name ui.router.util.$templateFactory#fromUrl
		 * @methodOf ui.router.util.$templateFactory
		 * 
		 * @description
		 * Loads a template from the a URL via `$http` and `$templateCache`.
		 *
		 * @param {string|Function} url url of the template to load, or a function 
		 * that returns a url.
		 * @param {Object} params Parameters to pass to the url function.
		 * @return {string|Promise.<string>} The template html as a string, or a promise 
		 * for that string.
		 */
		this.fromUrl = function (url, params) {
			if (isFunction(url)) url = url(params);
			if (url == null) return null;
			else return $http
				.get(url, { cache: $templateCache, headers: { Accept: 'text/html' } })
				.then(function (response) { return response.data; });
		};

		/**
		 * @ngdoc function
		 * @name ui.router.util.$templateFactory#fromProvider
		 * @methodOf ui.router.util.$templateFactory
		 *
		 * @description
		 * Creates a template by invoking an injectable provider function.
		 *
		 * @param {Function} provider Function to invoke via `$injector.invoke`
		 * @param {Object} params Parameters for the template.
		 * @param {Object} locals Locals to pass to `invoke`. Defaults to 
		 * `{ params: params }`.
		 * @return {string|Promise.<string>} The template html as a string, or a promise 
		 * for that string.
		 */
		this.fromProvider = function (provider, params, locals) {
			return $injector.invoke(provider, null, locals || { params: params });
		};
	}

	angular.module('ui.router.util').service('$templateFactory', $TemplateFactory);

	var $$UMFP; // reference to $UrlMatcherFactoryProvider

	/**
	 * @ngdoc object
	 * @name ui.router.util.type:UrlMatcher
	 *
	 * @description
	 * Matches URLs against patterns and extracts named parameters from the path or the search
	 * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list
	 * of search parameters. Multiple search parameter names are separated by '&'. Search parameters
	 * do not influence whether or not a URL is matched, but their values are passed through into
	 * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.
	 *
	 * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace
	 * syntax, which optionally allows a regular expression for the parameter to be specified:
	 *
	 * * `':'` name - colon placeholder
	 * * `'*'` name - catch-all placeholder
	 * * `'{' name '}'` - curly placeholder
	 * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the
	 *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.
	 *
	 * Parameter names may contain only word characters (latin letters, digits, and underscore) and
	 * must be unique within the pattern (across both path and search parameters). For colon
	 * placeholders or curly placeholders without an explicit regexp, a path parameter matches any
	 * number of characters other than '/'. For catch-all placeholders the path parameter matches
	 * any number of characters.
	 *
	 * Examples:
	 *
	 * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
	 *   trailing slashes, and patterns have to match the entire path, not just a prefix.
	 * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
	 *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
	 * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
	 * * `'/user/{id:[^/]*}'` - Same as the previous example.
	 * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
	 *   parameter consists of 1 to 8 hex digits.
	 * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
	 *   path into the parameter 'path'.
	 * * `'/files/*path'` - ditto.
	 * * `'/calendar/{start:date}'` - Matches "/calendar/2014-11-12" (because the pattern defined
	 *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start
	 *
	 * @param {string} pattern  The pattern to compile into a matcher.
	 * @param {Object} config  A configuration object hash:
	 * @param {Object=} parentMatcher Used to concatenate the pattern/config onto
	 *   an existing UrlMatcher
	 *
	 * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.
	 * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.
	 *
	 * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any
	 *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns
	 *   non-null) will start with this prefix.
	 *
	 * @property {string} source  The pattern that was passed into the constructor
	 *
	 * @property {string} sourcePath  The path portion of the source property
	 *
	 * @property {string} sourceSearch  The search portion of the source property
	 *
	 * @property {string} regex  The constructed regex that will be used to match against the url when
	 *   it is time to determine which url will match.
	 *
	 * @returns {Object}  New `UrlMatcher` object
	 */
	function UrlMatcher(pattern, config, parentMatcher) {
		config = extend({ params: {} }, isObject(config) ? config : {});

		// Find all placeholders and create a compiled pattern, using either classic or curly syntax:
		//   '*' name
		//   ':' name
		//   '{' name '}'
		//   '{' name ':' regexp '}'
		// The regular expression is somewhat complicated due to the need to allow curly braces
		// inside the regular expression. The placeholder regexp breaks down as follows:
		//    ([:*])([\w\[\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)
		//    \{([\w\[\]]+)(?:\:\s*( ... ))?\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case
		//    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either
		//    [^{}\\]+                       - anything other than curly braces or backslash
		//    \\.                            - a backslash escape
		//    \{(?:[^{}\\]+|\\.)*\}          - a matched set of curly braces containing other atoms
		var placeholder = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
			searchPlaceholder = /([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
			compiled = '^', last = 0, m,
			segments = this.segments = [],
			parentParams = parentMatcher ? parentMatcher.params : {},
			params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(),
			paramNames = [];

		function addParameter(id, type, config, location) {
			paramNames.push(id);
			if (parentParams[id]) return parentParams[id];
			if (!/^\w+([-.]+\w+)*(?:\[\])?$/.test(id)) throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
			if (params[id]) throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
			params[id] = new $$UMFP.Param(id, type, config, location);
			return params[id];
		}

		function quoteRegExp(string, pattern, squash, optional) {
			var surroundPattern = ['', ''], result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
			if (!pattern) return result;
			switch (squash) {
				case false: surroundPattern = ['(', ')' + (optional ? "?" : "")]; break;
				case true:
					result = result.replace(/\/$/, '');
					surroundPattern = ['(?:\/(', ')|\/)?'];
					break;
				default: surroundPattern = ['(' + squash + "|", ')?']; break;
			}
			return result + surroundPattern[0] + pattern + surroundPattern[1];
		}

		this.source = pattern;

		// Split into static segments separated by path parameter placeholders.
		// The number of segments is always 1 more than the number of parameters.
		function matchDetails(m, isSearch) {
			var id, regexp, segment, type, cfg, arrayMode;
			id = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null
			cfg = config.params[id];
			segment = pattern.substring(last, m.index);
			regexp = isSearch ? m[4] : m[4] || (m[1] == '*' ? '.*' : null);

			if (regexp) {
				type = $$UMFP.type(regexp) || inherit($$UMFP.type("string"), { pattern: new RegExp(regexp, config.caseInsensitive ? 'i' : undefined) });
			}

			return {
				id: id, regexp: regexp, segment: segment, type: type, cfg: cfg
			};
		}

		var p, param, segment;
		while ((m = placeholder.exec(pattern))) {
			p = matchDetails(m, false);
			if (p.segment.indexOf('?') >= 0) break; // we're into the search part

			param = addParameter(p.id, p.type, p.cfg, "path");
			compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash, param.isOptional);
			segments.push(p.segment);
			last = placeholder.lastIndex;
		}
		segment = pattern.substring(last);

		// Find any search parameter names and remove them from the last segment
		var i = segment.indexOf('?');

		if (i >= 0) {
			var search = this.sourceSearch = segment.substring(i);
			segment = segment.substring(0, i);
			this.sourcePath = pattern.substring(0, last + i);

			if (search.length > 0) {
				last = 0;
				while ((m = searchPlaceholder.exec(search))) {
					p = matchDetails(m, true);
					param = addParameter(p.id, p.type, p.cfg, "search");
					last = placeholder.lastIndex;
					// check if ?&
				}
			}
		} else {
			this.sourcePath = pattern;
			this.sourceSearch = '';
		}

		compiled += quoteRegExp(segment) + (config.strict === false ? '\/?' : '') + '$';
		segments.push(segment);

		this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);
		this.prefix = segments[0];
		this.$$paramNames = paramNames;
	}

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:UrlMatcher#concat
	 * @methodOf ui.router.util.type:UrlMatcher
	 *
	 * @description
	 * Returns a new matcher for a pattern constructed by appending the path part and adding the
	 * search parameters of the specified pattern to this pattern. The current pattern is not
	 * modified. This can be understood as creating a pattern for URLs that are relative to (or
	 * suffixes of) the current pattern.
	 *
	 * @example
	 * The following two matchers are equivalent:
	 * <pre>
	 * new UrlMatcher('/user/{id}?q').concat('/details?date');
	 * new UrlMatcher('/user/{id}/details?q&date');
	 * </pre>
	 *
	 * @param {string} pattern  The pattern to append.
	 * @param {Object} config  An object hash of the configuration for the matcher.
	 * @returns {UrlMatcher}  A matcher for the concatenated pattern.
	 */
	UrlMatcher.prototype.concat = function (pattern, config) {
		// Because order of search parameters is irrelevant, we can add our own search
		// parameters to the end of the new pattern. Parse the new pattern by itself
		// and then join the bits together, but it's much easier to do this on a string level.
		var defaultConfig = {
			caseInsensitive: $$UMFP.caseInsensitive(),
			strict: $$UMFP.strictMode(),
			squash: $$UMFP.defaultSquashPolicy()
		};
		return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);
	};

	UrlMatcher.prototype.toString = function () {
		return this.source;
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:UrlMatcher#exec
	 * @methodOf ui.router.util.type:UrlMatcher
	 *
	 * @description
	 * Tests the specified path against this matcher, and returns an object containing the captured
	 * parameter values, or null if the path does not match. The returned object contains the values
	 * of any search parameters that are mentioned in the pattern, but their value may be null if
	 * they are not present in `searchParams`. This means that search parameters are always treated
	 * as optional.
	 *
	 * @example
	 * <pre>
	 * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {
	 *   x: '1', q: 'hello'
	 * });
	 * // returns { id: 'bob', q: 'hello', r: null }
	 * </pre>
	 *
	 * @param {string} path  The URL path to match, e.g. `$location.path()`.
	 * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.
	 * @returns {Object}  The captured parameter values.
	 */
	UrlMatcher.prototype.exec = function (path, searchParams) {
		var m = this.regexp.exec(path);
		if (!m) return null;
		searchParams = searchParams || {};

		var paramNames = this.parameters(), nTotal = paramNames.length,
		  nPath = this.segments.length - 1,
		  values = {}, i, j, cfg, paramName;

		if (nPath !== m.length - 1) throw new Error("Unbalanced capture group in route '" + this.source + "'");

		function decodePathArray(string) {
			function reverseString(str) { return str.split("").reverse().join(""); }
			function unquoteDashes(str) { return str.replace(/\\-/g, "-"); }

			var split = reverseString(string).split(/-(?!\\)/);
			var allReversed = map(split, reverseString);
			return map(allReversed, unquoteDashes).reverse();
		}

		var param, paramVal;
		for (i = 0; i < nPath; i++) {
			paramName = paramNames[i];
			param = this.params[paramName];
			paramVal = m[i + 1];
			// if the param value matches a pre-replace pair, replace the value before decoding.
			for (j = 0; j < param.replace.length; j++) {
				if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;
			}
			if (paramVal && param.array === true) paramVal = decodePathArray(paramVal);
			if (isDefined(paramVal)) paramVal = param.type.decode(paramVal);
			values[paramName] = param.value(paramVal);
		}
		for (/**/; i < nTotal; i++) {
			paramName = paramNames[i];
			values[paramName] = this.params[paramName].value(searchParams[paramName]);
			param = this.params[paramName];
			paramVal = searchParams[paramName];
			for (j = 0; j < param.replace.length; j++) {
				if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;
			}
			if (isDefined(paramVal)) paramVal = param.type.decode(paramVal);
			values[paramName] = param.value(paramVal);
		}

		return values;
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:UrlMatcher#parameters
	 * @methodOf ui.router.util.type:UrlMatcher
	 *
	 * @description
	 * Returns the names of all path and search parameters of this pattern in an unspecified order.
	 *
	 * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the
	 *    pattern has no parameters, an empty array is returned.
	 */
	UrlMatcher.prototype.parameters = function (param) {
		if (!isDefined(param)) return this.$$paramNames;
		return this.params[param] || null;
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:UrlMatcher#validates
	 * @methodOf ui.router.util.type:UrlMatcher
	 *
	 * @description
	 * Checks an object hash of parameters to validate their correctness according to the parameter
	 * types of this `UrlMatcher`.
	 *
	 * @param {Object} params The object hash of parameters to validate.
	 * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.
	 */
	UrlMatcher.prototype.validates = function (params) {
		return this.params.$$validates(params);
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:UrlMatcher#format
	 * @methodOf ui.router.util.type:UrlMatcher
	 *
	 * @description
	 * Creates a URL that matches this pattern by substituting the specified values
	 * for the path and search parameters. Null values for path parameters are
	 * treated as empty strings.
	 *
	 * @example
	 * <pre>
	 * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
	 * // returns '/user/bob?q=yes'
	 * </pre>
	 *
	 * @param {Object} values  the values to substitute for the parameters in this pattern.
	 * @returns {string}  the formatted URL (path and optionally search part).
	 */
	UrlMatcher.prototype.format = function (values) {
		values = values || {};
		var segments = this.segments, params = this.parameters(), paramset = this.params;
		if (!this.validates(values)) return null;

		var i, search = false, nPath = segments.length - 1, nTotal = params.length, result = segments[0];

		function encodeDashes(str) { // Replace dashes with encoded "\-"
			return encodeURIComponent(str).replace(/-/g, function (c) { return '%5C%' + c.charCodeAt(0).toString(16).toUpperCase(); });
		}

		for (i = 0; i < nTotal; i++) {
			var isPathParam = i < nPath;
			var name = params[i], param = paramset[name], value = param.value(values[name]);
			var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);
			var squash = isDefaultValue ? param.squash : false;
			var encoded = param.type.encode(value);

			if (isPathParam) {
				var nextSegment = segments[i + 1];
				var isFinalPathParam = i + 1 === nPath;

				if (squash === false) {
					if (encoded != null) {
						if (isArray(encoded)) {
							result += map(encoded, encodeDashes).join("-");
						} else {
							result += encodeURIComponent(encoded);
						}
					}
					result += nextSegment;
				} else if (squash === true) {
					var capture = result.match(/\/$/) ? /\/?(.*)/ : /(.*)/;
					result += nextSegment.match(capture)[1];
				} else if (isString(squash)) {
					result += squash + nextSegment;
				}

				if (isFinalPathParam && param.squash === true && result.slice(-1) === '/') result = result.slice(0, -1);
			} else {
				if (encoded == null || (isDefaultValue && squash !== false)) continue;
				if (!isArray(encoded)) encoded = [encoded];
				if (encoded.length === 0) continue;
				encoded = map(encoded, encodeURIComponent).join('&' + name + '=');
				result += (search ? '&' : '?') + (name + '=' + encoded);
				search = true;
			}
		}

		return result;
	};

	/**
	 * @ngdoc object
	 * @name ui.router.util.type:Type
	 *
	 * @description
	 * Implements an interface to define custom parameter types that can be decoded from and encoded to
	 * string parameters matched in a URL. Used by {@link ui.router.util.type:UrlMatcher `UrlMatcher`}
	 * objects when matching or formatting URLs, or comparing or validating parameter values.
	 *
	 * See {@link ui.router.util.$urlMatcherFactory#methods_type `$urlMatcherFactory#type()`} for more
	 * information on registering custom types.
	 *
	 * @param {Object} config  A configuration object which contains the custom type definition.  The object's
	 *        properties will override the default methods and/or pattern in `Type`'s public interface.
	 * @example
	 * <pre>
	 * {
	 *   decode: function(val) { return parseInt(val, 10); },
	 *   encode: function(val) { return val && val.toString(); },
	 *   equals: function(a, b) { return this.is(a) && a === b; },
	 *   is: function(val) { return angular.isNumber(val) isFinite(val) && val % 1 === 0; },
	 *   pattern: /\d+/
	 * }
	 * </pre>
	 *
	 * @property {RegExp} pattern The regular expression pattern used to match values of this type when
	 *           coming from a substring of a URL.
	 *
	 * @returns {Object}  Returns a new `Type` object.
	 */
	function Type(config) {
		extend(this, config);
	}

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:Type#is
	 * @methodOf ui.router.util.type:Type
	 *
	 * @description
	 * Detects whether a value is of a particular type. Accepts a native (decoded) value
	 * and determines whether it matches the current `Type` object.
	 *
	 * @param {*} val  The value to check.
	 * @param {string} key  Optional. If the type check is happening in the context of a specific
	 *        {@link ui.router.util.type:UrlMatcher `UrlMatcher`} object, this is the name of the
	 *        parameter in which `val` is stored. Can be used for meta-programming of `Type` objects.
	 * @returns {Boolean}  Returns `true` if the value matches the type, otherwise `false`.
	 */
	Type.prototype.is = function (val, key) {
		return true;
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:Type#encode
	 * @methodOf ui.router.util.type:Type
	 *
	 * @description
	 * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the
	 * return value does *not* need to be URL-safe (i.e. passed through `encodeURIComponent()`), it
	 * only needs to be a representation of `val` that has been coerced to a string.
	 *
	 * @param {*} val  The value to encode.
	 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
	 *        meta-programming of `Type` objects.
	 * @returns {string}  Returns a string representation of `val` that can be encoded in a URL.
	 */
	Type.prototype.encode = function (val, key) {
		return val;
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:Type#decode
	 * @methodOf ui.router.util.type:Type
	 *
	 * @description
	 * Converts a parameter value (from URL string or transition param) to a custom/native value.
	 *
	 * @param {string} val  The URL parameter value to decode.
	 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
	 *        meta-programming of `Type` objects.
	 * @returns {*}  Returns a custom representation of the URL parameter value.
	 */
	Type.prototype.decode = function (val, key) {
		return val;
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:Type#equals
	 * @methodOf ui.router.util.type:Type
	 *
	 * @description
	 * Determines whether two decoded values are equivalent.
	 *
	 * @param {*} a  A value to compare against.
	 * @param {*} b  A value to compare against.
	 * @returns {Boolean}  Returns `true` if the values are equivalent/equal, otherwise `false`.
	 */
	Type.prototype.equals = function (a, b) {
		return a == b;
	};

	Type.prototype.$subPattern = function () {
		var sub = this.pattern.toString();
		return sub.substr(1, sub.length - 2);
	};

	Type.prototype.pattern = /.*/;

	Type.prototype.toString = function () { return "{Type:" + this.name + "}"; };

	/** Given an encoded string, or a decoded object, returns a decoded object */
	Type.prototype.$normalize = function (val) {
		return this.is(val) ? val : this.decode(val);
	};

	/*
	 * Wraps an existing custom Type as an array of Type, depending on 'mode'.
	 * e.g.:
	 * - urlmatcher pattern "/path?{queryParam[]:int}"
	 * - url: "/path?queryParam=1&queryParam=2
	 * - $stateParams.queryParam will be [1, 2]
	 * if `mode` is "auto", then
	 * - url: "/path?queryParam=1 will create $stateParams.queryParam: 1
	 * - url: "/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]
	 */
	Type.prototype.$asArray = function (mode, isSearch) {
		if (!mode) return this;
		if (mode === "auto" && !isSearch) throw new Error("'auto' array mode is for query parameters only");

		function ArrayType(type, mode) {
			function bindTo(type, callbackName) {
				return function () {
					return type[callbackName].apply(type, arguments);
				};
			}

			// Wrap non-array value as array
			function arrayWrap(val) { return isArray(val) ? val : (isDefined(val) ? [val] : []); }
			// Unwrap array value for "auto" mode. Return undefined for empty array.
			function arrayUnwrap(val) {
				switch (val.length) {
					case 0: return undefined;
					case 1: return mode === "auto" ? val[0] : val;
					default: return val;
				}
			}
			function falsey(val) { return !val; }

			// Wraps type (.is/.encode/.decode) functions to operate on each value of an array
			function arrayHandler(callback, allTruthyMode) {
				return function handleArray(val) {
					if (isArray(val) && val.length === 0) return val;
					val = arrayWrap(val);
					var result = map(val, callback);
					if (allTruthyMode === true)
						return filter(result, falsey).length === 0;
					return arrayUnwrap(result);
				};
			}

			// Wraps type (.equals) functions to operate on each value of an array
			function arrayEqualsHandler(callback) {
				return function handleArray(val1, val2) {
					var left = arrayWrap(val1), right = arrayWrap(val2);
					if (left.length !== right.length) return false;
					for (var i = 0; i < left.length; i++) {
						if (!callback(left[i], right[i])) return false;
					}
					return true;
				};
			}

			this.encode = arrayHandler(bindTo(type, 'encode'));
			this.decode = arrayHandler(bindTo(type, 'decode'));
			this.is = arrayHandler(bindTo(type, 'is'), true);
			this.equals = arrayEqualsHandler(bindTo(type, 'equals'));
			this.pattern = type.pattern;
			this.$normalize = arrayHandler(bindTo(type, '$normalize'));
			this.name = type.name;
			this.$arrayMode = mode;
		}

		return new ArrayType(this, mode);
	};



	/**
	 * @ngdoc object
	 * @name ui.router.util.$urlMatcherFactory
	 *
	 * @description
	 * Factory for {@link ui.router.util.type:UrlMatcher `UrlMatcher`} instances. The factory
	 * is also available to providers under the name `$urlMatcherFactoryProvider`.
	 */
	function $UrlMatcherFactory() {
		$$UMFP = this;

		var isCaseInsensitive = false, isStrictMode = true, defaultSquashPolicy = false;

		// Use tildes to pre-encode slashes.
		// If the slashes are simply URLEncoded, the browser can choose to pre-decode them,
		// and bidirectional encoding/decoding fails.
		// Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character
		function valToString(val) { return val != null ? val.toString().replace(/(~|\/)/g, function (m) { return { '~': '~~', '/': '~2F' }[m]; }) : val; }
		function valFromString(val) { return val != null ? val.toString().replace(/(~~|~2F)/g, function (m) { return { '~~': '~', '~2F': '/' }[m]; }) : val; }

		var $types = {}, enqueue = true, typeQueue = [], injector, defaultTypes = {
			"string": {
				encode: valToString,
				decode: valFromString,
				// TODO: in 1.0, make string .is() return false if value is undefined/null by default.
				// In 0.2.x, string params are optional by default for backwards compat
				is: function (val) { return val == null || !isDefined(val) || typeof val === "string"; },
				pattern: /[^/]*/
			},
			"int": {
				encode: valToString,
				decode: function (val) { return parseInt(val, 10); },
				is: function (val) { return isDefined(val) && this.decode(val.toString()) === val; },
				pattern: /\d+/
			},
			"bool": {
				encode: function (val) { return val ? 1 : 0; },
				decode: function (val) { return parseInt(val, 10) !== 0; },
				is: function (val) { return val === true || val === false; },
				pattern: /0|1/
			},
			"date": {
				encode: function (val) {
					if (!this.is(val))
						return undefined;
					return [val.getFullYear(),
					  ('0' + (val.getMonth() + 1)).slice(-2),
					  ('0' + val.getDate()).slice(-2)
					].join("-");
				},
				decode: function (val) {
					if (this.is(val)) return val;
					var match = this.capture.exec(val);
					return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
				},
				is: function (val) { return val instanceof Date && !isNaN(val.valueOf()); },
				equals: function (a, b) { return this.is(a) && this.is(b) && a.toISOString() === b.toISOString(); },
				pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
				capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
			},
			"json": {
				encode: angular.toJson,
				decode: angular.fromJson,
				is: angular.isObject,
				equals: angular.equals,
				pattern: /[^/]*/
			},
			"any": { // does not encode/decode
				encode: angular.identity,
				decode: angular.identity,
				equals: angular.equals,
				pattern: /.*/
			}
		};

		function getDefaultConfig() {
			return {
				strict: isStrictMode,
				caseInsensitive: isCaseInsensitive
			};
		}

		function isInjectable(value) {
			return (isFunction(value) || (isArray(value) && isFunction(value[value.length - 1])));
		}

		/**
		 * [Internal] Get the default value of a parameter, which may be an injectable function.
		 */
		$UrlMatcherFactory.$$getDefaultValue = function (config) {
			if (!isInjectable(config.value)) return config.value;
			if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
			return injector.invoke(config.value);
		};

		/**
		 * @ngdoc function
		 * @name ui.router.util.$urlMatcherFactory#caseInsensitive
		 * @methodOf ui.router.util.$urlMatcherFactory
		 *
		 * @description
		 * Defines whether URL matching should be case sensitive (the default behavior), or not.
		 *
		 * @param {boolean} value `false` to match URL in a case sensitive manner; otherwise `true`;
		 * @returns {boolean} the current value of caseInsensitive
		 */
		this.caseInsensitive = function (value) {
			if (isDefined(value))
				isCaseInsensitive = value;
			return isCaseInsensitive;
		};

		/**
		 * @ngdoc function
		 * @name ui.router.util.$urlMatcherFactory#strictMode
		 * @methodOf ui.router.util.$urlMatcherFactory
		 *
		 * @description
		 * Defines whether URLs should match trailing slashes, or not (the default behavior).
		 *
		 * @param {boolean=} value `false` to match trailing slashes in URLs, otherwise `true`.
		 * @returns {boolean} the current value of strictMode
		 */
		this.strictMode = function (value) {
			if (isDefined(value))
				isStrictMode = value;
			return isStrictMode;
		};

		/**
		 * @ngdoc function
		 * @name ui.router.util.$urlMatcherFactory#defaultSquashPolicy
		 * @methodOf ui.router.util.$urlMatcherFactory
		 *
		 * @description
		 * Sets the default behavior when generating or matching URLs with default parameter values.
		 *
		 * @param {string} value A string that defines the default parameter URL squashing behavior.
		 *    `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL
		 *    `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the
		 *             parameter is surrounded by slashes, squash (remove) one slash from the URL
		 *    any other string, e.g. "~": When generating an href with a default parameter value, squash (remove)
		 *             the parameter value from the URL and replace it with this string.
		 */
		this.defaultSquashPolicy = function (value) {
			if (!isDefined(value)) return defaultSquashPolicy;
			if (value !== true && value !== false && !isString(value))
				throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");
			defaultSquashPolicy = value;
			return value;
		};

		/**
		 * @ngdoc function
		 * @name ui.router.util.$urlMatcherFactory#compile
		 * @methodOf ui.router.util.$urlMatcherFactory
		 *
		 * @description
		 * Creates a {@link ui.router.util.type:UrlMatcher `UrlMatcher`} for the specified pattern.
		 *
		 * @param {string} pattern  The URL pattern.
		 * @param {Object} config  The config object hash.
		 * @returns {UrlMatcher}  The UrlMatcher.
		 */
		this.compile = function (pattern, config) {
			return new UrlMatcher(pattern, extend(getDefaultConfig(), config));
		};

		/**
		 * @ngdoc function
		 * @name ui.router.util.$urlMatcherFactory#isMatcher
		 * @methodOf ui.router.util.$urlMatcherFactory
		 *
		 * @description
		 * Returns true if the specified object is a `UrlMatcher`, or false otherwise.
		 *
		 * @param {Object} object  The object to perform the type check against.
		 * @returns {Boolean}  Returns `true` if the object matches the `UrlMatcher` interface, by
		 *          implementing all the same methods.
		 */
		this.isMatcher = function (o) {
			if (!isObject(o)) return false;
			var result = true;

			forEach(UrlMatcher.prototype, function (val, name) {
				if (isFunction(val)) {
					result = result && (isDefined(o[name]) && isFunction(o[name]));
				}
			});
			return result;
		};

		/**
		 * @ngdoc function
		 * @name ui.router.util.$urlMatcherFactory#type
		 * @methodOf ui.router.util.$urlMatcherFactory
		 *
		 * @description
		 * Registers a custom {@link ui.router.util.type:Type `Type`} object that can be used to
		 * generate URLs with typed parameters.
		 *
		 * @param {string} name  The type name.
		 * @param {Object|Function} definition   The type definition. See
		 *        {@link ui.router.util.type:Type `Type`} for information on the values accepted.
		 * @param {Object|Function} definitionFn (optional) A function that is injected before the app
		 *        runtime starts.  The result of this function is merged into the existing `definition`.
		 *        See {@link ui.router.util.type:Type `Type`} for information on the values accepted.
		 *
		 * @returns {Object}  Returns `$urlMatcherFactoryProvider`.
		 *
		 * @example
		 * This is a simple example of a custom type that encodes and decodes items from an
		 * array, using the array index as the URL-encoded value:
		 *
		 * <pre>
		 * var list = ['John', 'Paul', 'George', 'Ringo'];
		 *
		 * $urlMatcherFactoryProvider.type('listItem', {
		 *   encode: function(item) {
		 *     // Represent the list item in the URL using its corresponding index
		 *     return list.indexOf(item);
		 *   },
		 *   decode: function(item) {
		 *     // Look up the list item by index
		 *     return list[parseInt(item, 10)];
		 *   },
		 *   is: function(item) {
		 *     // Ensure the item is valid by checking to see that it appears
		 *     // in the list
		 *     return list.indexOf(item) > -1;
		 *   }
		 * });
		 *
		 * $stateProvider.state('list', {
		 *   url: "/list/{item:listItem}",
		 *   controller: function($scope, $stateParams) {
		 *     console.log($stateParams.item);
		 *   }
		 * });
		 *
		 * // ...
		 *
		 * // Changes URL to '/list/3', logs "Ringo" to the console
		 * $state.go('list', { item: "Ringo" });
		 * </pre>
		 *
		 * This is a more complex example of a type that relies on dependency injection to
		 * interact with services, and uses the parameter name from the URL to infer how to
		 * handle encoding and decoding parameter values:
		 *
		 * <pre>
		 * // Defines a custom type that gets a value from a service,
		 * // where each service gets different types of values from
		 * // a backend API:
		 * $urlMatcherFactoryProvider.type('dbObject', {}, function(Users, Posts) {
		 *
		 *   // Matches up services to URL parameter names
		 *   var services = {
		 *     user: Users,
		 *     post: Posts
		 *   };
		 *
		 *   return {
		 *     encode: function(object) {
		 *       // Represent the object in the URL using its unique ID
		 *       return object.id;
		 *     },
		 *     decode: function(value, key) {
		 *       // Look up the object by ID, using the parameter
		 *       // name (key) to call the correct service
		 *       return services[key].findById(value);
		 *     },
		 *     is: function(object, key) {
		 *       // Check that object is a valid dbObject
		 *       return angular.isObject(object) && object.id && services[key];
		 *     }
		 *     equals: function(a, b) {
		 *       // Check the equality of decoded objects by comparing
		 *       // their unique IDs
		 *       return a.id === b.id;
		 *     }
		 *   };
		 * });
		 *
		 * // In a config() block, you can then attach URLs with
		 * // type-annotated parameters:
		 * $stateProvider.state('users', {
		 *   url: "/users",
		 *   // ...
		 * }).state('users.item', {
		 *   url: "/{user:dbObject}",
		 *   controller: function($scope, $stateParams) {
		 *     // $stateParams.user will now be an object returned from
		 *     // the Users service
		 *   },
		 *   // ...
		 * });
		 * </pre>
		 */
		this.type = function (name, definition, definitionFn) {
			if (!isDefined(definition)) return $types[name];
			if ($types.hasOwnProperty(name)) throw new Error("A type named '" + name + "' has already been defined.");

			$types[name] = new Type(extend({ name: name }, definition));
			if (definitionFn) {
				typeQueue.push({ name: name, def: definitionFn });
				if (!enqueue) flushTypeQueue();
			}
			return this;
		};

		// `flushTypeQueue()` waits until `$urlMatcherFactory` is injected before invoking the queued `definitionFn`s
		function flushTypeQueue() {
			while (typeQueue.length) {
				var type = typeQueue.shift();
				if (type.pattern) throw new Error("You cannot override a type's .pattern at runtime.");
				angular.extend($types[type.name], injector.invoke(type.def));
			}
		}

		// Register default types. Store them in the prototype of $types.
		forEach(defaultTypes, function (type, name) { $types[name] = new Type(extend({ name: name }, type)); });
		$types = inherit($types, {});

		/* No need to document $get, since it returns this */
		this.$get = ['$injector', function ($injector) {
			injector = $injector;
			enqueue = false;
			flushTypeQueue();

			forEach(defaultTypes, function (type, name) {
				if (!$types[name]) $types[name] = new Type(type);
			});
			return this;
		}];

		this.Param = function Param(id, type, config, location) {
			var self = this;
			config = unwrapShorthand(config);
			type = getType(config, type, location);
			var arrayMode = getArrayMode();
			type = arrayMode ? type.$asArray(arrayMode, location === "search") : type;
			if (type.name === "string" && !arrayMode && location === "path" && config.value === undefined)
				config.value = ""; // for 0.2.x; in 0.3.0+ do not automatically default to ""
			var isOptional = config.value !== undefined;
			var squash = getSquashPolicy(config, isOptional);
			var replace = getReplace(config, arrayMode, isOptional, squash);

			function unwrapShorthand(config) {
				var keys = isObject(config) ? objectKeys(config) : [];
				var isShorthand = indexOf(keys, "value") === -1 && indexOf(keys, "type") === -1 &&
								  indexOf(keys, "squash") === -1 && indexOf(keys, "array") === -1;
				if (isShorthand) config = { value: config };
				config.$$fn = isInjectable(config.value) ? config.value : function () { return config.value; };
				return config;
			}

			function getType(config, urlType, location) {
				if (config.type && urlType) throw new Error("Param '" + id + "' has two type configurations.");
				if (urlType) return urlType;
				if (!config.type) return (location === "config" ? $types.any : $types.string);

				if (angular.isString(config.type))
					return $types[config.type];
				if (config.type instanceof Type)
					return config.type;
				return new Type(config.type);
			}

			// array config: param name (param[]) overrides default settings.  explicit config overrides param name.
			function getArrayMode() {
				var arrayDefaults = { array: (location === "search" ? "auto" : false) };
				var arrayParamNomenclature = id.match(/\[\]$/) ? { array: true } : {};
				return extend(arrayDefaults, arrayParamNomenclature, config).array;
			}

			/**
			 * returns false, true, or the squash value to indicate the "default parameter url squash policy".
			 */
			function getSquashPolicy(config, isOptional) {
				var squash = config.squash;
				if (!isOptional || squash === false) return false;
				if (!isDefined(squash) || squash == null) return defaultSquashPolicy;
				if (squash === true || isString(squash)) return squash;
				throw new Error("Invalid squash policy: '" + squash + "'. Valid policies: false, true, or arbitrary string");
			}

			function getReplace(config, arrayMode, isOptional, squash) {
				var replace, configuredKeys, defaultPolicy = [
				  { from: "", to: (isOptional || arrayMode ? undefined : "") },
				  { from: null, to: (isOptional || arrayMode ? undefined : "") }
				];
				replace = isArray(config.replace) ? config.replace : [];
				if (isString(squash))
					replace.push({ from: squash, to: undefined });
				configuredKeys = map(replace, function (item) { return item.from; });
				return filter(defaultPolicy, function (item) { return indexOf(configuredKeys, item.from) === -1; }).concat(replace);
			}

			/**
			 * [Internal] Get the default value of a parameter, which may be an injectable function.
			 */
			function $$getDefaultValue() {
				if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
				var defaultValue = injector.invoke(config.$$fn);
				if (defaultValue !== null && defaultValue !== undefined && !self.type.is(defaultValue))
					throw new Error("Default value (" + defaultValue + ") for parameter '" + self.id + "' is not an instance of Type (" + self.type.name + ")");
				return defaultValue;
			}

			/**
			 * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the
			 * default value, which may be the result of an injectable function.
			 */
			function $value(value) {
				function hasReplaceVal(val) { return function (obj) { return obj.from === val; }; }
				function $replace(value) {
					var replacement = map(filter(self.replace, hasReplaceVal(value)), function (obj) { return obj.to; });
					return replacement.length ? replacement[0] : value;
				}
				value = $replace(value);
				return !isDefined(value) ? $$getDefaultValue() : self.type.$normalize(value);
			}

			function toString() { return "{Param:" + id + " " + type + " squash: '" + squash + "' optional: " + isOptional + "}"; }

			extend(this, {
				id: id,
				type: type,
				location: location,
				array: arrayMode,
				squash: squash,
				replace: replace,
				isOptional: isOptional,
				value: $value,
				dynamic: undefined,
				config: config,
				toString: toString
			});
		};

		function ParamSet(params) {
			extend(this, params || {});
		}

		ParamSet.prototype = {
			$$new: function () {
				return inherit(this, extend(new ParamSet(), { $$parent: this }));
			},
			$$keys: function () {
				var keys = [], chain = [], parent = this,
				  ignore = objectKeys(ParamSet.prototype);
				while (parent) { chain.push(parent); parent = parent.$$parent; }
				chain.reverse();
				forEach(chain, function (paramset) {
					forEach(objectKeys(paramset), function (key) {
						if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1) keys.push(key);
					});
				});
				return keys;
			},
			$$values: function (paramValues) {
				var values = {}, self = this;
				forEach(self.$$keys(), function (key) {
					values[key] = self[key].value(paramValues && paramValues[key]);
				});
				return values;
			},
			$$equals: function (paramValues1, paramValues2) {
				var equal = true, self = this;
				forEach(self.$$keys(), function (key) {
					var left = paramValues1 && paramValues1[key], right = paramValues2 && paramValues2[key];
					if (!self[key].type.equals(left, right)) equal = false;
				});
				return equal;
			},
			$$validates: function $$validate(paramValues) {
				var keys = this.$$keys(), i, param, rawVal, normalized, encoded;
				for (i = 0; i < keys.length; i++) {
					param = this[keys[i]];
					rawVal = paramValues[keys[i]];
					if ((rawVal === undefined || rawVal === null) && param.isOptional)
						break; // There was no parameter value, but the param is optional
					normalized = param.type.$normalize(rawVal);
					if (!param.type.is(normalized))
						return false; // The value was not of the correct Type, and could not be decoded to the correct Type
					encoded = param.type.encode(normalized);
					if (angular.isString(encoded) && !param.type.pattern.exec(encoded))
						return false; // The value was of the correct type, but when encoded, did not match the Type's regexp
				}
				return true;
			},
			$$parent: undefined
		};

		this.ParamSet = ParamSet;
	}

	// Register as a provider so it's available to other providers
	angular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);
	angular.module('ui.router.util').run(['$urlMatcherFactory', function ($urlMatcherFactory) { }]);

	/**
	 * @ngdoc object
	 * @name ui.router.router.$urlRouterProvider
	 *
	 * @requires ui.router.util.$urlMatcherFactoryProvider
	 * @requires $locationProvider
	 *
	 * @description
	 * `$urlRouterProvider` has the responsibility of watching `$location`. 
	 * When `$location` changes it runs through a list of rules one by one until a 
	 * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify 
	 * a url in a state configuration. All urls are compiled into a UrlMatcher object.
	 *
	 * There are several methods on `$urlRouterProvider` that make it useful to use directly
	 * in your module config.
	 */
	$UrlRouterProvider.$inject = ['$locationProvider', '$urlMatcherFactoryProvider'];
	function $UrlRouterProvider($locationProvider, $urlMatcherFactory) {
		var rules = [], otherwise = null, interceptDeferred = false, listener;

		// Returns a string that is a prefix of all strings matching the RegExp
		function regExpPrefix(re) {
			var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
			return (prefix != null) ? prefix[1].replace(/\\(.)/g, "$1") : '';
		}

		// Interpolates matched values into a String.replace()-style pattern
		function interpolate(pattern, match) {
			return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
				return match[what === '$' ? 0 : Number(what)];
			});
		}

		/**
		 * @ngdoc function
		 * @name ui.router.router.$urlRouterProvider#rule
		 * @methodOf ui.router.router.$urlRouterProvider
		 *
		 * @description
		 * Defines rules that are used by `$urlRouterProvider` to find matches for
		 * specific URLs.
		 *
		 * @example
		 * <pre>
		 * var app = angular.module('app', ['ui.router.router']);
		 *
		 * app.config(function ($urlRouterProvider) {
		 *   // Here's an example of how you might allow case insensitive urls
		 *   $urlRouterProvider.rule(function ($injector, $location) {
		 *     var path = $location.path(),
		 *         normalized = path.toLowerCase();
		 *
		 *     if (path !== normalized) {
		 *       return normalized;
		 *     }
		 *   });
		 * });
		 * </pre>
		 *
		 * @param {function} rule Handler function that takes `$injector` and `$location`
		 * services as arguments. You can use them to return a valid path as a string.
		 *
		 * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
		 */
		this.rule = function (rule) {
			if (!isFunction(rule)) throw new Error("'rule' must be a function");
			rules.push(rule);
			return this;
		};

		/**
		 * @ngdoc object
		 * @name ui.router.router.$urlRouterProvider#otherwise
		 * @methodOf ui.router.router.$urlRouterProvider
		 *
		 * @description
		 * Defines a path that is used when an invalid route is requested.
		 *
		 * @example
		 * <pre>
		 * var app = angular.module('app', ['ui.router.router']);
		 *
		 * app.config(function ($urlRouterProvider) {
		 *   // if the path doesn't match any of the urls you configured
		 *   // otherwise will take care of routing the user to the
		 *   // specified url
		 *   $urlRouterProvider.otherwise('/index');
		 *
		 *   // Example of using function rule as param
		 *   $urlRouterProvider.otherwise(function ($injector, $location) {
		 *     return '/a/valid/url';
		 *   });
		 * });
		 * </pre>
		 *
		 * @param {string|function} rule The url path you want to redirect to or a function 
		 * rule that returns the url path. The function version is passed two params: 
		 * `$injector` and `$location` services, and must return a url string.
		 *
		 * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
		 */
		this.otherwise = function (rule) {
			if (isString(rule)) {
				var redirect = rule;
				rule = function () { return redirect; };
			}
			else if (!isFunction(rule)) throw new Error("'rule' must be a function");
			otherwise = rule;
			return this;
		};


		function handleIfMatch($injector, handler, match) {
			if (!match) return false;
			var result = $injector.invoke(handler, handler, { $match: match });
			return isDefined(result) ? result : true;
		}

		/**
		 * @ngdoc function
		 * @name ui.router.router.$urlRouterProvider#when
		 * @methodOf ui.router.router.$urlRouterProvider
		 *
		 * @description
		 * Registers a handler for a given url matching. 
		 * 
		 * If the handler is a string, it is
		 * treated as a redirect, and is interpolated according to the syntax of match
		 * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).
		 *
		 * If the handler is a function, it is injectable. It gets invoked if `$location`
		 * matches. You have the option of inject the match object as `$match`.
		 *
		 * The handler can return
		 *
		 * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
		 *   will continue trying to find another one that matches.
		 * - **string** which is treated as a redirect and passed to `$location.url()`
		 * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
		 *
		 * @example
		 * <pre>
		 * var app = angular.module('app', ['ui.router.router']);
		 *
		 * app.config(function ($urlRouterProvider) {
		 *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
		 *     if ($state.$current.navigable !== state ||
		 *         !equalForKeys($match, $stateParams) {
		 *      $state.transitionTo(state, $match, false);
		 *     }
		 *   });
		 * });
		 * </pre>
		 *
		 * @param {string|object} what The incoming path that you want to redirect.
		 * @param {string|function} handler The path you want to redirect your user to.
		 */
		this.when = function (what, handler) {
			var redirect, handlerIsString = isString(handler);
			if (isString(what)) what = $urlMatcherFactory.compile(what);

			if (!handlerIsString && !isFunction(handler) && !isArray(handler))
				throw new Error("invalid 'handler' in when()");

			var strategies = {
				matcher: function (what, handler) {
					if (handlerIsString) {
						redirect = $urlMatcherFactory.compile(handler);
						handler = ['$match', function ($match) { return redirect.format($match); }];
					}
					return extend(function ($injector, $location) {
						return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
					}, {
						prefix: isString(what.prefix) ? what.prefix : ''
					});
				},
				regex: function (what, handler) {
					if (what.global || what.sticky) throw new Error("when() RegExp must not be global or sticky");

					if (handlerIsString) {
						redirect = handler;
						handler = ['$match', function ($match) { return interpolate(redirect, $match); }];
					}
					return extend(function ($injector, $location) {
						return handleIfMatch($injector, handler, what.exec($location.path()));
					}, {
						prefix: regExpPrefix(what)
					});
				}
			};

			var check = { matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp };

			for (var n in check) {
				if (check[n]) return this.rule(strategies[n](what, handler));
			}

			throw new Error("invalid 'what' in when()");
		};

		/**
		 * @ngdoc function
		 * @name ui.router.router.$urlRouterProvider#deferIntercept
		 * @methodOf ui.router.router.$urlRouterProvider
		 *
		 * @description
		 * Disables (or enables) deferring location change interception.
		 *
		 * If you wish to customize the behavior of syncing the URL (for example, if you wish to
		 * defer a transition but maintain the current URL), call this method at configuration time.
		 * Then, at run time, call `$urlRouter.listen()` after you have configured your own
		 * `$locationChangeSuccess` event handler.
		 *
		 * @example
		 * <pre>
		 * var app = angular.module('app', ['ui.router.router']);
		 *
		 * app.config(function ($urlRouterProvider) {
		 *
		 *   // Prevent $urlRouter from automatically intercepting URL changes;
		 *   // this allows you to configure custom behavior in between
		 *   // location changes and route synchronization:
		 *   $urlRouterProvider.deferIntercept();
		 *
		 * }).run(function ($rootScope, $urlRouter, UserService) {
		 *
		 *   $rootScope.$on('$locationChangeSuccess', function(e) {
		 *     // UserService is an example service for managing user state
		 *     if (UserService.isLoggedIn()) return;
		 *
		 *     // Prevent $urlRouter's default handler from firing
		 *     e.preventDefault();
		 *
		 *     UserService.handleLogin().then(function() {
		 *       // Once the user has logged in, sync the current URL
		 *       // to the router:
		 *       $urlRouter.sync();
		 *     });
		 *   });
		 *
		 *   // Configures $urlRouter's listener *after* your custom listener
		 *   $urlRouter.listen();
		 * });
		 * </pre>
		 *
		 * @param {boolean} defer Indicates whether to defer location change interception. Passing
				  no parameter is equivalent to `true`.
		 */
		this.deferIntercept = function (defer) {
			if (defer === undefined) defer = true;
			interceptDeferred = defer;
		};

		/**
		 * @ngdoc object
		 * @name ui.router.router.$urlRouter
		 *
		 * @requires $location
		 * @requires $rootScope
		 * @requires $injector
		 * @requires $browser
		 *
		 * @description
		 *
		 */
		this.$get = $get;
		$get.$inject = ['$location', '$rootScope', '$injector', '$browser', '$sniffer'];
		function $get($location, $rootScope, $injector, $browser, $sniffer) {

			var baseHref = $browser.baseHref(), location = $location.url(), lastPushedUrl;

			function appendBasePath(url, isHtml5, absolute) {
				if (baseHref === '/') return url;
				if (isHtml5) return baseHref.slice(0, -1) + url;
				if (absolute) return baseHref.slice(1) + url;
				return url;
			}

			// TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
			function update(evt) {
				if (evt && evt.defaultPrevented) return;
				var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;
				lastPushedUrl = undefined;
				// TODO: Re-implement this in 1.0 for https://github.com/angular-ui/ui-router/issues/1573
				//if (ignoreUpdate) return true;

				function check(rule) {
					var handled = rule($injector, $location);

					if (!handled) return false;
					if (isString(handled)) $location.replace().url(handled);
					return true;
				}
				var n = rules.length, i;

				for (i = 0; i < n; i++) {
					if (check(rules[i])) return;
				}
				// always check otherwise last to allow dynamic updates to the set of rules
				if (otherwise) check(otherwise);
			}

			function listen() {
				listener = listener || $rootScope.$on('$locationChangeSuccess', update);
				return listener;
			}

			if (!interceptDeferred) listen();

			return {
				/**
				 * @ngdoc function
				 * @name ui.router.router.$urlRouter#sync
				 * @methodOf ui.router.router.$urlRouter
				 *
				 * @description
				 * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.
				 * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,
				 * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed
				 * with the transition by calling `$urlRouter.sync()`.
				 *
				 * @example
				 * <pre>
				 * angular.module('app', ['ui.router'])
				 *   .run(function($rootScope, $urlRouter) {
				 *     $rootScope.$on('$locationChangeSuccess', function(evt) {
				 *       // Halt state change from even starting
				 *       evt.preventDefault();
				 *       // Perform custom logic
				 *       var meetsRequirement = ...
				 *       // Continue with the update and state transition if logic allows
				 *       if (meetsRequirement) $urlRouter.sync();
				 *     });
				 * });
				 * </pre>
				 */
				sync: function () {
					update();
				},

				listen: function () {
					return listen();
				},

				update: function (read) {
					if (read) {
						location = $location.url();
						return;
					}
					if ($location.url() === location) return;

					$location.url(location);
					$location.replace();
				},

				push: function (urlMatcher, params, options) {
					var url = urlMatcher.format(params || {});

					// Handle the special hash param, if needed
					if (url !== null && params && params['#']) {
						url += '#' + params['#'];
					}

					$location.url(url);
					lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;
					if (options && options.replace) $location.replace();
				},

				/**
				 * @ngdoc function
				 * @name ui.router.router.$urlRouter#href
				 * @methodOf ui.router.router.$urlRouter
				 *
				 * @description
				 * A URL generation method that returns the compiled URL for a given
				 * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.
				 *
				 * @example
				 * <pre>
				 * $bob = $urlRouter.href(new UrlMatcher("/about/:person"), {
				 *   person: "bob"
				 * });
				 * // $bob == "/about/bob";
				 * </pre>
				 *
				 * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate.
				 * @param {object=} params An object of parameter values to fill the matcher's required parameters.
				 * @param {object=} options Options object. The options are:
				 *
				 * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
				 *
				 * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`
				 */
				href: function (urlMatcher, params, options) {
					if (!urlMatcher.validates(params)) return null;

					var isHtml5 = $locationProvider.html5Mode();
					if (angular.isObject(isHtml5)) {
						isHtml5 = isHtml5.enabled;
					}

					isHtml5 = isHtml5 && $sniffer.history;

					var url = urlMatcher.format(params);
					options = options || {};

					if (!isHtml5 && url !== null) {
						url = "#" + $locationProvider.hashPrefix() + url;
					}

					// Handle special hash param, if needed
					if (url !== null && params && params['#']) {
						url += '#' + params['#'];
					}

					url = appendBasePath(url, isHtml5, options.absolute);

					if (!options.absolute || !url) {
						return url;
					}

					var slash = (!isHtml5 && url ? '/' : ''), port = $location.port();
					port = (port === 80 || port === 443 ? '' : ':' + port);

					return [$location.protocol(), '://', $location.host(), port, slash, url].join('');
				}
			};
		}
	}

	angular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);

	/**
	 * @ngdoc object
	 * @name ui.router.state.$stateProvider
	 *
	 * @requires ui.router.router.$urlRouterProvider
	 * @requires ui.router.util.$urlMatcherFactoryProvider
	 *
	 * @description
	 * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely
	 * on state.
	 *
	 * A state corresponds to a "place" in the application in terms of the overall UI and
	 * navigation. A state describes (via the controller / template / view properties) what
	 * the UI looks like and does at that place.
	 *
	 * States often have things in common, and the primary way of factoring out these
	 * commonalities in this model is via the state hierarchy, i.e. parent/child states aka
	 * nested states.
	 *
	 * The `$stateProvider` provides interfaces to declare these states for your app.
	 */
	$StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider'];
	function $StateProvider($urlRouterProvider, $urlMatcherFactory) {

		var root, states = {}, $state, queue = {}, abstractKey = 'abstract';

		// Builds state properties from definition passed to registerState()
		var stateBuilder = {

			// Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.
			// state.children = [];
			// if (parent) parent.children.push(state);
			parent: function (state) {
				if (isDefined(state.parent) && state.parent) return findState(state.parent);
				// regex matches any valid composite state name
				// would match "contact.list" but not "contacts"
				var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
				return compositeName ? findState(compositeName[1]) : root;
			},

			// inherit 'data' from parent and override by own values (if any)
			data: function (state) {
				if (state.parent && state.parent.data) {
					state.data = state.self.data = inherit(state.parent.data, state.data);
				}
				return state.data;
			},

			// Build a URLMatcher if necessary, either via a relative or absolute URL
			url: function (state) {
				var url = state.url, config = { params: state.params || {} };

				if (isString(url)) {
					if (url.charAt(0) == '^') return $urlMatcherFactory.compile(url.substring(1), config);
					return (state.parent.navigable || root).url.concat(url, config);
				}

				if (!url || $urlMatcherFactory.isMatcher(url)) return url;
				throw new Error("Invalid url '" + url + "' in state '" + state + "'");
			},

			// Keep track of the closest ancestor state that has a URL (i.e. is navigable)
			navigable: function (state) {
				return state.url ? state : (state.parent ? state.parent.navigable : null);
			},

			// Own parameters for this state. state.url.params is already built at this point. Create and add non-url params
			ownParams: function (state) {
				var params = state.url && state.url.params || new $$UMFP.ParamSet();
				forEach(state.params || {}, function (config, id) {
					if (!params[id]) params[id] = new $$UMFP.Param(id, null, config, "config");
				});
				return params;
			},

			// Derive parameters for this state and ensure they're a super-set of parent's parameters
			params: function (state) {
				var ownParams = pick(state.ownParams, state.ownParams.$$keys());
				return state.parent && state.parent.params ? extend(state.parent.params.$$new(), ownParams) : new $$UMFP.ParamSet();
			},

			// If there is no explicit multi-view configuration, make one up so we don't have
			// to handle both cases in the view directive later. Note that having an explicit
			// 'views' property will mean the default unnamed view properties are ignored. This
			// is also a good time to resolve view names to absolute names, so everything is a
			// straight lookup at link time.
			views: function (state) {
				var views = {};

				forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {
					if (name.indexOf('@') < 0) name += '@' + state.parent.name;
					view.resolveAs = view.resolveAs || state.resolveAs || '$resolve';
					views[name] = view;
				});
				return views;
			},

			// Keep a full path from the root down to this state as this is needed for state activation.
			path: function (state) {
				return state.parent ? state.parent.path.concat(state) : []; // exclude root from path
			},

			// Speed up $state.contains() as it's used a lot
			includes: function (state) {
				var includes = state.parent ? extend({}, state.parent.includes) : {};
				includes[state.name] = true;
				return includes;
			},

			$delegates: {}
		};

		function isRelative(stateName) {
			return stateName.indexOf(".") === 0 || stateName.indexOf("^") === 0;
		}

		function findState(stateOrName, base) {
			if (!stateOrName) return undefined;

			var isStr = isString(stateOrName),
				name = isStr ? stateOrName : stateOrName.name,
				path = isRelative(name);

			if (path) {
				if (!base) throw new Error("No reference point given for path '" + name + "'");
				base = findState(base);

				var rel = name.split("."), i = 0, pathLength = rel.length, current = base;

				for (; i < pathLength; i++) {
					if (rel[i] === "" && i === 0) {
						current = base;
						continue;
					}
					if (rel[i] === "^") {
						if (!current.parent) throw new Error("Path '" + name + "' not valid for state '" + base.name + "'");
						current = current.parent;
						continue;
					}
					break;
				}
				rel = rel.slice(i).join(".");
				name = current.name + (current.name && rel ? "." : "") + rel;
			}
			var state = states[name];

			if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {
				return state;
			}
			return undefined;
		}

		function queueState(parentName, state) {
			if (!queue[parentName]) {
				queue[parentName] = [];
			}
			queue[parentName].push(state);
		}

		function flushQueuedChildren(parentName) {
			var queued = queue[parentName] || [];
			while (queued.length) {
				registerState(queued.shift());
			}
		}

		function registerState(state) {
			// Wrap a new object around the state so we can store our private details easily.
			state = inherit(state, {
				self: state,
				resolve: state.resolve || {},
				toString: function () { return this.name; }
			});

			var name = state.name;
			if (!isString(name) || name.indexOf('@') >= 0) throw new Error("State must have a valid name");
			if (states.hasOwnProperty(name)) throw new Error("State '" + name + "' is already defined");

			// Get parent name
			var parentName = (name.indexOf('.') !== -1) ? name.substring(0, name.lastIndexOf('.'))
				: (isString(state.parent)) ? state.parent
				: (isObject(state.parent) && isString(state.parent.name)) ? state.parent.name
				: '';

			// If parent is not registered yet, add state to queue and register later
			if (parentName && !states[parentName]) {
				return queueState(parentName, state.self);
			}

			for (var key in stateBuilder) {
				if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);
			}
			states[name] = state;

			// Register the state in the global state list and with $urlRouter if necessary.
			if (!state[abstractKey] && state.url) {
				$urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {
					if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {
						$state.transitionTo(state, $match, { inherit: true, location: false });
					}
				}]);
			}

			// Register any queued children
			flushQueuedChildren(name);

			return state;
		}

		// Checks text to see if it looks like a glob.
		function isGlob(text) {
			return text.indexOf('*') > -1;
		}

		// Returns true if glob matches current $state name.
		function doesStateMatchGlob(glob) {
			var globSegments = glob.split('.'),
				segments = $state.$current.name.split('.');

			//match single stars
			for (var i = 0, l = globSegments.length; i < l; i++) {
				if (globSegments[i] === '*') {
					segments[i] = '*';
				}
			}

			//match greedy starts
			if (globSegments[0] === '**') {
				segments = segments.slice(indexOf(segments, globSegments[1]));
				segments.unshift('**');
			}
			//match greedy ends
			if (globSegments[globSegments.length - 1] === '**') {
				segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
				segments.push('**');
			}

			if (globSegments.length != segments.length) {
				return false;
			}

			return segments.join('') === globSegments.join('');
		}


		// Implicit root state that is always active
		root = registerState({
			name: '',
			url: '^',
			views: null,
			'abstract': true
		});
		root.navigable = null;


		/**
		 * @ngdoc function
		 * @name ui.router.state.$stateProvider#decorator
		 * @methodOf ui.router.state.$stateProvider
		 *
		 * @description
		 * Allows you to extend (carefully) or override (at your own peril) the 
		 * `stateBuilder` object used internally by `$stateProvider`. This can be used 
		 * to add custom functionality to ui-router, for example inferring templateUrl 
		 * based on the state name.
		 *
		 * When passing only a name, it returns the current (original or decorated) builder
		 * function that matches `name`.
		 *
		 * The builder functions that can be decorated are listed below. Though not all
		 * necessarily have a good use case for decoration, that is up to you to decide.
		 *
		 * In addition, users can attach custom decorators, which will generate new 
		 * properties within the state's internal definition. There is currently no clear 
		 * use-case for this beyond accessing internal states (i.e. $state.$current), 
		 * however, expect this to become increasingly relevant as we introduce additional 
		 * meta-programming features.
		 *
		 * **Warning**: Decorators should not be interdependent because the order of 
		 * execution of the builder functions in non-deterministic. Builder functions 
		 * should only be dependent on the state definition object and super function.
		 *
		 *
		 * Existing builder functions and current return values:
		 *
		 * - **parent** `{object}` - returns the parent state object.
		 * - **data** `{object}` - returns state data, including any inherited data that is not
		 *   overridden by own values (if any).
		 * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}
		 *   or `null`.
		 * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is 
		 *   navigable).
		 * - **params** `{object}` - returns an array of state params that are ensured to 
		 *   be a super-set of parent's params.
		 * - **views** `{object}` - returns a views object where each key is an absolute view 
		 *   name (i.e. "viewName@stateName") and each value is the config object 
		 *   (template, controller) for the view. Even when you don't use the views object 
		 *   explicitly on a state config, one is still created for you internally.
		 *   So by decorating this builder function you have access to decorating template 
		 *   and controller properties.
		 * - **ownParams** `{object}` - returns an array of params that belong to the state, 
		 *   not including any params defined by ancestor states.
		 * - **path** `{string}` - returns the full path from the root down to this state. 
		 *   Needed for state activation.
		 * - **includes** `{object}` - returns an object that includes every state that 
		 *   would pass a `$state.includes()` test.
		 *
		 * @example
		 * <pre>
		 * // Override the internal 'views' builder with a function that takes the state
		 * // definition, and a reference to the internal function being overridden:
		 * $stateProvider.decorator('views', function (state, parent) {
		 *   var result = {},
		 *       views = parent(state);
		 *
		 *   angular.forEach(views, function (config, name) {
		 *     var autoName = (state.name + '.' + name).replace('.', '/');
		 *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';
		 *     result[name] = config;
		 *   });
		 *   return result;
		 * });
		 *
		 * $stateProvider.state('home', {
		 *   views: {
		 *     'contact.list': { controller: 'ListController' },
		 *     'contact.item': { controller: 'ItemController' }
		 *   }
		 * });
		 *
		 * // ...
		 *
		 * $state.go('home');
		 * // Auto-populates list and item views with /partials/home/contact/list.html,
		 * // and /partials/home/contact/item.html, respectively.
		 * </pre>
		 *
		 * @param {string} name The name of the builder function to decorate. 
		 * @param {object} func A function that is responsible for decorating the original 
		 * builder function. The function receives two parameters:
		 *
		 *   - `{object}` - state - The state config object.
		 *   - `{object}` - super - The original builder function.
		 *
		 * @return {object} $stateProvider - $stateProvider instance
		 */
		this.decorator = decorator;
		function decorator(name, func) {
			/*jshint validthis: true */
			if (isString(name) && !isDefined(func)) {
				return stateBuilder[name];
			}
			if (!isFunction(func) || !isString(name)) {
				return this;
			}
			if (stateBuilder[name] && !stateBuilder.$delegates[name]) {
				stateBuilder.$delegates[name] = stateBuilder[name];
			}
			stateBuilder[name] = func;
			return this;
		}

		/**
		 * @ngdoc function
		 * @name ui.router.state.$stateProvider#state
		 * @methodOf ui.router.state.$stateProvider
		 *
		 * @description
		 * Registers a state configuration under a given state name. The stateConfig object
		 * has the following acceptable properties.
		 *
		 * @param {string} name A unique state name, e.g. "home", "about", "contacts".
		 * To create a parent/child state use a dot, e.g. "about.sales", "home.newest".
		 * @param {object} stateConfig State configuration object.
		 * @param {string|function=} stateConfig.template
		 * <a id='template'></a>
		 *   html template as a string or a function that returns
		 *   an html template as a string which should be used by the uiView directives. This property 
		 *   takes precedence over templateUrl.
		 *   
		 *   If `template` is a function, it will be called with the following parameters:
		 *
		 *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
		 *     applying the current state
		 *
		 * <pre>template:
		 *   "<h1>inline template definition</h1>" +
		 *   "<div ui-view></div>"</pre>
		 * <pre>template: function(params) {
		 *       return "<h1>generated template</h1>"; }</pre>
		 * </div>
		 *
		 * @param {string|function=} stateConfig.templateUrl
		 * <a id='templateUrl'></a>
		 *
		 *   path or function that returns a path to an html
		 *   template that should be used by uiView.
		 *   
		 *   If `templateUrl` is a function, it will be called with the following parameters:
		 *
		 *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by 
		 *     applying the current state
		 *
		 * <pre>templateUrl: "home.html"</pre>
		 * <pre>templateUrl: function(params) {
		 *     return myTemplates[params.pageId]; }</pre>
		 *
		 * @param {function=} stateConfig.templateProvider
		 * <a id='templateProvider'></a>
		 *    Provider function that returns HTML content string.
		 * <pre> templateProvider:
		 *       function(MyTemplateService, params) {
		 *         return MyTemplateService.getTemplate(params.pageId);
		 *       }</pre>
		 *
		 * @param {string|function=} stateConfig.controller
		 * <a id='controller'></a>
		 *
		 *  Controller fn that should be associated with newly
		 *   related scope or the name of a registered controller if passed as a string.
		 *   Optionally, the ControllerAs may be declared here.
		 * <pre>controller: "MyRegisteredController"</pre>
		 * <pre>controller:
		 *     "MyRegisteredController as fooCtrl"}</pre>
		 * <pre>controller: function($scope, MyService) {
		 *     $scope.data = MyService.getData(); }</pre>
		 *
		 * @param {function=} stateConfig.controllerProvider
		 * <a id='controllerProvider'></a>
		 *
		 * Injectable provider function that returns the actual controller or string.
		 * <pre>controllerProvider:
		 *   function(MyResolveData) {
		 *     if (MyResolveData.foo)
		 *       return "FooCtrl"
		 *     else if (MyResolveData.bar)
		 *       return "BarCtrl";
		 *     else return function($scope) {
		 *       $scope.baz = "Qux";
		 *     }
		 *   }</pre>
		 *
		 * @param {string=} stateConfig.controllerAs
		 * <a id='controllerAs'></a>
		 * 
		 * A controller alias name. If present the controller will be
		 *   published to scope under the controllerAs name.
		 * <pre>controllerAs: "myCtrl"</pre>
		 *
		 * @param {string|object=} stateConfig.parent
		 * <a id='parent'></a>
		 * Optionally specifies the parent state of this state.
		 *
		 * <pre>parent: 'parentState'</pre>
		 * <pre>parent: parentState // JS variable</pre>
		 *
		 * @param {object=} stateConfig.resolve
		 * <a id='resolve'></a>
		 *
		 * An optional map&lt;string, function&gt; of dependencies which
		 *   should be injected into the controller. If any of these dependencies are promises, 
		 *   the router will wait for them all to be resolved before the controller is instantiated.
		 *   If all the promises are resolved successfully, the $stateChangeSuccess event is fired
		 *   and the values of the resolved promises are injected into any controllers that reference them.
		 *   If any  of the promises are rejected the $stateChangeError event is fired.
		 *
		 *   The map object is:
		 *   
		 *   - key - {string}: name of dependency to be injected into controller
		 *   - factory - {string|function}: If string then it is alias for service. Otherwise if function, 
		 *     it is injected and return value it treated as dependency. If result is a promise, it is 
		 *     resolved before its value is injected into controller.
		 *
		 * <pre>resolve: {
		 *     myResolve1:
		 *       function($http, $stateParams) {
		 *         return $http.get("/api/foos/"+stateParams.fooID);
		 *       }
		 *     }</pre>
		 *
		 * @param {string=} stateConfig.url
		 * <a id='url'></a>
		 *
		 *   A url fragment with optional parameters. When a state is navigated or
		 *   transitioned to, the `$stateParams` service will be populated with any 
		 *   parameters that were passed.
		 *
		 *   (See {@link ui.router.util.type:UrlMatcher UrlMatcher} `UrlMatcher`} for
		 *   more details on acceptable patterns )
		 *
		 * examples:
		 * <pre>url: "/home"
		 * url: "/users/:userid"
		 * url: "/books/{bookid:[a-zA-Z_-]}"
		 * url: "/books/{categoryid:int}"
		 * url: "/books/{publishername:string}/{categoryid:int}"
		 * url: "/messages?before&after"
		 * url: "/messages?{before:date}&{after:date}"
		 * url: "/messages/:mailboxid?{before:date}&{after:date}"
		 * </pre>
		 *
		 * @param {object=} stateConfig.views
		 * <a id='views'></a>
		 * an optional map&lt;string, object&gt; which defined multiple views, or targets views
		 * manually/explicitly.
		 *
		 * Examples:
		 *
		 * Targets three named `ui-view`s in the parent state's template
		 * <pre>views: {
		 *     header: {
		 *       controller: "headerCtrl",
		 *       templateUrl: "header.html"
		 *     }, body: {
		 *       controller: "bodyCtrl",
		 *       templateUrl: "body.html"
		 *     }, footer: {
		 *       controller: "footCtrl",
		 *       templateUrl: "footer.html"
		 *     }
		 *   }</pre>
		 *
		 * Targets named `ui-view="header"` from grandparent state 'top''s template, and named `ui-view="body" from parent state's template.
		 * <pre>views: {
		 *     'header@top': {
		 *       controller: "msgHeaderCtrl",
		 *       templateUrl: "msgHeader.html"
		 *     }, 'body': {
		 *       controller: "messagesCtrl",
		 *       templateUrl: "messages.html"
		 *     }
		 *   }</pre>
		 *
		 * @param {boolean=} [stateConfig.abstract=false]
		 * <a id='abstract'></a>
		 * An abstract state will never be directly activated,
		 *   but can provide inherited properties to its common children states.
		 * <pre>abstract: true</pre>
		 *
		 * @param {function=} stateConfig.onEnter
		 * <a id='onEnter'></a>
		 *
		 * Callback function for when a state is entered. Good way
		 *   to trigger an action or dispatch an event, such as opening a dialog.
		 * If minifying your scripts, make sure to explicitly annotate this function,
		 * because it won't be automatically annotated by your build tools.
		 *
		 * <pre>onEnter: function(MyService, $stateParams) {
		 *     MyService.foo($stateParams.myParam);
		 * }</pre>
		 *
		 * @param {function=} stateConfig.onExit
		 * <a id='onExit'></a>
		 *
		 * Callback function for when a state is exited. Good way to
		 *   trigger an action or dispatch an event, such as opening a dialog.
		 * If minifying your scripts, make sure to explicitly annotate this function,
		 * because it won't be automatically annotated by your build tools.
		 *
		 * <pre>onExit: function(MyService, $stateParams) {
		 *     MyService.cleanup($stateParams.myParam);
		 * }</pre>
		 *
		 * @param {boolean=} [stateConfig.reloadOnSearch=true]
		 * <a id='reloadOnSearch'></a>
		 *
		 * If `false`, will not retrigger the same state
		 *   just because a search/query parameter has changed (via $location.search() or $location.hash()). 
		 *   Useful for when you'd like to modify $location.search() without triggering a reload.
		 * <pre>reloadOnSearch: false</pre>
		 *
		 * @param {object=} stateConfig.data
		 * <a id='data'></a>
		 *
		 * Arbitrary data object, useful for custom configuration.  The parent state's `data` is
		 *   prototypally inherited.  In other words, adding a data property to a state adds it to
		 *   the entire subtree via prototypal inheritance.
		 *
		 * <pre>data: {
		 *     requiredRole: 'foo'
		 * } </pre>
		 *
		 * @param {object=} stateConfig.params
		 * <a id='params'></a>
		 *
		 * A map which optionally configures parameters declared in the `url`, or
		 *   defines additional non-url parameters.  For each parameter being
		 *   configured, add a configuration object keyed to the name of the parameter.
		 *
		 *   Each parameter configuration object may contain the following properties:
		 *
		 *   - ** value ** - {object|function=}: specifies the default value for this
		 *     parameter.  This implicitly sets this parameter as optional.
		 *
		 *     When UI-Router routes to a state and no value is
		 *     specified for this parameter in the URL or transition, the
		 *     default value will be used instead.  If `value` is a function,
		 *     it will be injected and invoked, and the return value used.
		 *
		 *     *Note*: `undefined` is treated as "no default value" while `null`
		 *     is treated as "the default value is `null`".
		 *
		 *     *Shorthand*: If you only need to configure the default value of the
		 *     parameter, you may use a shorthand syntax.   In the **`params`**
		 *     map, instead mapping the param name to a full parameter configuration
		 *     object, simply set map it to the default parameter value, e.g.:
		 *
		 * <pre>// define a parameter's default value
		 * params: {
		 *     param1: { value: "defaultValue" }
		 * }
		 * // shorthand default values
		 * params: {
		 *     param1: "defaultValue",
		 *     param2: "param2Default"
		 * }</pre>
		 *
		 *   - ** array ** - {boolean=}: *(default: false)* If true, the param value will be
		 *     treated as an array of values.  If you specified a Type, the value will be
		 *     treated as an array of the specified Type.  Note: query parameter values
		 *     default to a special `"auto"` mode.
		 *
		 *     For query parameters in `"auto"` mode, if multiple  values for a single parameter
		 *     are present in the URL (e.g.: `/foo?bar=1&bar=2&bar=3`) then the values
		 *     are mapped to an array (e.g.: `{ foo: [ '1', '2', '3' ] }`).  However, if
		 *     only one value is present (e.g.: `/foo?bar=1`) then the value is treated as single
		 *     value (e.g.: `{ foo: '1' }`).
		 *
		 * <pre>params: {
		 *     param1: { array: true }
		 * }</pre>
		 *
		 *   - ** squash ** - {bool|string=}: `squash` configures how a default parameter value is represented in the URL when
		 *     the current parameter value is the same as the default value. If `squash` is not set, it uses the
		 *     configured default squash policy.
		 *     (See {@link ui.router.util.$urlMatcherFactory#methods_defaultSquashPolicy `defaultSquashPolicy()`})
		 *
		 *   There are three squash settings:
		 *
		 *     - false: The parameter's default value is not squashed.  It is encoded and included in the URL
		 *     - true: The parameter's default value is omitted from the URL.  If the parameter is preceeded and followed
		 *       by slashes in the state's `url` declaration, then one of those slashes are omitted.
		 *       This can allow for cleaner looking URLs.
		 *     - `"<arbitrary string>"`: The parameter's default value is replaced with an arbitrary placeholder of  your choice.
		 *
		 * <pre>params: {
		 *     param1: {
		 *       value: "defaultId",
		 *       squash: true
		 * } }
		 * // squash "defaultValue" to "~"
		 * params: {
		 *     param1: {
		 *       value: "defaultValue",
		 *       squash: "~"
		 * } }
		 * </pre>
		 *
		 *
		 * @example
		 * <pre>
		 * // Some state name examples
		 *
		 * // stateName can be a single top-level name (must be unique).
		 * $stateProvider.state("home", {});
		 *
		 * // Or it can be a nested state name. This state is a child of the
		 * // above "home" state.
		 * $stateProvider.state("home.newest", {});
		 *
		 * // Nest states as deeply as needed.
		 * $stateProvider.state("home.newest.abc.xyz.inception", {});
		 *
		 * // state() returns $stateProvider, so you can chain state declarations.
		 * $stateProvider
		 *   .state("home", {})
		 *   .state("about", {})
		 *   .state("contacts", {});
		 * </pre>
		 *
		 */
		this.state = state;
		function state(name, definition) {
			/*jshint validthis: true */
			if (isObject(name)) definition = name;
			else definition.name = name;
			registerState(definition);
			return this;
		}

		/**
		 * @ngdoc object
		 * @name ui.router.state.$state
		 *
		 * @requires $rootScope
		 * @requires $q
		 * @requires ui.router.state.$view
		 * @requires $injector
		 * @requires ui.router.util.$resolve
		 * @requires ui.router.state.$stateParams
		 * @requires ui.router.router.$urlRouter
		 *
		 * @property {object} params A param object, e.g. {sectionId: section.id)}, that 
		 * you'd like to test against the current active state.
		 * @property {object} current A reference to the state's config object. However 
		 * you passed it in. Useful for accessing custom data.
		 * @property {object} transition Currently pending transition. A promise that'll 
		 * resolve or reject.
		 *
		 * @description
		 * `$state` service is responsible for representing states as well as transitioning
		 * between them. It also provides interfaces to ask for current state or even states
		 * you're coming from.
		 */
		this.$get = $get;
		$get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$urlRouter', '$location', '$urlMatcherFactory'];
		function $get($rootScope, $q, $view, $injector, $resolve, $stateParams, $urlRouter, $location, $urlMatcherFactory) {

			var TransitionSupersededError = new Error('transition superseded');

			var TransitionSuperseded = silenceUncaughtInPromise($q.reject(TransitionSupersededError));
			var TransitionPrevented = silenceUncaughtInPromise($q.reject(new Error('transition prevented')));
			var TransitionAborted = silenceUncaughtInPromise($q.reject(new Error('transition aborted')));
			var TransitionFailed = silenceUncaughtInPromise($q.reject(new Error('transition failed')));

			// Handles the case where a state which is the target of a transition is not found, and the user
			// can optionally retry or defer the transition
			function handleRedirect(redirect, state, params, options) {
				/**
				 * @ngdoc event
				 * @name ui.router.state.$state#$stateNotFound
				 * @eventOf ui.router.state.$state
				 * @eventType broadcast on root scope
				 * @description
				 * Fired when a requested state **cannot be found** using the provided state name during transition.
				 * The event is broadcast allowing any handlers a single chance to deal with the error (usually by
				 * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,
				 * you can see its three properties in the example. You can use `event.preventDefault()` to abort the
				 * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.
				 *
				 * @param {Object} event Event object.
				 * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.
				 * @param {State} fromState Current state object.
				 * @param {Object} fromParams Current state params.
				 *
				 * @example
				 *
				 * <pre>
				 * // somewhere, assume lazy.state has not been defined
				 * $state.go("lazy.state", {a:1, b:2}, {inherit:false});
				 *
				 * // somewhere else
				 * $scope.$on('$stateNotFound',
				 * function(event, unfoundState, fromState, fromParams){
				 *     console.log(unfoundState.to); // "lazy.state"
				 *     console.log(unfoundState.toParams); // {a:1, b:2}
				 *     console.log(unfoundState.options); // {inherit:false} + default options
				 * })
				 * </pre>
				 */
				var evt = $rootScope.$broadcast('$stateNotFound', redirect, state, params);

				if (evt.defaultPrevented) {
					$urlRouter.update();
					return TransitionAborted;
				}

				if (!evt.retry) {
					return null;
				}

				// Allow the handler to return a promise to defer state lookup retry
				if (options.$retry) {
					$urlRouter.update();
					return TransitionFailed;
				}
				var retryTransition = $state.transition = $q.when(evt.retry);

				retryTransition.then(function () {
					if (retryTransition !== $state.transition) {
						$rootScope.$broadcast('$stateChangeCancel', redirect.to, redirect.toParams, state, params);
						return TransitionSuperseded;
					}
					redirect.options.$retry = true;
					return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
				}, function () {
					return TransitionAborted;
				});
				$urlRouter.update();

				return retryTransition;
			}

			root.locals = { resolve: null, globals: { $stateParams: {} } };

			$state = {
				params: {},
				current: root.self,
				$current: root,
				transition: null
			};

			/**
			 * @ngdoc function
			 * @name ui.router.state.$state#reload
			 * @methodOf ui.router.state.$state
			 *
			 * @description
			 * A method that force reloads the current state. All resolves are re-resolved,
			 * controllers reinstantiated, and events re-fired.
			 *
			 * @example
			 * <pre>
			 * var app angular.module('app', ['ui.router']);
			 *
			 * app.controller('ctrl', function ($scope, $state) {
			 *   $scope.reload = function(){
			 *     $state.reload();
			 *   }
			 * });
			 * </pre>
			 *
			 * `reload()` is just an alias for:
			 * <pre>
			 * $state.transitionTo($state.current, $stateParams, { 
			 *   reload: true, inherit: false, notify: true
			 * });
			 * </pre>
			 *
			 * @param {string=|object=} state - A state name or a state object, which is the root of the resolves to be re-resolved.
			 * @example
			 * <pre>
			 * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item' 
			 * //and current state is 'contacts.detail.item'
			 * var app angular.module('app', ['ui.router']);
			 *
			 * app.controller('ctrl', function ($scope, $state) {
			 *   $scope.reload = function(){
			 *     //will reload 'contact.detail' and 'contact.detail.item' states
			 *     $state.reload('contact.detail');
			 *   }
			 * });
			 * </pre>
			 *
			 * `reload()` is just an alias for:
			 * <pre>
			 * $state.transitionTo($state.current, $stateParams, { 
			 *   reload: true, inherit: false, notify: true
			 * });
			 * </pre>
		
			 * @returns {promise} A promise representing the state of the new transition. See
			 * {@link ui.router.state.$state#methods_go $state.go}.
			 */
			$state.reload = function reload(state) {
				return $state.transitionTo($state.current, $stateParams, { reload: state || true, inherit: false, notify: true });
			};

			/**
			 * @ngdoc function
			 * @name ui.router.state.$state#go
			 * @methodOf ui.router.state.$state
			 *
			 * @description
			 * Convenience method for transitioning to a new state. `$state.go` calls 
			 * `$state.transitionTo` internally but automatically sets options to 
			 * `{ location: true, inherit: true, relative: $state.$current, notify: true }`. 
			 * This allows you to easily use an absolute or relative to path and specify 
			 * only the parameters you'd like to update (while letting unspecified parameters 
			 * inherit from the currently active ancestor states).
			 *
			 * @example
			 * <pre>
			 * var app = angular.module('app', ['ui.router']);
			 *
			 * app.controller('ctrl', function ($scope, $state) {
			 *   $scope.changeState = function () {
			 *     $state.go('contact.detail');
			 *   };
			 * });
			 * </pre>
			 * <img src='../ngdoc_assets/StateGoExamples.png'/>
			 *
			 * @param {string} to Absolute state name or relative state path. Some examples:
			 *
			 * - `$state.go('contact.detail')` - will go to the `contact.detail` state
			 * - `$state.go('^')` - will go to a parent state
			 * - `$state.go('^.sibling')` - will go to a sibling state
			 * - `$state.go('.child.grandchild')` - will go to grandchild state
			 *
			 * @param {object=} params A map of the parameters that will be sent to the state, 
			 * will populate $stateParams. Any parameters that are not specified will be inherited from currently 
			 * defined parameters. Only parameters specified in the state definition can be overridden, new 
			 * parameters will be ignored. This allows, for example, going to a sibling state that shares parameters
			 * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
			 * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
			 * will get you all current parameters, etc.
			 * @param {object=} options Options object. The options are:
			 *
			 * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
			 *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
			 * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
			 * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
			 *    defines which state to be relative from.
			 * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
			 * - **`reload`** (v0.2.5) - {boolean=false|string|object}, If `true` will force transition even if no state or params
			 *    have changed.  It will reload the resolves and views of the current state and parent states.
			 *    If `reload` is a string (or state object), the state object is fetched (by name, or object reference); and \
			 *    the transition reloads the resolves and views for that matched state, and all its children states.
			 *
			 * @returns {promise} A promise representing the state of the new transition.
			 *
			 * Possible success values:
			 *
			 * - $state.current
			 *
			 * <br/>Possible rejection values:
			 *
			 * - 'transition superseded' - when a newer transition has been started after this one
			 * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
			 * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
			 *   when a `$stateNotFound` `event.retry` promise errors.
			 * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
			 * - *resolve error* - when an error has occurred with a `resolve`
			 *
			 */
			$state.go = function go(to, params, options) {
				return $state.transitionTo(to, params, extend({ inherit: true, relative: $state.$current }, options));
			};

			/**
			 * @ngdoc function
			 * @name ui.router.state.$state#transitionTo
			 * @methodOf ui.router.state.$state
			 *
			 * @description
			 * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
			 * uses `transitionTo` internally. `$state.go` is recommended in most situations.
			 *
			 * @example
			 * <pre>
			 * var app = angular.module('app', ['ui.router']);
			 *
			 * app.controller('ctrl', function ($scope, $state) {
			 *   $scope.changeState = function () {
			 *     $state.transitionTo('contact.detail');
			 *   };
			 * });
			 * </pre>
			 *
			 * @param {string} to State name.
			 * @param {object=} toParams A map of the parameters that will be sent to the state,
			 * will populate $stateParams.
			 * @param {object=} options Options object. The options are:
			 *
			 * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
			 *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
			 * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
			 * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'), 
			 *    defines which state to be relative from.
			 * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
			 * - **`reload`** (v0.2.5) - {boolean=false|string=|object=}, If `true` will force transition even if the state or params 
			 *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
			 *    use this when you want to force a reload when *everything* is the same, including search params.
			 *    if String, then will reload the state with the name given in reload, and any children.
			 *    if Object, then a stateObj is expected, will reload the state found in stateObj, and any children.
			 *
			 * @returns {promise} A promise representing the state of the new transition. See
			 * {@link ui.router.state.$state#methods_go $state.go}.
			 */
			$state.transitionTo = function transitionTo(to, toParams, options) {
				toParams = toParams || {};
				options = extend({
					location: true, inherit: false, relative: null, notify: true, reload: false, $retry: false
				}, options || {});

				var from = $state.$current, fromParams = $state.params, fromPath = from.path;
				var evt, toState = findState(to, options.relative);

				// Store the hash param for later (since it will be stripped out by various methods)
				var hash = toParams['#'];

				if (!isDefined(toState)) {
					var redirect = { to: to, toParams: toParams, options: options };
					var redirectResult = handleRedirect(redirect, from.self, fromParams, options);

					if (redirectResult) {
						return redirectResult;
					}

					// Always retry once if the $stateNotFound was not prevented
					// (handles either redirect changed or state lazy-definition)
					to = redirect.to;
					toParams = redirect.toParams;
					options = redirect.options;
					toState = findState(to, options.relative);

					if (!isDefined(toState)) {
						if (!options.relative) throw new Error("No such state '" + to + "'");
						throw new Error("Could not resolve '" + to + "' from state '" + options.relative + "'");
					}
				}
				if (toState[abstractKey]) throw new Error("Cannot transition to abstract state '" + to + "'");
				if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);
				if (!toState.params.$$validates(toParams)) return TransitionFailed;

				toParams = toState.params.$$values(toParams);
				to = toState;

				var toPath = to.path;

				// Starting from the root of the path, keep all levels that haven't changed
				var keep = 0, state = toPath[keep], locals = root.locals, toLocals = [];

				if (!options.reload) {
					while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {
						locals = toLocals[keep] = state.locals;
						keep++;
						state = toPath[keep];
					}
				} else if (isString(options.reload) || isObject(options.reload)) {
					if (isObject(options.reload) && !options.reload.name) {
						throw new Error('Invalid reload state object');
					}

					var reloadState = options.reload === true ? fromPath[0] : findState(options.reload);
					if (options.reload && !reloadState) {
						throw new Error("No such reload state '" + (isString(options.reload) ? options.reload : options.reload.name) + "'");
					}

					while (state && state === fromPath[keep] && state !== reloadState) {
						locals = toLocals[keep] = state.locals;
						keep++;
						state = toPath[keep];
					}
				}

				// If we're going to the same state and all locals are kept, we've got nothing to do.
				// But clear 'transition', as we still want to cancel any other pending transitions.
				// TODO: We may not want to bump 'transition' if we're called from a location change
				// that we've initiated ourselves, because we might accidentally abort a legitimate
				// transition initiated from code?
				if (shouldSkipReload(to, toParams, from, fromParams, locals, options)) {
					if (hash) toParams['#'] = hash;
					$state.params = toParams;
					copy($state.params, $stateParams);
					copy(filterByKeys(to.params.$$keys(), $stateParams), to.locals.globals.$stateParams);
					if (options.location && to.navigable && to.navigable.url) {
						$urlRouter.push(to.navigable.url, toParams, {
							$$avoidResync: true, replace: options.location === 'replace'
						});
						$urlRouter.update(true);
					}
					$state.transition = null;
					return $q.when($state.current);
				}

				// Filter parameters before we pass them to event handlers etc.
				toParams = filterByKeys(to.params.$$keys(), toParams || {});

				// Re-add the saved hash before we start returning things or broadcasting $stateChangeStart
				if (hash) toParams['#'] = hash;

				// Broadcast start event and cancel the transition if requested
				if (options.notify) {
					/**
					 * @ngdoc event
					 * @name ui.router.state.$state#$stateChangeStart
					 * @eventOf ui.router.state.$state
					 * @eventType broadcast on root scope
					 * @description
					 * Fired when the state transition **begins**. You can use `event.preventDefault()`
					 * to prevent the transition from happening and then the transition promise will be
					 * rejected with a `'transition prevented'` value.
					 *
					 * @param {Object} event Event object.
					 * @param {State} toState The state being transitioned to.
					 * @param {Object} toParams The params supplied to the `toState`.
					 * @param {State} fromState The current state, pre-transition.
					 * @param {Object} fromParams The params supplied to the `fromState`.
					 *
					 * @example
					 *
					 * <pre>
					 * $rootScope.$on('$stateChangeStart',
					 * function(event, toState, toParams, fromState, fromParams){
					 *     event.preventDefault();
					 *     // transitionTo() promise will be rejected with
					 *     // a 'transition prevented' error
					 * })
					 * </pre>
					 */
					if ($rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams, options).defaultPrevented) {
						$rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
						//Don't update and resync url if there's been a new transition started. see issue #2238, #600
						if ($state.transition == null) $urlRouter.update();
						return TransitionPrevented;
					}
				}

				// Resolve locals for the remaining states, but don't update any global state just
				// yet -- if anything fails to resolve the current state needs to remain untouched.
				// We also set up an inheritance chain for the locals here. This allows the view directive
				// to quickly look up the correct definition for each view in the current state. Even
				// though we create the locals object itself outside resolveState(), it is initially
				// empty and gets filled asynchronously. We need to keep track of the promise for the
				// (fully resolved) current locals, and pass this down the chain.
				var resolved = $q.when(locals);

				for (var l = keep; l < toPath.length; l++, state = toPath[l]) {
					locals = toLocals[l] = inherit(locals);
					resolved = resolveState(state, toParams, state === to, resolved, locals, options);
				}

				// Once everything is resolved, we are ready to perform the actual transition
				// and return a promise for the new state. We also keep track of what the
				// current promise is, so that we can detect overlapping transitions and
				// keep only the outcome of the last transition.
				var transition = $state.transition = resolved.then(function () {
					var l, entering, exiting;

					if ($state.transition !== transition) {
						$rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
						return TransitionSuperseded;
					}

					// Exit 'from' states not kept
					for (l = fromPath.length - 1; l >= keep; l--) {
						exiting = fromPath[l];
						if (exiting.self.onExit) {
							$injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
						}
						exiting.locals = null;
					}

					// Enter 'to' states not kept
					for (l = keep; l < toPath.length; l++) {
						entering = toPath[l];
						entering.locals = toLocals[l];
						if (entering.self.onEnter) {
							$injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
						}
					}

					// Run it again, to catch any transitions in callbacks
					if ($state.transition !== transition) {
						$rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
						return TransitionSuperseded;
					}

					// Update globals in $state
					$state.$current = to;
					$state.current = to.self;
					$state.params = toParams;
					copy($state.params, $stateParams);
					$state.transition = null;

					if (options.location && to.navigable) {
						$urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {
							$$avoidResync: true, replace: options.location === 'replace'
						});
					}

					if (options.notify) {
						/**
						 * @ngdoc event
						 * @name ui.router.state.$state#$stateChangeSuccess
						 * @eventOf ui.router.state.$state
						 * @eventType broadcast on root scope
						 * @description
						 * Fired once the state transition is **complete**.
						 *
						 * @param {Object} event Event object.
						 * @param {State} toState The state being transitioned to.
						 * @param {Object} toParams The params supplied to the `toState`.
						 * @param {State} fromState The current state, pre-transition.
						 * @param {Object} fromParams The params supplied to the `fromState`.
						 */
						$rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);
					}
					$urlRouter.update(true);

					return $state.current;
				}).then(null, function (error) {
					// propagate TransitionSuperseded error without emitting $stateChangeCancel
					// as it was already emitted in the success handler above
					if (error === TransitionSupersededError) return TransitionSuperseded;

					if ($state.transition !== transition) {
						$rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
						return TransitionSuperseded;
					}

					$state.transition = null;
					/**
					 * @ngdoc event
					 * @name ui.router.state.$state#$stateChangeError
					 * @eventOf ui.router.state.$state
					 * @eventType broadcast on root scope
					 * @description
					 * Fired when an **error occurs** during transition. It's important to note that if you
					 * have any errors in your resolve functions (javascript errors, non-existent services, etc)
					 * they will not throw traditionally. You must listen for this $stateChangeError event to
					 * catch **ALL** errors.
					 *
					 * @param {Object} event Event object.
					 * @param {State} toState The state being transitioned to.
					 * @param {Object} toParams The params supplied to the `toState`.
					 * @param {State} fromState The current state, pre-transition.
					 * @param {Object} fromParams The params supplied to the `fromState`.
					 * @param {Error} error The resolve error object.
					 */
					evt = $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);

					if (!evt.defaultPrevented) {
						$urlRouter.update();
					}

					return $q.reject(error);
				});

				return transition;
			};

			/**
			 * @ngdoc function
			 * @name ui.router.state.$state#is
			 * @methodOf ui.router.state.$state
			 *
			 * @description
			 * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
			 * but only checks for the full state name. If params is supplied then it will be
			 * tested for strict equality against the current active params object, so all params
			 * must match with none missing and no extras.
			 *
			 * @example
			 * <pre>
			 * $state.$current.name = 'contacts.details.item';
			 *
			 * // absolute name
			 * $state.is('contact.details.item'); // returns true
			 * $state.is(contactDetailItemStateObject); // returns true
			 *
			 * // relative name (. and ^), typically from a template
			 * // E.g. from the 'contacts.details' template
			 * <div ng-class="{highlighted: $state.is('.item')}">Item</div>
			 * </pre>
			 *
			 * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.
			 * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like
			 * to test against the current active state.
			 * @param {object=} options An options object.  The options are:
			 *
			 * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will
			 * test relative to `options.relative` state (or name).
			 *
			 * @returns {boolean} Returns true if it is the state.
			 */
			$state.is = function is(stateOrName, params, options) {
				options = extend({ relative: $state.$current }, options || {});
				var state = findState(stateOrName, options.relative);

				if (!isDefined(state)) { return undefined; }
				if ($state.$current !== state) { return false; }
				return params ? equalForKeys(state.params.$$values(params), $stateParams) : true;
			};

			/**
			 * @ngdoc function
			 * @name ui.router.state.$state#includes
			 * @methodOf ui.router.state.$state
			 *
			 * @description
			 * A method to determine if the current active state is equal to or is the child of the
			 * state stateName. If any params are passed then they will be tested for a match as well.
			 * Not all the parameters need to be passed, just the ones you'd like to test for equality.
			 *
			 * @example
			 * Partial and relative names
			 * <pre>
			 * $state.$current.name = 'contacts.details.item';
			 *
			 * // Using partial names
			 * $state.includes("contacts"); // returns true
			 * $state.includes("contacts.details"); // returns true
			 * $state.includes("contacts.details.item"); // returns true
			 * $state.includes("contacts.list"); // returns false
			 * $state.includes("about"); // returns false
			 *
			 * // Using relative names (. and ^), typically from a template
			 * // E.g. from the 'contacts.details' template
			 * <div ng-class="{highlighted: $state.includes('.item')}">Item</div>
			 * </pre>
			 *
			 * Basic globbing patterns
			 * <pre>
			 * $state.$current.name = 'contacts.details.item.url';
			 *
			 * $state.includes("*.details.*.*"); // returns true
			 * $state.includes("*.details.**"); // returns true
			 * $state.includes("**.item.**"); // returns true
			 * $state.includes("*.details.item.url"); // returns true
			 * $state.includes("*.details.*.url"); // returns true
			 * $state.includes("*.details.*"); // returns false
			 * $state.includes("item.**"); // returns false
			 * </pre>
			 *
			 * @param {string} stateOrName A partial name, relative name, or glob pattern
			 * to be searched for within the current state name.
			 * @param {object=} params A param object, e.g. `{sectionId: section.id}`,
			 * that you'd like to test against the current active state.
			 * @param {object=} options An options object.  The options are:
			 *
			 * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,
			 * .includes will test relative to `options.relative` state (or name).
			 *
			 * @returns {boolean} Returns true if it does include the state
			 */
			$state.includes = function includes(stateOrName, params, options) {
				options = extend({ relative: $state.$current }, options || {});
				if (isString(stateOrName) && isGlob(stateOrName)) {
					if (!doesStateMatchGlob(stateOrName)) {
						return false;
					}
					stateOrName = $state.$current.name;
				}

				var state = findState(stateOrName, options.relative);
				if (!isDefined(state)) { return undefined; }
				if (!isDefined($state.$current.includes[state.name])) { return false; }
				if (!params) { return true; }

				var keys = objectKeys(params);
				for (var i = 0; i < keys.length; i++) {
					var key = keys[i], paramDef = state.params[key];
					if (paramDef && !paramDef.type.equals($stateParams[key], params[key])) {
						return false;
					}
				}

				return true;
			};


			/**
			 * @ngdoc function
			 * @name ui.router.state.$state#href
			 * @methodOf ui.router.state.$state
			 *
			 * @description
			 * A url generation method that returns the compiled url for the given state populated with the given params.
			 *
			 * @example
			 * <pre>
			 * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
			 * </pre>
			 *
			 * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
			 * @param {object=} params An object of parameter values to fill the state's required parameters.
			 * @param {object=} options Options object. The options are:
			 *
			 * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
			 *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
			 *    ancestor with a valid url).
			 * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
			 * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
			 *    defines which state to be relative from.
			 * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
			 * 
			 * @returns {string} compiled state url
			 */
			$state.href = function href(stateOrName, params, options) {
				options = extend({
					lossy: true,
					inherit: true,
					absolute: false,
					relative: $state.$current
				}, options || {});

				var state = findState(stateOrName, options.relative);

				if (!isDefined(state)) return null;
				if (options.inherit) params = inheritParams($stateParams, params || {}, $state.$current, state);

				var nav = (state && options.lossy) ? state.navigable : state;

				if (!nav || nav.url === undefined || nav.url === null) {
					return null;
				}
				return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys().concat('#'), params || {}), {
					absolute: options.absolute
				});
			};

			/**
			 * @ngdoc function
			 * @name ui.router.state.$state#get
			 * @methodOf ui.router.state.$state
			 *
			 * @description
			 * Returns the state configuration object for any specific state or all states.
			 *
			 * @param {string|object=} stateOrName (absolute or relative) If provided, will only get the config for
			 * the requested state. If not provided, returns an array of ALL state configs.
			 * @param {string|object=} context When stateOrName is a relative state reference, the state will be retrieved relative to context.
			 * @returns {Object|Array} State configuration object or array of all objects.
			 */
			$state.get = function (stateOrName, context) {
				if (arguments.length === 0) return map(objectKeys(states), function (name) { return states[name].self; });
				var state = findState(stateOrName, context || $state.$current);
				return (state && state.self) ? state.self : null;
			};

			function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {
				// Make a restricted $stateParams with only the parameters that apply to this state if
				// necessary. In addition to being available to the controller and onEnter/onExit callbacks,
				// we also need $stateParams to be available for any $injector calls we make during the
				// dependency resolution process.
				var $stateParams = (paramsAreFiltered) ? params : filterByKeys(state.params.$$keys(), params);
				var locals = { $stateParams: $stateParams };

				// Resolve 'global' dependencies for the state, i.e. those not specific to a view.
				// We're also including $stateParams in this; that way the parameters are restricted
				// to the set that should be visible to the state, and are independent of when we update
				// the global $state and $stateParams values.
				dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
				var promises = [dst.resolve.then(function (globals) {
					dst.globals = globals;
				})];
				if (inherited) promises.push(inherited);

				function resolveViews() {
					var viewsPromises = [];

					// Resolve template and dependencies for all views.
					forEach(state.views, function (view, name) {
						var injectables = (view.resolve && view.resolve !== state.resolve ? view.resolve : {});
						injectables.$template = [function () {
							return $view.load(name, { view: view, locals: dst.globals, params: $stateParams, notify: options.notify }) || '';
						}];

						viewsPromises.push($resolve.resolve(injectables, dst.globals, dst.resolve, state).then(function (result) {
							// References to the controller (only instantiated at link time)
							if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
								var injectLocals = angular.extend({}, injectables, dst.globals);
								result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
							} else {
								result.$$controller = view.controller;
							}
							// Provide access to the state itself for internal use
							result.$$state = state;
							result.$$controllerAs = view.controllerAs;
							result.$$resolveAs = view.resolveAs;
							dst[name] = result;
						}));
					});

					return $q.all(viewsPromises).then(function () {
						return dst.globals;
					});
				}

				// Wait for all the promises and then return the activation object
				return $q.all(promises).then(resolveViews).then(function (values) {
					return dst;
				});
			}

			return $state;
		}

		function shouldSkipReload(to, toParams, from, fromParams, locals, options) {
			// Return true if there are no differences in non-search (path/object) params, false if there are differences
			function nonSearchParamsEqual(fromAndToState, fromParams, toParams) {
				// Identify whether all the parameters that differ between `fromParams` and `toParams` were search params.
				function notSearchParam(key) {
					return fromAndToState.params[key].location != "search";
				}
				var nonQueryParamKeys = fromAndToState.params.$$keys().filter(notSearchParam);
				var nonQueryParams = pick.apply({}, [fromAndToState.params].concat(nonQueryParamKeys));
				var nonQueryParamSet = new $$UMFP.ParamSet(nonQueryParams);
				return nonQueryParamSet.$$equals(fromParams, toParams);
			}

			// If reload was not explicitly requested
			// and we're transitioning to the same state we're already in
			// and    the locals didn't change
			//     or they changed in a way that doesn't merit reloading
			//        (reloadOnParams:false, or reloadOnSearch.false and only search params changed)
			// Then return true.
			if (!options.reload && to === from &&
			  (locals === from.locals || (to.self.reloadOnSearch === false && nonSearchParamsEqual(from, fromParams, toParams)))) {
				return true;
			}
		}
	}

	angular.module('ui.router.state')
	  .factory('$stateParams', function () { return {}; })
	  .constant("$state.runtime", { autoinject: true })
	  .provider('$state', $StateProvider)
	  // Inject $state to initialize when entering runtime. #2574
	  .run(['$injector', function ($injector) {
	  	// Allow tests (stateSpec.js) to turn this off by defining this constant
	  	if ($injector.get("$state.runtime").autoinject) {
	  		$injector.get('$state');
	  	}
	  }]);


	$ViewProvider.$inject = [];
	function $ViewProvider() {

		this.$get = $get;
		/**
		 * @ngdoc object
		 * @name ui.router.state.$view
		 *
		 * @requires ui.router.util.$templateFactory
		 * @requires $rootScope
		 *
		 * @description
		 *
		 */
		$get.$inject = ['$rootScope', '$templateFactory'];
		function $get($rootScope, $templateFactory) {
			return {
				// $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })
				/**
				 * @ngdoc function
				 * @name ui.router.state.$view#load
				 * @methodOf ui.router.state.$view
				 *
				 * @description
				 *
				 * @param {string} name name
				 * @param {object} options option object.
				 */
				load: function load(name, options) {
					var result, defaults = {
						template: null, controller: null, view: null, locals: null, notify: true, async: true, params: {}
					};
					options = extend(defaults, options);

					if (options.view) {
						result = $templateFactory.fromConfig(options.view, options.params, options.locals);
					}
					return result;
				}
			};
		}
	}

	angular.module('ui.router.state').provider('$view', $ViewProvider);

	/**
	 * @ngdoc object
	 * @name ui.router.state.$uiViewScrollProvider
	 *
	 * @description
	 * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.
	 */
	function $ViewScrollProvider() {

		var useAnchorScroll = false;

		/**
		 * @ngdoc function
		 * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll
		 * @methodOf ui.router.state.$uiViewScrollProvider
		 *
		 * @description
		 * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for
		 * scrolling based on the url anchor.
		 */
		this.useAnchorScroll = function () {
			useAnchorScroll = true;
		};

		/**
		 * @ngdoc object
		 * @name ui.router.state.$uiViewScroll
		 *
		 * @requires $anchorScroll
		 * @requires $timeout
		 *
		 * @description
		 * When called with a jqLite element, it scrolls the element into view (after a
		 * `$timeout` so the DOM has time to refresh).
		 *
		 * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,
		 * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.
		 */
		this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {
			if (useAnchorScroll) {
				return $anchorScroll;
			}

			return function ($element) {
				return $timeout(function () {
					$element[0].scrollIntoView();
				}, 0, false);
			};
		}];
	}

	angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);

	/**
	 * @ngdoc directive
	 * @name ui.router.state.directive:ui-view
	 *
	 * @requires ui.router.state.$state
	 * @requires $compile
	 * @requires $controller
	 * @requires $injector
	 * @requires ui.router.state.$uiViewScroll
	 * @requires $document
	 *
	 * @restrict ECA
	 *
	 * @description
	 * The ui-view directive tells $state where to place your templates.
	 *
	 * @param {string=} name A view name. The name should be unique amongst the other views in the
	 * same state. You can have views of the same name that live in different states.
	 *
	 * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window
	 * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll
	 * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you
	 * scroll ui-view elements into view when they are populated during a state activation.
	 *
	 * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)
	 * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*
	 *
	 * @param {string=} onload Expression to evaluate whenever the view updates.
	 *
	 * @example
	 * A view can be unnamed or named.
	 * <pre>
	 * <!-- Unnamed -->
	 * <div ui-view></div>
	 *
	 * <!-- Named -->
	 * <div ui-view="viewName"></div>
	 * </pre>
	 *
	 * You can only have one unnamed view within any template (or root html). If you are only using a
	 * single view and it is unnamed then you can populate it like so:
	 * <pre>
	 * <div ui-view></div>
	 * $stateProvider.state("home", {
	 *   template: "<h1>HELLO!</h1>"
	 * })
	 * </pre>
	 *
	 * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#methods_state `views`}
	 * config property, by name, in this case an empty name:
	 * <pre>
	 * $stateProvider.state("home", {
	 *   views: {
	 *     "": {
	 *       template: "<h1>HELLO!</h1>"
	 *     }
	 *   }    
	 * })
	 * </pre>
	 *
	 * But typically you'll only use the views property if you name your view or have more than one view
	 * in the same template. There's not really a compelling reason to name a view if its the only one,
	 * but you could if you wanted, like so:
	 * <pre>
	 * <div ui-view="main"></div>
	 * </pre>
	 * <pre>
	 * $stateProvider.state("home", {
	 *   views: {
	 *     "main": {
	 *       template: "<h1>HELLO!</h1>"
	 *     }
	 *   }    
	 * })
	 * </pre>
	 *
	 * Really though, you'll use views to set up multiple views:
	 * <pre>
	 * <div ui-view></div>
	 * <div ui-view="chart"></div>
	 * <div ui-view="data"></div>
	 * </pre>
	 *
	 * <pre>
	 * $stateProvider.state("home", {
	 *   views: {
	 *     "": {
	 *       template: "<h1>HELLO!</h1>"
	 *     },
	 *     "chart": {
	 *       template: "<chart_thing/>"
	 *     },
	 *     "data": {
	 *       template: "<data_thing/>"
	 *     }
	 *   }    
	 * })
	 * </pre>
	 *
	 * Examples for `autoscroll`:
	 *
	 * <pre>
	 * <!-- If autoscroll present with no expression,
	 *      then scroll ui-view into view -->
	 * <ui-view autoscroll/>
	 *
	 * <!-- If autoscroll present with valid expression,
	 *      then scroll ui-view into view if expression evaluates to true -->
	 * <ui-view autoscroll='true'/>
	 * <ui-view autoscroll='false'/>
	 * <ui-view autoscroll='scopeVariable'/>
	 * </pre>
	 *
	 * Resolve data:
	 *
	 * The resolved data from the state's `resolve` block is placed on the scope as `$resolve` (this
	 * can be customized using [[ViewDeclaration.resolveAs]]).  This can be then accessed from the template.
	 *
	 * Note that when `controllerAs` is being used, `$resolve` is set on the controller instance *after* the
	 * controller is instantiated.  The `$onInit()` hook can be used to perform initialization code which
	 * depends on `$resolve` data.
	 *
	 * Example usage of $resolve in a view template
	 * <pre>
	 * $stateProvider.state('home', {
	 *   template: '<my-component user="$resolve.user"></my-component>',
	 *   resolve: {
	 *     user: function(UserService) { return UserService.fetchUser(); }
	 *   }
	 * });
	 * </pre>
	 */
	$ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll', '$interpolate', '$q'];
	function $ViewDirective($state, $injector, $uiViewScroll, $interpolate, $q) {

		function getService() {
			return ($injector.has) ? function (service) {
				return $injector.has(service) ? $injector.get(service) : null;
			} : function (service) {
				try {
					return $injector.get(service);
				} catch (e) {
					return null;
				}
			};
		}

		var service = getService(),
			$animator = service('$animator'),
			$animate = service('$animate');

		// Returns a set of DOM manipulation functions based on which Angular version
		// it should use
		function getRenderer(attrs, scope) {
			var statics = function () {
				return {
					enter: function (element, target, cb) { target.after(element); cb(); },
					leave: function (element, cb) { element.remove(); cb(); }
				};
			};

			if ($animate) {
				return {
					enter: function (element, target, cb) {
						if (angular.version.minor > 2) {
							$animate.enter(element, null, target).then(cb);
						} else {
							$animate.enter(element, null, target, cb);
						}
					},
					leave: function (element, cb) {
						if (angular.version.minor > 2) {
							$animate.leave(element).then(cb);
						} else {
							$animate.leave(element, cb);
						}
					}
				};
			}

			if ($animator) {
				var animate = $animator && $animator(scope, attrs);

				return {
					enter: function (element, target, cb) { animate.enter(element, null, target); cb(); },
					leave: function (element, cb) { animate.leave(element); cb(); }
				};
			}

			return statics();
		}

		var directive = {
			restrict: 'ECA',
			terminal: true,
			priority: 400,
			transclude: 'element',
			compile: function (tElement, tAttrs, $transclude) {
				return function (scope, $element, attrs) {
					var previousEl, currentEl, currentScope, latestLocals,
						onloadExp = attrs.onload || '',
						autoScrollExp = attrs.autoscroll,
						renderer = getRenderer(attrs, scope),
						inherited = $element.inheritedData('$uiView');

					scope.$on('$stateChangeSuccess', function () {
						updateView(false);
					});

					updateView(true);

					function cleanupLastView() {
						if (previousEl) {
							previousEl.remove();
							previousEl = null;
						}

						if (currentScope) {
							currentScope.$destroy();
							currentScope = null;
						}

						if (currentEl) {
							var $uiViewData = currentEl.data('$uiViewAnim');
							renderer.leave(currentEl, function () {
								$uiViewData.$$animLeave.resolve();
								previousEl = null;
							});

							previousEl = currentEl;
							currentEl = null;
						}
					}

					function updateView(firstTime) {
						var newScope,
							name = getUiViewName(scope, attrs, $element, $interpolate),
							previousLocals = name && $state.$current && $state.$current.locals[name];

						if (!firstTime && previousLocals === latestLocals) return; // nothing to do
						newScope = scope.$new();
						latestLocals = $state.$current.locals[name];

						/**
						 * @ngdoc event
						 * @name ui.router.state.directive:ui-view#$viewContentLoading
						 * @eventOf ui.router.state.directive:ui-view
						 * @eventType emits on ui-view directive scope
						 * @description
						 *
						 * Fired once the view **begins loading**, *before* the DOM is rendered.
						 *
						 * @param {Object} event Event object.
						 * @param {string} viewName Name of the view.
						 */
						newScope.$emit('$viewContentLoading', name);

						var clone = $transclude(newScope, function (clone) {
							var animEnter = $q.defer(), animLeave = $q.defer();
							var viewAnimData = {
								$animEnter: animEnter.promise,
								$animLeave: animLeave.promise,
								$$animLeave: animLeave
							};

							clone.data('$uiViewAnim', viewAnimData);
							renderer.enter(clone, $element, function onUiViewEnter() {
								animEnter.resolve();
								if (currentScope) {
									currentScope.$emit('$viewContentAnimationEnded');
								}

								if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
									$uiViewScroll(clone);
								}
							});
							cleanupLastView();
						});

						currentEl = clone;
						currentScope = newScope;
						/**
						 * @ngdoc event
						 * @name ui.router.state.directive:ui-view#$viewContentLoaded
						 * @eventOf ui.router.state.directive:ui-view
						 * @eventType emits on ui-view directive scope
						 * @description
						 * Fired once the view is **loaded**, *after* the DOM is rendered.
						 *
						 * @param {Object} event Event object.
						 * @param {string} viewName Name of the view.
						 */
						currentScope.$emit('$viewContentLoaded', name);
						currentScope.$eval(onloadExp);
					}
				};
			}
		};

		return directive;
	}

	$ViewDirectiveFill.$inject = ['$compile', '$controller', '$state', '$interpolate'];
	function $ViewDirectiveFill($compile, $controller, $state, $interpolate) {
		return {
			restrict: 'ECA',
			priority: -400,
			compile: function (tElement) {
				var initial = tElement.html();
				return function (scope, $element, attrs) {
					var current = $state.$current,
						name = getUiViewName(scope, attrs, $element, $interpolate),
						locals = current && current.locals[name];

					if (!locals) {
						return;
					}

					$element.data('$uiView', { name: name, state: locals.$$state });
					$element.html(locals.$template ? locals.$template : initial);

					var resolveData = angular.extend({}, locals);
					scope[locals.$$resolveAs] = resolveData;

					var link = $compile($element.contents());

					if (locals.$$controller) {
						locals.$scope = scope;
						locals.$element = $element;
						var controller = $controller(locals.$$controller, locals);
						if (locals.$$controllerAs) {
							scope[locals.$$controllerAs] = controller;
							scope[locals.$$controllerAs][locals.$$resolveAs] = resolveData;
						}
						if (isFunction(controller.$onInit)) controller.$onInit();
						$element.data('$ngControllerController', controller);
						$element.children().data('$ngControllerController', controller);
					}

					link(scope);
				};
			}
		};
	}

	/**
	 * Shared ui-view code for both directives:
	 * Given scope, element, and its attributes, return the view's name
	 */
	function getUiViewName(scope, attrs, element, $interpolate) {
		var name = $interpolate(attrs.uiView || attrs.name || '')(scope);
		var uiViewCreatedBy = element.inheritedData('$uiView');
		return name.indexOf('@') >= 0 ? name : (name + '@' + (uiViewCreatedBy ? uiViewCreatedBy.state.name : ''));
	}

	angular.module('ui.router.state').directive('uiView', $ViewDirective);
	angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);

	function parseStateRef(ref, current) {
		var preparsed = ref.match(/^\s*({[^}]*})\s*$/), parsed;
		if (preparsed) ref = current + '(' + preparsed[1] + ')';
		parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/);
		if (!parsed || parsed.length !== 4) throw new Error("Invalid state ref '" + ref + "'");
		return { state: parsed[1], paramExpr: parsed[3] || null };
	}

	function stateContext(el) {
		var stateData = el.parent().inheritedData('$uiView');

		if (stateData && stateData.state && stateData.state.name) {
			return stateData.state;
		}
	}

	function getTypeInfo(el) {
		// SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
		var isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';
		var isForm = el[0].nodeName === "FORM";

		return {
			attr: isForm ? "action" : (isSvg ? 'xlink:href' : 'href'),
			isAnchor: el.prop("tagName").toUpperCase() === "A",
			clickable: !isForm
		};
	}

	function clickHook(el, $state, $timeout, type, current) {
		return function (e) {
			var button = e.which || e.button, target = current();

			if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr('target'))) {
				// HACK: This is to allow ng-clicks to be processed before the transition is initiated:
				var transition = $timeout(function () {
					$state.go(target.state, target.params, target.options);
				});
				e.preventDefault();

				// if the state has no URL, ignore one preventDefault from the <a> directive.
				var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1 : 0;

				e.preventDefault = function () {
					if (ignorePreventDefaultCount-- <= 0) $timeout.cancel(transition);
				};
			}
		};
	}

	function defaultOpts(el, $state) {
		return { relative: stateContext(el) || $state.$current, inherit: true };
	}

	/**
	 * @ngdoc directive
	 * @name ui.router.state.directive:ui-sref
	 *
	 * @requires ui.router.state.$state
	 * @requires $timeout
	 *
	 * @restrict A
	 *
	 * @description
	 * A directive that binds a link (`<a>` tag) to a state. If the state has an associated
	 * URL, the directive will automatically generate & update the `href` attribute via
	 * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking
	 * the link will trigger a state transition with optional parameters.
	 *
	 * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be
	 * handled natively by the browser.
	 *
	 * You can also use relative state paths within ui-sref, just like the relative
	 * paths passed to `$state.go()`. You just need to be aware that the path is relative
	 * to the state that the link lives in, in other words the state that loaded the
	 * template containing the link.
	 *
	 * You can specify options to pass to {@link ui.router.state.$state#methods_go $state.go()}
	 * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,
	 * and `reload`.
	 *
	 * @example
	 * Here's an example of how you'd use ui-sref and how it would compile. If you have the
	 * following template:
	 * <pre>
	 * <a ui-sref="home">Home</a> | <a ui-sref="about">About</a> | <a ui-sref="{page: 2}">Next page</a>
	 *
	 * <ul>
	 *     <li ng-repeat="contact in contacts">
	 *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>
	 *     </li>
	 * </ul>
	 * </pre>
	 *
	 * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):
	 * <pre>
	 * <a href="#/home" ui-sref="home">Home</a> | <a href="#/about" ui-sref="about">About</a> | <a href="#/contacts?page=2" ui-sref="{page: 2}">Next page</a>
	 *
	 * <ul>
	 *     <li ng-repeat="contact in contacts">
	 *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>
	 *     </li>
	 *     <li ng-repeat="contact in contacts">
	 *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>
	 *     </li>
	 *     <li ng-repeat="contact in contacts">
	 *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>
	 *     </li>
	 * </ul>
	 *
	 * <a ui-sref="home" ui-sref-opts="{reload: true}">Home</a>
	 * </pre>
	 *
	 * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
	 * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#methods_go $state.go()}
	 */
	$StateRefDirective.$inject = ['$state', '$timeout'];
	function $StateRefDirective($state, $timeout) {
		return {
			restrict: 'A',
			require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
			link: function (scope, element, attrs, uiSrefActive) {
				var ref = parseStateRef(attrs.uiSref, $state.current.name);
				var def = { state: ref.state, href: null, params: null };
				var type = getTypeInfo(element);
				var active = uiSrefActive[1] || uiSrefActive[0];
				var unlinkInfoFn = null;
				var hookFn;

				def.options = extend(defaultOpts(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});

				var update = function (val) {
					if (val) def.params = angular.copy(val);
					def.href = $state.href(ref.state, def.params, def.options);

					if (unlinkInfoFn) unlinkInfoFn();
					if (active) unlinkInfoFn = active.$$addStateInfo(ref.state, def.params);
					if (def.href !== null) attrs.$set(type.attr, def.href);
				};

				if (ref.paramExpr) {
					scope.$watch(ref.paramExpr, function (val) { if (val !== def.params) update(val); }, true);
					def.params = angular.copy(scope.$eval(ref.paramExpr));
				}
				update();

				if (!type.clickable) return;
				hookFn = clickHook(element, $state, $timeout, type, function () { return def; });
				element[element.on ? 'on' : 'bind']("click", hookFn);
				scope.$on('$destroy', function () {
					element[element.off ? 'off' : 'unbind']("click", hookFn);
				});
			}
		};
	}

	/**
	 * @ngdoc directive
	 * @name ui.router.state.directive:ui-state
	 *
	 * @requires ui.router.state.uiSref
	 *
	 * @restrict A
	 *
	 * @description
	 * Much like ui-sref, but will accept named $scope properties to evaluate for a state definition,
	 * params and override options.
	 *
	 * @param {string} ui-state 'stateName' can be any valid absolute or relative state
	 * @param {Object} ui-state-params params to pass to {@link ui.router.state.$state#methods_href $state.href()}
	 * @param {Object} ui-state-opts options to pass to {@link ui.router.state.$state#methods_go $state.go()}
	 */
	$StateRefDynamicDirective.$inject = ['$state', '$timeout'];
	function $StateRefDynamicDirective($state, $timeout) {
		return {
			restrict: 'A',
			require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
			link: function (scope, element, attrs, uiSrefActive) {
				var type = getTypeInfo(element);
				var active = uiSrefActive[1] || uiSrefActive[0];
				var group = [attrs.uiState, attrs.uiStateParams || null, attrs.uiStateOpts || null];
				var watch = '[' + group.map(function (val) { return val || 'null'; }).join(', ') + ']';
				var def = { state: null, params: null, options: null, href: null };
				var unlinkInfoFn = null;
				var hookFn;

				function runStateRefLink(group) {
					def.state = group[0]; def.params = group[1]; def.options = group[2];
					def.href = $state.href(def.state, def.params, def.options);

					if (unlinkInfoFn) unlinkInfoFn();
					if (active) unlinkInfoFn = active.$$addStateInfo(def.state, def.params);
					if (def.href) attrs.$set(type.attr, def.href);
				}

				scope.$watch(watch, runStateRefLink, true);
				runStateRefLink(scope.$eval(watch));

				if (!type.clickable) return;
				hookFn = clickHook(element, $state, $timeout, type, function () { return def; });
				element[element.on ? 'on' : 'bind']("click", hookFn);
				scope.$on('$destroy', function () {
					element[element.off ? 'off' : 'unbind']("click", hookFn);
				});
			}
		};
	}


	/**
	 * @ngdoc directive
	 * @name ui.router.state.directive:ui-sref-active
	 *
	 * @requires ui.router.state.$state
	 * @requires ui.router.state.$stateParams
	 * @requires $interpolate
	 *
	 * @restrict A
	 *
	 * @description
	 * A directive working alongside ui-sref to add classes to an element when the
	 * related ui-sref directive's state is active, and removing them when it is inactive.
	 * The primary use-case is to simplify the special appearance of navigation menus
	 * relying on `ui-sref`, by having the "active" state's menu button appear different,
	 * distinguishing it from the inactive menu items.
	 *
	 * ui-sref-active can live on the same element as ui-sref or on a parent element. The first
	 * ui-sref-active found at the same level or above the ui-sref will be used.
	 *
	 * Will activate when the ui-sref's target state or any child state is active. If you
	 * need to activate only when the ui-sref target state is active and *not* any of
	 * it's children, then you will use
	 * {@link ui.router.state.directive:ui-sref-active-eq ui-sref-active-eq}
	 *
	 * @example
	 * Given the following template:
	 * <pre>
	 * <ul>
	 *   <li ui-sref-active="active" class="item">
	 *     <a href ui-sref="app.user({user: 'bilbobaggins'})">@bilbobaggins</a>
	 *   </li>
	 * </ul>
	 * </pre>
	 *
	 *
	 * When the app state is "app.user" (or any children states), and contains the state parameter "user" with value "bilbobaggins",
	 * the resulting HTML will appear as (note the 'active' class):
	 * <pre>
	 * <ul>
	 *   <li ui-sref-active="active" class="item active">
	 *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
	 *   </li>
	 * </ul>
	 * </pre>
	 *
	 * The class name is interpolated **once** during the directives link time (any further changes to the
	 * interpolated value are ignored).
	 *
	 * Multiple classes may be specified in a space-separated format:
	 * <pre>
	 * <ul>
	 *   <li ui-sref-active='class1 class2 class3'>
	 *     <a ui-sref="app.user">link</a>
	 *   </li>
	 * </ul>
	 * </pre>
	 *
	 * It is also possible to pass ui-sref-active an expression that evaluates
	 * to an object hash, whose keys represent active class names and whose
	 * values represent the respective state names/globs.
	 * ui-sref-active will match if the current active state **includes** any of
	 * the specified state names/globs, even the abstract ones.
	 *
	 * @Example
	 * Given the following template, with "admin" being an abstract state:
	 * <pre>
	 * <div ui-sref-active="{'active': 'admin.*'}">
	 *   <a ui-sref-active="active" ui-sref="admin.roles">Roles</a>
	 * </div>
	 * </pre>
	 *
	 * When the current state is "admin.roles" the "active" class will be applied
	 * to both the <div> and <a> elements. It is important to note that the state
	 * names/globs passed to ui-sref-active shadow the state provided by ui-sref.
	 */

	/**
	 * @ngdoc directive
	 * @name ui.router.state.directive:ui-sref-active-eq
	 *
	 * @requires ui.router.state.$state
	 * @requires ui.router.state.$stateParams
	 * @requires $interpolate
	 *
	 * @restrict A
	 *
	 * @description
	 * The same as {@link ui.router.state.directive:ui-sref-active ui-sref-active} but will only activate
	 * when the exact target state used in the `ui-sref` is active; no child states.
	 *
	 */
	$StateRefActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];
	function $StateRefActiveDirective($state, $stateParams, $interpolate) {
		return {
			restrict: "A",
			controller: ['$scope', '$element', '$attrs', '$timeout', function ($scope, $element, $attrs, $timeout) {
				var states = [], activeClasses = {}, activeEqClass, uiSrefActive;

				// There probably isn't much point in $observing this
				// uiSrefActive and uiSrefActiveEq share the same directive object with some
				// slight difference in logic routing
				activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);

				try {
					uiSrefActive = $scope.$eval($attrs.uiSrefActive);
				} catch (e) {
					// Do nothing. uiSrefActive is not a valid expression.
					// Fall back to using $interpolate below
				}
				uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);
				if (isObject(uiSrefActive)) {
					forEach(uiSrefActive, function (stateOrName, activeClass) {
						if (isString(stateOrName)) {
							var ref = parseStateRef(stateOrName, $state.current.name);
							addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);
						}
					});
				}

				// Allow uiSref to communicate with uiSrefActive[Equals]
				this.$$addStateInfo = function (newState, newParams) {
					// we already got an explicit state provided by ui-sref-active, so we
					// shadow the one that comes from ui-sref
					if (isObject(uiSrefActive) && states.length > 0) {
						return;
					}
					var deregister = addState(newState, newParams, uiSrefActive);
					update();
					return deregister;
				};

				$scope.$on('$stateChangeSuccess', update);

				function addState(stateName, stateParams, activeClass) {
					var state = $state.get(stateName, stateContext($element));
					var stateHash = createStateHash(stateName, stateParams);

					var stateInfo = {
						state: state || { name: stateName },
						params: stateParams,
						hash: stateHash
					};

					states.push(stateInfo);
					activeClasses[stateHash] = activeClass;

					return function removeState() {
						var idx = states.indexOf(stateInfo);
						if (idx !== -1) states.splice(idx, 1);
					};
				}

				/**
				 * @param {string} state
				 * @param {Object|string} [params]
				 * @return {string}
				 */
				function createStateHash(state, params) {
					if (!isString(state)) {
						throw new Error('state should be a string');
					}
					if (isObject(params)) {
						return state + toJson(params);
					}
					params = $scope.$eval(params);
					if (isObject(params)) {
						return state + toJson(params);
					}
					return state;
				}

				// Update route state
				function update() {
					for (var i = 0; i < states.length; i++) {
						if (anyMatch(states[i].state, states[i].params)) {
							addClass($element, activeClasses[states[i].hash]);
						} else {
							removeClass($element, activeClasses[states[i].hash]);
						}

						if (exactMatch(states[i].state, states[i].params)) {
							addClass($element, activeEqClass);
						} else {
							removeClass($element, activeEqClass);
						}
					}
				}

				function addClass(el, className) { $timeout(function () { el.addClass(className); }); }
				function removeClass(el, className) { el.removeClass(className); }
				function anyMatch(state, params) { return $state.includes(state.name, params); }
				function exactMatch(state, params) { return $state.is(state.name, params); }

				update();
			}]
		};
	}

	angular.module('ui.router.state')
	  .directive('uiSref', $StateRefDirective)
	  .directive('uiSrefActive', $StateRefActiveDirective)
	  .directive('uiSrefActiveEq', $StateRefActiveDirective)
	  .directive('uiState', $StateRefDynamicDirective);

	/**
	 * @ngdoc filter
	 * @name ui.router.state.filter:isState
	 *
	 * @requires ui.router.state.$state
	 *
	 * @description
	 * Translates to {@link ui.router.state.$state#methods_is $state.is("stateName")}.
	 */
	$IsStateFilter.$inject = ['$state'];
	function $IsStateFilter($state) {
		var isFilter = function (state, params) {
			return $state.is(state, params);
		};
		isFilter.$stateful = true;
		return isFilter;
	}

	/**
	 * @ngdoc filter
	 * @name ui.router.state.filter:includedByState
	 *
	 * @requires ui.router.state.$state
	 *
	 * @description
	 * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.
	 */
	$IncludedByStateFilter.$inject = ['$state'];
	function $IncludedByStateFilter($state) {
		var includesFilter = function (state, params, options) {
			return $state.includes(state, params, options);
		};
		includesFilter.$stateful = true;
		return includesFilter;
	}

	angular.module('ui.router.state')
	  .filter('isState', $IsStateFilter)
	  .filter('includedByState', $IncludedByStateFilter);
})(window, window.angular);
/* global YT */
angular.module('youtube-embed', [])
.service('youtubeEmbedUtils', ['$window', '$rootScope', function ($window, $rootScope) {
	var Service = {}

	// adapted from http://stackoverflow.com/a/5831191/1614967
	var youtubeRegexp = /https?:\/\/(?:[0-9A-Z-]+\.)?(?:youtu\.be\/|youtube(?:-nocookie)?\.com\S*[^\w\s-])([\w-]{11})(?=[^\w-]|$)(?![?=&+%\w.-]*(?:['"][^<>]*>|<\/a>))[?=&+%\w.-]*/ig;
	var timeRegexp = /t=(\d+)[ms]?(\d+)?s?/;

	function contains(str, substr) {
		return (str.indexOf(substr) > -1);
	}

	Service.getIdFromURL = function getIdFromURL(url) {
		var id = url.replace(youtubeRegexp, '$1');

		if (contains(id, ';')) {
			var pieces = id.split(';');

			if (contains(pieces[1], '%')) {
				// links like this:
				// "http://www.youtube.com/attribution_link?a=pxa6goHqzaA&amp;u=%2Fwatch%3Fv%3DdPdgx30w9sU%26feature%3Dshare"
				// have the real query string URI encoded behind a ';'.
				// at this point, `id is 'pxa6goHqzaA;u=%2Fwatch%3Fv%3DdPdgx30w9sU%26feature%3Dshare'
				var uriComponent = decodeURIComponent(pieces[1]);
				id = ('http://youtube.com' + uriComponent)
                        .replace(youtubeRegexp, '$1');
			} else {
				// https://www.youtube.com/watch?v=VbNF9X1waSc&amp;feature=youtu.be
				// `id` looks like 'VbNF9X1waSc;feature=youtu.be' currently.
				// strip the ';feature=youtu.be'
				id = pieces[0];
			}
		} else if (contains(id, '#')) {
			// id might look like '93LvTKF_jW0#t=1'
			// and we want '93LvTKF_jW0'
			id = id.split('#')[0];
		}

		return id;
	};

	Service.getTimeFromURL = function getTimeFromURL(url) {
		url = url || '';

		// t=4m20s
		// returns ['t=4m20s', '4', '20']
		// t=46s
		// returns ['t=46s', '46']
		// t=46
		// returns ['t=46', '46']
		var times = url.match(timeRegexp);

		if (!times) {
			// zero seconds
			return 0;
		}

		// assume the first
		var full = times[0],
            minutes = times[1],
            seconds = times[2];

		// t=4m20s
		if (typeof seconds !== 'undefined') {
			seconds = parseInt(seconds, 10);
			minutes = parseInt(minutes, 10);

			// t=4m
		} else if (contains(full, 'm')) {
			minutes = parseInt(minutes, 10);
			seconds = 0;

			// t=4s
			// t=4
		} else {
			seconds = parseInt(minutes, 10);
			minutes = 0;
		}

		// in seconds
		return seconds + (minutes * 60);
	};

	Service.ready = false;

	function applyServiceIsReady() {
		$rootScope.$apply(function () {
			Service.ready = true;
		});
	};

	// If the library isn't here at all,
	if (typeof YT === "undefined") {
		// ...grab on to global callback, in case it's eventually loaded
		$window.onYouTubeIframeAPIReady = applyServiceIsReady;
		console.log('Unable to find YouTube iframe library on this page.')
	} else if (YT.loaded) {
		Service.ready = true;
	} else {
		YT.ready(applyServiceIsReady);
	}

	return Service;
}])
.directive('youtubeVideo', ['$window', 'youtubeEmbedUtils', function ($window, youtubeEmbedUtils) {
	var uniqId = 1;

	// from YT.PlayerState
	var stateNames = {
		'-1': 'unstarted',
		0: 'ended',
		1: 'playing',
		2: 'paused',
		3: 'buffering',
		5: 'queued'
	};

	var eventPrefix = 'youtube.player.';

	$window.YTConfig = {
		host: 'https://www.youtube.com'
	};

	return {
		restrict: 'EA',
		scope: {
			videoId: '=?',
			videoUrl: '=?',
			player: '=?',
			playerVars: '=?',
			playerHeight: '=?',
			playerWidth: '=?'
		},
		link: function (scope, element, attrs) {

			if (document.body.clientWidth < 768) {
				return;
			};


			// allows us to $watch `ready`
			scope.utils = youtubeEmbedUtils;

			// player-id attr > id attr > directive-generated ID
			var playerId = attrs.playerId || element[0].id || 'unique-youtube-embed-id-' + uniqId++;
			element[0].id = playerId;

			// Attach to element
			scope.playerHeight = scope.playerHeight || 390;
			scope.playerWidth = scope.playerWidth || 640;
			scope.playerVars = scope.playerVars || {};

			// YT calls callbacks outside of digest cycle
			function applyBroadcast() {
				var args = Array.prototype.slice.call(arguments);
				scope.$apply(function () {
					scope.$emit.apply(scope, args);
				});
			}

			function onPlayerStateChange(event) {
				var state = stateNames[event.data];
				if (typeof state !== 'undefined') {
					applyBroadcast(eventPrefix + state, scope.player, event);
				}
				scope.$apply(function () {
					scope.player.currentState = state;
				});
			}

			function onPlayerReady(event) {
				applyBroadcast(eventPrefix + 'ready', scope.player, event);
			}

			function onPlayerError(event) {
				applyBroadcast(eventPrefix + 'error', scope.player, event);
			}

			function createPlayer() {
				var playerVars = angular.copy(scope.playerVars);
				playerVars.start = playerVars.start || scope.urlStartTime;
				var player = new YT.Player(playerId, {
					height: scope.playerHeight,
					width: scope.playerWidth,
					videoId: scope.videoId,
					playerVars: playerVars,
					events: {
						onReady: onPlayerReady,
						onStateChange: onPlayerStateChange,
						onError: onPlayerError
					}
				});

				player.id = playerId;
				return player;
			}

			function loadPlayer() {
				if (scope.videoId || scope.playerVars.list) {
					if (scope.player && typeof scope.player.destroy === 'function') {
						scope.player.destroy();
					}

					scope.player = createPlayer();
				}
			};

			var stopWatchingReady = scope.$watch(
                function () {
                	return scope.utils.ready
                        // Wait until one of them is defined...
                        && (typeof scope.videoUrl !== 'undefined'
                        || typeof scope.videoId !== 'undefined'
                        || typeof scope.playerVars.list !== 'undefined');
                },
                function (ready) {
                	if (ready) {
                		stopWatchingReady();

                		// URL takes first priority
                		if (typeof scope.videoUrl !== 'undefined') {
                			scope.$watch('videoUrl', function (url) {
                				scope.videoId = scope.utils.getIdFromURL(url);
                				scope.urlStartTime = scope.utils.getTimeFromURL(url);

                				loadPlayer();
                			});

                			// then, a video ID
                		} else if (typeof scope.videoId !== 'undefined') {
                			scope.$watch('videoId', function () {
                				scope.urlStartTime = null;
                				loadPlayer();
                			});

                			// finally, a list
                		} else {
                			scope.$watch('playerVars.list', function () {
                				scope.urlStartTime = null;
                				loadPlayer();
                			});
                		}
                	}
                });

			scope.$watchCollection(['playerHeight', 'playerWidth'], function () {
				if (scope.player) {
					scope.player.setSize(scope.playerWidth, scope.playerHeight);
				}
			});

			scope.$on('$destroy', function () {
				scope.player && scope.player.destroy();
			});
		}
	};
}]);
/*!
 * angular-slick-carousel
 * DevMark <hc.devmark@gmail.com>
 * https://github.com/devmark/angular-slick-carousel
 * Version: 3.1.7 - 2016-08-04T06:17:55.528Z
 * License: MIT
 */


'use strict';

angular
  .module('slickCarousel', [])
  //global config
  .constant('slickCarouselConfig', {
  	method: {},
  	event: {}
  })
  .directive('slick', [
    '$timeout', 'slickCarouselConfig', function ($timeout, slickCarouselConfig) {
    	var slickMethodList, slickEventList;
    	slickMethodList = ['slickGoTo', 'slickNext', 'slickPrev', 'slickPause', 'slickPlay', 'slickAdd', 'slickRemove', 'slickFilter', 'slickUnfilter', 'unslick'];
    	slickEventList = ['afterChange', 'beforeChange', 'breakpoint', 'destroy', 'edge', 'init', 'reInit', 'setPosition', 'swipe', 'lazyLoaded', 'lazyLoadError'];

    	return {
    		scope: {
    			settings: '=',
    			enabled: '@',
    			accessibility: '@',
    			adaptiveHeight: '@',
    			autoplay: '@',
    			autoplayspeed: '@',
    			arrows: '@',
    			asNavFor: '@',
    			appendArrows: '@',
    			prevArrow: '@',
    			nextArrow: '@',
    			centerMode: '@',
    			centerPadding: '@',
    			cssEase: '@',
    			customPaging: '&',
    			dots: '@',
    			draggable: '@',
    			fade: '@',
    			focusOnSelect: '@',
    			easing: '@',
    			edgeFriction: '@',
    			infinite: '@',
    			initialSlide: '@',
    			lazyLoad: '@',
    			mobileFirst: '@',
    			pauseOnHover: '@',
    			pauseOnDotsHover: '@',
    			respondTo: '@',
    			responsive: '=?',
    			rows: '@',
    			slide: '@',
    			slidesPerRow: '@',
    			slidesToShow: '@',
    			slidesToScroll: '@',
    			speed: '@',
    			swipe: '@',
    			swipeToSlide: '@',
    			touchMove: '@',
    			touchThreshold: '@',
    			useCSS: '@',
    			variableWidth: '@',
    			vertical: '@',
    			verticalSwiping: '@',
    			rtl: '@'
    		},
    		restrict: 'AE',
    		link: function (scope, element, attr) {
    			//hide slider
    			angular.element(element).css('display', 'none');

    			var options, initOptions, destroy, init, destroyAndInit, currentIndex;

    			initOptions = function () {
    				options = angular.extend(angular.copy(slickCarouselConfig), {
    					enabled: scope.enabled !== 'false',
    					accessibility: scope.accessibility !== 'false',
    					adaptiveHeight: scope.adaptiveHeight === 'true',
    					autoplay: scope.autoplay === 'true',
    					autoplaySpeed: scope.autoplayspeed != null ? parseInt(scope.autoplayspeed, 10) : 3000,
    					arrows: scope.arrows !== 'false',
    					asNavFor: scope.asNavFor ? scope.asNavFor : void 0,
    					appendArrows: scope.appendArrows ? angular.element(scope.appendArrows) : angular.element(element),
    					prevArrow: scope.prevArrow ? angular.element(scope.prevArrow) : void 0,
    					nextArrow: scope.nextArrow ? angular.element(scope.nextArrow) : void 0,
    					centerMode: scope.centerMode === 'true',
    					centerPadding: scope.centerPadding || '50px',
    					cssEase: scope.cssEase || 'ease',
    					customPaging: attr.customPaging ? function (slick, index) {
    						return scope.customPaging({ slick: slick, index: index });
    					} : void 0,
    					dots: scope.dots === 'true',
    					draggable: scope.draggable !== 'false',
    					fade: scope.fade === 'true',
    					focusOnSelect: scope.focusOnSelect === 'true',
    					easing: scope.easing || 'linear',
    					edgeFriction: scope.edgeFriction || 0.15,
    					infinite: scope.infinite !== 'false',
    					initialSlide: parseInt(scope.initialSlide) || 0,
    					lazyLoad: scope.lazyLoad || 'ondemand',
    					mobileFirst: scope.mobileFirst === 'true',
    					pauseOnHover: scope.pauseOnHover !== 'false',
    					pauseOnDotsHover: scope.pauseOnDotsHover === "true",
    					respondTo: scope.respondTo != null ? scope.respondTo : 'window',
    					responsive: scope.responsive || void 0,
    					rows: scope.rows != null ? parseInt(scope.rows, 10) : 1,
    					slide: scope.slide || '',
    					slidesPerRow: scope.slidesPerRow != null ? parseInt(scope.slidesPerRow, 10) : 1,
    					slidesToShow: scope.slidesToShow != null ? parseInt(scope.slidesToShow, 10) : 1,
    					slidesToScroll: scope.slidesToScroll != null ? parseInt(scope.slidesToScroll, 10) : 1,
    					speed: scope.speed != null ? parseInt(scope.speed, 10) : 300,
    					swipe: scope.swipe !== 'false',
    					swipeToSlide: scope.swipeToSlide === 'true',
    					touchMove: scope.touchMove !== 'false',
    					touchThreshold: scope.touchThreshold ? parseInt(scope.touchThreshold, 10) : 5,
    					useCSS: scope.useCSS !== 'false',
    					variableWidth: scope.variableWidth === 'true',
    					vertical: scope.vertical === 'true',
    					verticalSwiping: scope.verticalSwiping === 'true',
    					rtl: scope.rtl === 'true'
    				}, scope.settings);

    			};

    			destroy = function () {
    				var slickness = angular.element(element);
    				if (slickness.hasClass('slick-initialized')) {
    					slickness.remove('slick-list');
    					slickness.slick('unslick');
    				}

    				return slickness;
    			};

    			init = function () {
    				initOptions();

    				var slickness = angular.element(element);

    				if (angular.element(element).hasClass('slick-initialized')) {
    					if (options.enabled) {
    						return slickness.slick('getSlick');
    					} else {
    						destroy();
    					}
    				} else {
    					if (!options.enabled) {
    						return;
    					}
    					// Event
    					slickness.on('init', function (event, slick) {
    						if (typeof options.event.init !== 'undefined') {
    							options.event.init(event, slick);
    						}
    						if (typeof currentIndex !== 'undefined') {
    							return slick.slideHandler(currentIndex);
    						}
    					});

    					$timeout(function () {
    						angular.element(element).css('display', 'block');
    						slickness.not('.slick-initialized').slick(options);
    					});
    				}

    				scope.internalControl = options.method || {};

    				// Method
    				slickMethodList.forEach(function (value) {
    					scope.internalControl[value] = function () {
    						var args;
    						args = Array.prototype.slice.call(arguments);
    						args.unshift(value);
    						slickness.slick.apply(element, args);
    					};
    				});

    				// Event
    				slickness.on('afterChange', function (event, slick, currentSlide) {
    					currentIndex = currentSlide;
    					if (typeof options.event.afterChange !== 'undefined') {
    						$timeout(function () {
    							scope.$apply(function () {
    								options.event.afterChange(event, slick, currentSlide);
    							});
    						});
    					}
    				});

    				slickness.on('beforeChange', function (event, slick, currentSlide, nextSlide) {
    					if (typeof options.event.beforeChange !== 'undefined') {
    						$timeout(function () {
    							$timeout(function () {
    								scope.$apply(function () {
    									options.event.beforeChange(event, slick, currentSlide, nextSlide);
    								});
    							});
    						});
    					}
    				});

    				slickness.on('reInit', function (event, slick) {
    					if (typeof options.event.reInit !== 'undefined') {
    						$timeout(function () {
    							scope.$apply(function () {
    								options.event.reInit(event, slick);
    							});
    						});
    					}
    				});

    				if (typeof options.event.breakpoint !== 'undefined') {
    					slickness.on('breakpoint', function (event, slick, breakpoint) {
    						$timeout(function () {
    							scope.$apply(function () {
    								options.event.breakpoint(event, slick, breakpoint);
    							});
    						});
    					});
    				}
    				if (typeof options.event.destroy !== 'undefined') {
    					slickness.on('destroy', function (event, slick) {
    						$timeout(function () {
    							scope.$apply(function () {
    								options.event.destroy(event, slick);
    							});
    						});
    					});
    				}
    				if (typeof options.event.edge !== 'undefined') {
    					slickness.on('edge', function (event, slick, direction) {
    						$timeout(function () {
    							scope.$apply(function () {
    								options.event.edge(event, slick, direction);
    							});
    						});
    					});
    				}

    				if (typeof options.event.setPosition !== 'undefined') {
    					slickness.on('setPosition', function (event, slick) {
    						$timeout(function () {
    							scope.$apply(function () {
    								options.event.setPosition(event, slick);
    							});
    						});
    					});
    				}
    				if (typeof options.event.swipe !== 'undefined') {
    					slickness.on('swipe', function (event, slick, direction) {
    						$timeout(function () {
    							scope.$apply(function () {
    								options.event.swipe(event, slick, direction);
    							});
    						});
    					});
    				}
    				if (typeof options.event.lazyLoaded !== 'undefined') {
    					slickness.on('lazyLoaded', function (event, slick, image, imageSource) {
    						$timeout(function () {
    							scope.$apply(function () {
    								options.event.lazyLoaded(event, slick, image, imageSource);
    							});
    						});
    					});
    				}
    				if (typeof options.event.lazyLoadError !== 'undefined') {
    					slickness.on('lazyLoadError', function (event, slick, image, imageSource) {
    						$timeout(function () {
    							scope.$apply(function () {
    								options.event.lazyLoadError(event, slick, image, imageSource);
    							});
    						});
    					});
    				}
    			};

    			destroyAndInit = function () {
    				destroy();
    				init();
    			};

    			element.one('$destroy', function () {
    				destroy();
    			});

    			return scope.$watch('settings', function (newVal, oldVal) {
    				if (newVal !== null) {
    					return destroyAndInit();
    				}
    			}, true);

    		}
    	};
    }
  ]);
/*!
 * caption.js | easily and semantically add captions to your images
 * http://captionjs.com
 *
 * Copyright 2013-2014, Eric Magnuson
 * Released under the MIT license
 * https://github.com/jquery/jquery/blob/master/MIT-LICENSE.txt
 *
 * v0.9.8
 * Date: 2014-10-13
 */
(function ($, window, undefined) {
	$.fn.captionjs = function (opts) {

		// Default values for options
		var defaults = {
			'class_name': 'captionjs', // Class name for each <figure>
			'schema': true,        // Use schema.org markup (i.e., itemtype, itemprop)
			'mode': 'default',   // default | stacked | animated | hide
			'debug_mode': false,       // Output debug info to the JS console
			'force_dimensions': true,        // Force the dimensions in case they cannot be detected (e.g., image is not yet painted to viewport)
			'is_responsive': false,       // Ensure the figure and image change size when in responsive layout. Requires a container to control responsiveness!
			'inherit_styles': false        // Have the caption.js container inherit box-model properties from the original image
		};

		// Extend the options from defaults with user's options
		var options = $.extend(defaults, opts || {});

		// Function to copy styles
		var transferStyles = function (property, reset_val, $origin, $target) {
			if ($origin.jquery && $target.jquery) // Check that they are jQuery objects
			{
				$origin.css(property, $target.css(property));
				$target.css(property, reset_val);
			}
		};

		// jQuery chainability -- do the magic below
		return this.each(function () {

			if (options.debug_mode) console.log('caption.js | Starting.');

			// Form basic structures and assign vars
			var $this = $(this),  // The image
				$caption = $this.data('caption') ? $this.data('caption') : $this.attr('alt'),
				$figure = $this.wrap('<figure class="' + options.class_name + ' ' + options.mode + '"/>').after('<figcaption/>').parent(),
				$figcaption = $this.next('figcaption').html($caption),
				$link = $this.data('link') ? $figcaption.wrapInner('<a href="' + $this.data('link') + '"/>').children('a').css('padding', '0').css('margin', '0') : null,
				target_width,
				target_height;

			// If no caption is supplied, just remove the figcaption.
			if ($caption === '') $figcaption.remove();

			if (options.debug_mode) console.log('caption.js | Caption: ' + $caption);

			// Determine the appropriate dimensions for the figure, our top-most container for caption.js.
			if (options.force_dimensions) {
				if (options.debug_mode) console.log('caption.js | Forcing dimensions with a clone.');

				// Create a clone outside of the viewport to detect and then set the dimensions.
				var $clone = $figure.clone().css({
					'position': 'absolute',
					'left': '-9999px'
				}).appendTo('body');

				target_width = $('img', $clone).outerWidth();
				target_height = $('figcaption', $clone).css('width', target_width).css('clear', 'both').outerHeight(); // Make sure width (and thus line wrapping) is enforced so that the height is correct

				$clone.remove();
			}
			else {
				target_width = $this.outerWidth();
				target_height = $figcaption.outerHeight();
			}

			// If responsive, set widths across the board to 100%. We will rely on a
			// responsive container to constrain the size of the image.
			if (options.is_responsive) {
				target_width = '100%';
				$this.width(target_width);
			}

			// Copy styles if need be
			if (options.inherit_styles) {
				if ($this.css('display') == 'inline')
					$figure.css('display', 'inline-block');
				else
					transferStyles('display', 'block', $figure, $this);

				if ($this.css('position') == 'static')
					$figure.css('position', 'relative');
				else
					transferStyles('position', 'relative', $figure, $this);

				transferStyles('clear', 'both', $figure, $this);
				transferStyles('float', 'none', $figure, $this);
				transferStyles('margin', '0', $figure, $this);
				// transferStyles('padding', '0', $figure, $this); // Finish this
				$this.css('padding', '0');
				transferStyles('left', 'auto', $figure, $this);
				transferStyles('right', 'auto', $figure, $this);
				transferStyles('top', 'auto', $figure, $this);
				transferStyles('bottom', 'auto', $figure, $this);
				transferStyles('z-index', $this.css('z-index'), $figure, $this);
			}

			// Set the width of the figure.
			$figure.width(target_width);

			// Schema markup if enabled
			if (options.schema) {
				$figure.attr({
					'itemscope': 'itemscope',
					'itemtype': 'http://schema.org/Photograph'
				});
				$figcaption.attr('itemprop', 'name');
				$this.attr('itemprop', 'image');
			}

			// Stacked mode
			if (options.mode === 'stacked') {
				$figcaption.css({
					'margin-bottom': '0',
					'bottom': '0',
				});
			}

			// Animated mode
			if (options.mode === 'animated') {
				$figcaption.css({
					'margin-bottom': '0',
					'bottom': -target_height,
				});
			}

			// Hide mode
			if (options.mode === 'hide') {
				$figcaption.css({
					'margin-bottom': target_height,
					'bottom': -target_height,
				});
			}

		});
	};
})(jQuery, window);

/*! Magnific Popup - v1.1.0 - 2016-02-20
* http://dimsemenov.com/plugins/magnific-popup/
* Copyright (c) 2016 Dmitry Semenov; */
;(function (factory) { 
if (typeof define === 'function' && define.amd) { 
 // AMD. Register as an anonymous module. 
 define(['jquery'], factory); 
 } else if (typeof exports === 'object') { 
 // Node/CommonJS 
 factory(require('jquery')); 
 } else { 
 // Browser globals 
 factory(window.jQuery || window.Zepto); 
 } 
 }(function($) { 

/*>>core*/
/**
 * 
 * Magnific Popup Core JS file
 * 
 */


/**
 * Private static constants
 */
var CLOSE_EVENT = 'Close',
	BEFORE_CLOSE_EVENT = 'BeforeClose',
	AFTER_CLOSE_EVENT = 'AfterClose',
	BEFORE_APPEND_EVENT = 'BeforeAppend',
	MARKUP_PARSE_EVENT = 'MarkupParse',
	OPEN_EVENT = 'Open',
	CHANGE_EVENT = 'Change',
	NS = 'mfp',
	EVENT_NS = '.' + NS,
	READY_CLASS = 'mfp-ready',
	REMOVING_CLASS = 'mfp-removing',
	PREVENT_CLOSE_CLASS = 'mfp-prevent-close';


/**
 * Private vars 
 */
/*jshint -W079 */
var mfp, // As we have only one instance of MagnificPopup object, we define it locally to not to use 'this'
	MagnificPopup = function(){},
	_isJQ = !!(window.jQuery),
	_prevStatus,
	_window = $(window),
	_document,
	_prevContentType,
	_wrapClasses,
	_currPopupType;


/**
 * Private functions
 */
var _mfpOn = function(name, f) {
		mfp.ev.on(NS + name + EVENT_NS, f);
	},
	_getEl = function(className, appendTo, html, raw) {
		var el = document.createElement('div');
		el.className = 'mfp-'+className;
		if(html) {
			el.innerHTML = html;
		}
		if(!raw) {
			el = $(el);
			if(appendTo) {
				el.appendTo(appendTo);
			}
		} else if(appendTo) {
			appendTo.appendChild(el);
		}
		return el;
	},
	_mfpTrigger = function(e, data) {
		mfp.ev.triggerHandler(NS + e, data);

		if(mfp.st.callbacks) {
			// converts "mfpEventName" to "eventName" callback and triggers it if it's present
			e = e.charAt(0).toLowerCase() + e.slice(1);
			if(mfp.st.callbacks[e]) {
				mfp.st.callbacks[e].apply(mfp, $.isArray(data) ? data : [data]);
			}
		}
	},
	_getCloseBtn = function(type) {
		if(type !== _currPopupType || !mfp.currTemplate.closeBtn) {
			mfp.currTemplate.closeBtn = $( mfp.st.closeMarkup.replace('%title%', mfp.st.tClose ) );
			_currPopupType = type;
		}
		return mfp.currTemplate.closeBtn;
	},
	// Initialize Magnific Popup only when called at least once
	_checkInstance = function() {
		if(!$.magnificPopup.instance) {
			/*jshint -W020 */
			mfp = new MagnificPopup();
			mfp.init();
			$.magnificPopup.instance = mfp;
		}
	},
	// CSS transition detection, http://stackoverflow.com/questions/7264899/detect-css-transitions-using-javascript-and-without-modernizr
	supportsTransitions = function() {
		var s = document.createElement('p').style, // 's' for style. better to create an element if body yet to exist
			v = ['ms','O','Moz','Webkit']; // 'v' for vendor

		if( s['transition'] !== undefined ) {
			return true; 
		}
			
		while( v.length ) {
			if( v.pop() + 'Transition' in s ) {
				return true;
			}
		}
				
		return false;
	};



/**
 * Public functions
 */
MagnificPopup.prototype = {

	constructor: MagnificPopup,

	/**
	 * Initializes Magnific Popup plugin. 
	 * This function is triggered only once when $.fn.magnificPopup or $.magnificPopup is executed
	 */
	init: function() {
		var appVersion = navigator.appVersion;
		mfp.isLowIE = mfp.isIE8 = document.all && !document.addEventListener;
		mfp.isAndroid = (/android/gi).test(appVersion);
		mfp.isIOS = (/iphone|ipad|ipod/gi).test(appVersion);
		mfp.supportsTransition = supportsTransitions();

		// We disable fixed positioned lightbox on devices that don't handle it nicely.
		// If you know a better way of detecting this - let me know.
		mfp.probablyMobile = (mfp.isAndroid || mfp.isIOS || /(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent) );
		_document = $(document);

		mfp.popupsCache = {};
	},

	/**
	 * Opens popup
	 * @param  data [description]
	 */
	open: function(data) {

		var i;

		if(data.isObj === false) { 
			// convert jQuery collection to array to avoid conflicts later
			mfp.items = data.items.toArray();

			mfp.index = 0;
			var items = data.items,
				item;
			for(i = 0; i < items.length; i++) {
				item = items[i];
				if(item.parsed) {
					item = item.el[0];
				}
				if(item === data.el[0]) {
					mfp.index = i;
					break;
				}
			}
		} else {
			mfp.items = $.isArray(data.items) ? data.items : [data.items];
			mfp.index = data.index || 0;
		}

		// if popup is already opened - we just update the content
		if(mfp.isOpen) {
			mfp.updateItemHTML();
			return;
		}
		
		mfp.types = []; 
		_wrapClasses = '';
		if(data.mainEl && data.mainEl.length) {
			mfp.ev = data.mainEl.eq(0);
		} else {
			mfp.ev = _document;
		}

		if(data.key) {
			if(!mfp.popupsCache[data.key]) {
				mfp.popupsCache[data.key] = {};
			}
			mfp.currTemplate = mfp.popupsCache[data.key];
		} else {
			mfp.currTemplate = {};
		}



		mfp.st = $.extend(true, {}, $.magnificPopup.defaults, data ); 
		mfp.fixedContentPos = mfp.st.fixedContentPos === 'auto' ? !mfp.probablyMobile : mfp.st.fixedContentPos;

		if(mfp.st.modal) {
			mfp.st.closeOnContentClick = false;
			mfp.st.closeOnBgClick = false;
			mfp.st.showCloseBtn = false;
			mfp.st.enableEscapeKey = false;
		}
		

		// Building markup
		// main containers are created only once
		if(!mfp.bgOverlay) {

			// Dark overlay
			mfp.bgOverlay = _getEl('bg').on('click'+EVENT_NS, function() {
				mfp.close();
			});

			mfp.wrap = _getEl('wrap').attr('tabindex', -1).on('click'+EVENT_NS, function(e) {
				if(mfp._checkIfClose(e.target)) {
					mfp.close();
				}
			});

			mfp.container = _getEl('container', mfp.wrap);
		}

		mfp.contentContainer = _getEl('content');
		if(mfp.st.preloader) {
			mfp.preloader = _getEl('preloader', mfp.container, mfp.st.tLoading);
		}


		// Initializing modules
		var modules = $.magnificPopup.modules;
		for(i = 0; i < modules.length; i++) {
			var n = modules[i];
			n = n.charAt(0).toUpperCase() + n.slice(1);
			mfp['init'+n].call(mfp);
		}
		_mfpTrigger('BeforeOpen');


		if(mfp.st.showCloseBtn) {
			// Close button
			if(!mfp.st.closeBtnInside) {
				mfp.wrap.append( _getCloseBtn() );
			} else {
				_mfpOn(MARKUP_PARSE_EVENT, function(e, template, values, item) {
					values.close_replaceWith = _getCloseBtn(item.type);
				});
				_wrapClasses += ' mfp-close-btn-in';
			}
		}

		if(mfp.st.alignTop) {
			_wrapClasses += ' mfp-align-top';
		}

	

		if(mfp.fixedContentPos) {
			mfp.wrap.css({
				overflow: mfp.st.overflowY,
				overflowX: 'hidden',
				overflowY: mfp.st.overflowY
			});
		} else {
			mfp.wrap.css({ 
				top: _window.scrollTop(),
				position: 'absolute'
			});
		}
		if( mfp.st.fixedBgPos === false || (mfp.st.fixedBgPos === 'auto' && !mfp.fixedContentPos) ) {
			mfp.bgOverlay.css({
				height: _document.height(),
				position: 'absolute'
			});
		}

		

		if(mfp.st.enableEscapeKey) {
			// Close on ESC key
			_document.on('keyup' + EVENT_NS, function(e) {
				if(e.keyCode === 27) {
					mfp.close();
				}
			});
		}

		_window.on('resize' + EVENT_NS, function() {
			mfp.updateSize();
		});


		if(!mfp.st.closeOnContentClick) {
			_wrapClasses += ' mfp-auto-cursor';
		}
		
		if(_wrapClasses)
			mfp.wrap.addClass(_wrapClasses);


		// this triggers recalculation of layout, so we get it once to not to trigger twice
		var windowHeight = mfp.wH = _window.height();

		
		var windowStyles = {};

		if( mfp.fixedContentPos ) {
            if(mfp._hasScrollBar(windowHeight)){
                var s = mfp._getScrollbarSize();
                if(s) {
                    windowStyles.marginRight = s;
                }
            }
        }

		if(mfp.fixedContentPos) {
			if(!mfp.isIE7) {
				windowStyles.overflow = 'hidden';
			} else {
				// ie7 double-scroll bug
				$('body, html').css('overflow', 'hidden');
			}
		}

		
		
		var classesToadd = mfp.st.mainClass;
		if(mfp.isIE7) {
			classesToadd += ' mfp-ie7';
		}
		if(classesToadd) {
			mfp._addClassToMFP( classesToadd );
		}

		// add content
		mfp.updateItemHTML();

		_mfpTrigger('BuildControls');

		// remove scrollbar, add margin e.t.c
		$('html').css(windowStyles);
		
		// add everything to DOM
		mfp.bgOverlay.add(mfp.wrap).prependTo( mfp.st.prependTo || $(document.body) );

		// Save last focused element
		mfp._lastFocusedEl = document.activeElement;
		
		// Wait for next cycle to allow CSS transition
		setTimeout(function() {
			
			if(mfp.content) {
				mfp._addClassToMFP(READY_CLASS);
				mfp._setFocus();
			} else {
				// if content is not defined (not loaded e.t.c) we add class only for BG
				mfp.bgOverlay.addClass(READY_CLASS);
			}
			
			// Trap the focus in popup
			_document.on('focusin' + EVENT_NS, mfp._onFocusIn);

		}, 16);

		mfp.isOpen = true;
		mfp.updateSize(windowHeight);
		_mfpTrigger(OPEN_EVENT);

		return data;
	},

	/**
	 * Closes the popup
	 */
	close: function() {
		if(!mfp.isOpen) return;
		_mfpTrigger(BEFORE_CLOSE_EVENT);

		mfp.isOpen = false;
		// for CSS3 animation
		if(mfp.st.removalDelay && !mfp.isLowIE && mfp.supportsTransition )  {
			mfp._addClassToMFP(REMOVING_CLASS);
			setTimeout(function() {
				mfp._close();
			}, mfp.st.removalDelay);
		} else {
			mfp._close();
		}
	},

	/**
	 * Helper for close() function
	 */
	_close: function() {
		_mfpTrigger(CLOSE_EVENT);

		var classesToRemove = REMOVING_CLASS + ' ' + READY_CLASS + ' ';

		mfp.bgOverlay.detach();
		mfp.wrap.detach();
		mfp.container.empty();

		if(mfp.st.mainClass) {
			classesToRemove += mfp.st.mainClass + ' ';
		}

		mfp._removeClassFromMFP(classesToRemove);

		if(mfp.fixedContentPos) {
			var windowStyles = {marginRight: ''};
			if(mfp.isIE7) {
				$('body, html').css('overflow', '');
			} else {
				windowStyles.overflow = '';
			}
			$('html').css(windowStyles);
		}
		
		_document.off('keyup' + EVENT_NS + ' focusin' + EVENT_NS);
		mfp.ev.off(EVENT_NS);

		// clean up DOM elements that aren't removed
		mfp.wrap.attr('class', 'mfp-wrap').removeAttr('style');
		mfp.bgOverlay.attr('class', 'mfp-bg');
		mfp.container.attr('class', 'mfp-container');

		// remove close button from target element
		if(mfp.st.showCloseBtn &&
		(!mfp.st.closeBtnInside || mfp.currTemplate[mfp.currItem.type] === true)) {
			if(mfp.currTemplate.closeBtn)
				mfp.currTemplate.closeBtn.detach();
		}


		if(mfp.st.autoFocusLast && mfp._lastFocusedEl) {
			$(mfp._lastFocusedEl).focus(); // put tab focus back
		}
		mfp.currItem = null;	
		mfp.content = null;
		mfp.currTemplate = null;
		mfp.prevHeight = 0;

		_mfpTrigger(AFTER_CLOSE_EVENT);
	},
	
	updateSize: function(winHeight) {

		if(mfp.isIOS) {
			// fixes iOS nav bars https://github.com/dimsemenov/Magnific-Popup/issues/2
			var zoomLevel = document.documentElement.clientWidth / window.innerWidth;
			var height = window.innerHeight * zoomLevel;
			mfp.wrap.css('height', height);
			mfp.wH = height;
		} else {
			mfp.wH = winHeight || _window.height();
		}
		// Fixes #84: popup incorrectly positioned with position:relative on body
		if(!mfp.fixedContentPos) {
			mfp.wrap.css('height', mfp.wH);
		}

		_mfpTrigger('Resize');

	},

	/**
	 * Set content of popup based on current index
	 */
	updateItemHTML: function() {
		var item = mfp.items[mfp.index];

		// Detach and perform modifications
		mfp.contentContainer.detach();

		if(mfp.content)
			mfp.content.detach();

		if(!item.parsed) {
			item = mfp.parseEl( mfp.index );
		}

		var type = item.type;

		_mfpTrigger('BeforeChange', [mfp.currItem ? mfp.currItem.type : '', type]);
		// BeforeChange event works like so:
		// _mfpOn('BeforeChange', function(e, prevType, newType) { });

		mfp.currItem = item;

		if(!mfp.currTemplate[type]) {
			var markup = mfp.st[type] ? mfp.st[type].markup : false;

			// allows to modify markup
			_mfpTrigger('FirstMarkupParse', markup);

			if(markup) {
				mfp.currTemplate[type] = $(markup);
			} else {
				// if there is no markup found we just define that template is parsed
				mfp.currTemplate[type] = true;
			}
		}

		if(_prevContentType && _prevContentType !== item.type) {
			mfp.container.removeClass('mfp-'+_prevContentType+'-holder');
		}

		var newContent = mfp['get' + type.charAt(0).toUpperCase() + type.slice(1)](item, mfp.currTemplate[type]);
		mfp.appendContent(newContent, type);

		item.preloaded = true;

		_mfpTrigger(CHANGE_EVENT, item);
		_prevContentType = item.type;

		// Append container back after its content changed
		mfp.container.prepend(mfp.contentContainer);

		_mfpTrigger('AfterChange');
	},


	/**
	 * Set HTML content of popup
	 */
	appendContent: function(newContent, type) {
		mfp.content = newContent;

		if(newContent) {
			if(mfp.st.showCloseBtn && mfp.st.closeBtnInside &&
				mfp.currTemplate[type] === true) {
				// if there is no markup, we just append close button element inside
				if(!mfp.content.find('.mfp-close').length) {
					mfp.content.append(_getCloseBtn());
				}
			} else {
				mfp.content = newContent;
			}
		} else {
			mfp.content = '';
		}

		_mfpTrigger(BEFORE_APPEND_EVENT);
		mfp.container.addClass('mfp-'+type+'-holder');

		mfp.contentContainer.append(mfp.content);
	},


	/**
	 * Creates Magnific Popup data object based on given data
	 * @param  {int} index Index of item to parse
	 */
	parseEl: function(index) {
		var item = mfp.items[index],
			type;

		if(item.tagName) {
			item = { el: $(item) };
		} else {
			type = item.type;
			item = { data: item, src: item.src };
		}

		if(item.el) {
			var types = mfp.types;

			// check for 'mfp-TYPE' class
			for(var i = 0; i < types.length; i++) {
				if( item.el.hasClass('mfp-'+types[i]) ) {
					type = types[i];
					break;
				}
			}

			item.src = item.el.attr('data-mfp-src');
			if(!item.src) {
				item.src = item.el.attr('href');
			}
		}

		item.type = type || mfp.st.type || 'inline';
		item.index = index;
		item.parsed = true;
		mfp.items[index] = item;
		_mfpTrigger('ElementParse', item);

		return mfp.items[index];
	},


	/**
	 * Initializes single popup or a group of popups
	 */
	addGroup: function(el, options) {
		var eHandler = function(e) {
			e.mfpEl = this;
			mfp._openClick(e, el, options);
		};

		if(!options) {
			options = {};
		}

		var eName = 'click.magnificPopup';
		options.mainEl = el;

		if(options.items) {
			options.isObj = true;
			el.off(eName).on(eName, eHandler);
		} else {
			options.isObj = false;
			if(options.delegate) {
				el.off(eName).on(eName, options.delegate , eHandler);
			} else {
				options.items = el;
				el.off(eName).on(eName, eHandler);
			}
		}
	},
	_openClick: function(e, el, options) {
		var midClick = options.midClick !== undefined ? options.midClick : $.magnificPopup.defaults.midClick;


		if(!midClick && ( e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey ) ) {
			return;
		}

		var disableOn = options.disableOn !== undefined ? options.disableOn : $.magnificPopup.defaults.disableOn;

		if(disableOn) {
			if($.isFunction(disableOn)) {
				if( !disableOn.call(mfp) ) {
					return true;
				}
			} else { // else it's number
				if( _window.width() < disableOn ) {
					return true;
				}
			}
		}

		if(e.type) {
			e.preventDefault();

			// This will prevent popup from closing if element is inside and popup is already opened
			if(mfp.isOpen) {
				e.stopPropagation();
			}
		}

		options.el = $(e.mfpEl);
		if(options.delegate) {
			options.items = el.find(options.delegate);
		}
		mfp.open(options);
	},


	/**
	 * Updates text on preloader
	 */
	updateStatus: function(status, text) {

		if(mfp.preloader) {
			if(_prevStatus !== status) {
				mfp.container.removeClass('mfp-s-'+_prevStatus);
			}

			if(!text && status === 'loading') {
				text = mfp.st.tLoading;
			}

			var data = {
				status: status,
				text: text
			};
			// allows to modify status
			_mfpTrigger('UpdateStatus', data);

			status = data.status;
			text = data.text;

			mfp.preloader.html(text);

			mfp.preloader.find('a').on('click', function(e) {
				e.stopImmediatePropagation();
			});

			mfp.container.addClass('mfp-s-'+status);
			_prevStatus = status;
		}
	},


	/*
		"Private" helpers that aren't private at all
	 */
	// Check to close popup or not
	// "target" is an element that was clicked
	_checkIfClose: function(target) {

		if($(target).hasClass(PREVENT_CLOSE_CLASS)) {
			return;
		}

		var closeOnContent = mfp.st.closeOnContentClick;
		var closeOnBg = mfp.st.closeOnBgClick;

		if(closeOnContent && closeOnBg) {
			return true;
		} else {

			// We close the popup if click is on close button or on preloader. Or if there is no content.
			if(!mfp.content || $(target).hasClass('mfp-close') || (mfp.preloader && target === mfp.preloader[0]) ) {
				return true;
			}

			// if click is outside the content
			if(  (target !== mfp.content[0] && !$.contains(mfp.content[0], target))  ) {
				if(closeOnBg) {
					// last check, if the clicked element is in DOM, (in case it's removed onclick)
					if( $.contains(document, target) ) {
						return true;
					}
				}
			} else if(closeOnContent) {
				return true;
			}

		}
		return false;
	},
	_addClassToMFP: function(cName) {
		mfp.bgOverlay.addClass(cName);
		mfp.wrap.addClass(cName);
	},
	_removeClassFromMFP: function(cName) {
		this.bgOverlay.removeClass(cName);
		mfp.wrap.removeClass(cName);
	},
	_hasScrollBar: function(winHeight) {
		return (  (mfp.isIE7 ? _document.height() : document.body.scrollHeight) > (winHeight || _window.height()) );
	},
	_setFocus: function() {
		(mfp.st.focus ? mfp.content.find(mfp.st.focus).eq(0) : mfp.wrap).focus();
	},
	_onFocusIn: function(e) {
		if( e.target !== mfp.wrap[0] && !$.contains(mfp.wrap[0], e.target) ) {
			mfp._setFocus();
			return false;
		}
	},
	_parseMarkup: function(template, values, item) {
		var arr;
		if(item.data) {
			values = $.extend(item.data, values);
		}
		_mfpTrigger(MARKUP_PARSE_EVENT, [template, values, item] );

		$.each(values, function(key, value) {
			if(value === undefined || value === false) {
				return true;
			}
			arr = key.split('_');
			if(arr.length > 1) {
				var el = template.find(EVENT_NS + '-'+arr[0]);

				if(el.length > 0) {
					var attr = arr[1];
					if(attr === 'replaceWith') {
						if(el[0] !== value[0]) {
							el.replaceWith(value);
						}
					} else if(attr === 'img') {
						if(el.is('img')) {
							el.attr('src', value);
						} else {
							el.replaceWith( $('<img>').attr('src', value).attr('class', el.attr('class')) );
						}
					} else {
						el.attr(arr[1], value);
					}
				}

			} else {
				template.find(EVENT_NS + '-'+key).html(value);
			}
		});
	},

	_getScrollbarSize: function() {
		// thx David
		if(mfp.scrollbarSize === undefined) {
			var scrollDiv = document.createElement("div");
			scrollDiv.style.cssText = 'width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;';
			document.body.appendChild(scrollDiv);
			mfp.scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
			document.body.removeChild(scrollDiv);
		}
		return mfp.scrollbarSize;
	}

}; /* MagnificPopup core prototype end */




/**
 * Public static functions
 */
$.magnificPopup = {
	instance: null,
	proto: MagnificPopup.prototype,
	modules: [],

	open: function(options, index) {
		_checkInstance();

		if(!options) {
			options = {};
		} else {
			options = $.extend(true, {}, options);
		}

		options.isObj = true;
		options.index = index || 0;
		return this.instance.open(options);
	},

	close: function() {
		return $.magnificPopup.instance && $.magnificPopup.instance.close();
	},

	registerModule: function(name, module) {
		if(module.options) {
			$.magnificPopup.defaults[name] = module.options;
		}
		$.extend(this.proto, module.proto);
		this.modules.push(name);
	},

	defaults: {

		// Info about options is in docs:
		// http://dimsemenov.com/plugins/magnific-popup/documentation.html#options

		disableOn: 0,

		key: null,

		midClick: false,

		mainClass: '',

		preloader: true,

		focus: '', // CSS selector of input to focus after popup is opened

		closeOnContentClick: false,

		closeOnBgClick: true,

		closeBtnInside: true,

		showCloseBtn: true,

		enableEscapeKey: true,

		modal: false,

		alignTop: false,

		removalDelay: 0,

		prependTo: null,

		fixedContentPos: 'auto',

		fixedBgPos: 'auto',

		overflowY: 'auto',

		closeMarkup: '<button title="%title%" type="button" class="mfp-close">&#215;</button>',

		tClose: 'Close (Esc)',

		tLoading: 'Loading...',

		autoFocusLast: true

	}
};



$.fn.magnificPopup = function(options) {
	_checkInstance();

	var jqEl = $(this);

	// We call some API method of first param is a string
	if (typeof options === "string" ) {

		if(options === 'open') {
			var items,
				itemOpts = _isJQ ? jqEl.data('magnificPopup') : jqEl[0].magnificPopup,
				index = parseInt(arguments[1], 10) || 0;

			if(itemOpts.items) {
				items = itemOpts.items[index];
			} else {
				items = jqEl;
				if(itemOpts.delegate) {
					items = items.find(itemOpts.delegate);
				}
				items = items.eq( index );
			}
			mfp._openClick({mfpEl:items}, jqEl, itemOpts);
		} else {
			if(mfp.isOpen)
				mfp[options].apply(mfp, Array.prototype.slice.call(arguments, 1));
		}

	} else {
		// clone options obj
		options = $.extend(true, {}, options);

		/*
		 * As Zepto doesn't support .data() method for objects
		 * and it works only in normal browsers
		 * we assign "options" object directly to the DOM element. FTW!
		 */
		if(_isJQ) {
			jqEl.data('magnificPopup', options);
		} else {
			jqEl[0].magnificPopup = options;
		}

		mfp.addGroup(jqEl, options);

	}
	return jqEl;
};

/*>>core*/

/*>>inline*/

var INLINE_NS = 'inline',
	_hiddenClass,
	_inlinePlaceholder,
	_lastInlineElement,
	_putInlineElementsBack = function() {
		if(_lastInlineElement) {
			_inlinePlaceholder.after( _lastInlineElement.addClass(_hiddenClass) ).detach();
			_lastInlineElement = null;
		}
	};

$.magnificPopup.registerModule(INLINE_NS, {
	options: {
		hiddenClass: 'hide', // will be appended with `mfp-` prefix
		markup: '',
		tNotFound: 'Content not found'
	},
	proto: {

		initInline: function() {
			mfp.types.push(INLINE_NS);

			_mfpOn(CLOSE_EVENT+'.'+INLINE_NS, function() {
				_putInlineElementsBack();
			});
		},

		getInline: function(item, template) {

			_putInlineElementsBack();

			if(item.src) {
				var inlineSt = mfp.st.inline,
					el = $(item.src);

				if(el.length) {

					// If target element has parent - we replace it with placeholder and put it back after popup is closed
					var parent = el[0].parentNode;
					if(parent && parent.tagName) {
						if(!_inlinePlaceholder) {
							_hiddenClass = inlineSt.hiddenClass;
							_inlinePlaceholder = _getEl(_hiddenClass);
							_hiddenClass = 'mfp-'+_hiddenClass;
						}
						// replace target inline element with placeholder
						_lastInlineElement = el.after(_inlinePlaceholder).detach().removeClass(_hiddenClass);
					}

					mfp.updateStatus('ready');
				} else {
					mfp.updateStatus('error', inlineSt.tNotFound);
					el = $('<div>');
				}

				item.inlineElement = el;
				return el;
			}

			mfp.updateStatus('ready');
			mfp._parseMarkup(template, {}, item);
			return template;
		}
	}
});

/*>>inline*/

/*>>ajax*/
var AJAX_NS = 'ajax',
	_ajaxCur,
	_removeAjaxCursor = function() {
		if(_ajaxCur) {
			$(document.body).removeClass(_ajaxCur);
		}
	},
	_destroyAjaxRequest = function() {
		_removeAjaxCursor();
		if(mfp.req) {
			mfp.req.abort();
		}
	};

$.magnificPopup.registerModule(AJAX_NS, {

	options: {
		settings: null,
		cursor: 'mfp-ajax-cur',
		tError: '<a href="%url%">The content</a> could not be loaded.'
	},

	proto: {
		initAjax: function() {
			mfp.types.push(AJAX_NS);
			_ajaxCur = mfp.st.ajax.cursor;

			_mfpOn(CLOSE_EVENT+'.'+AJAX_NS, _destroyAjaxRequest);
			_mfpOn('BeforeChange.' + AJAX_NS, _destroyAjaxRequest);
		},
		getAjax: function(item) {

			if(_ajaxCur) {
				$(document.body).addClass(_ajaxCur);
			}

			mfp.updateStatus('loading');

			var opts = $.extend({
				url: item.src,
				success: function(data, textStatus, jqXHR) {
					var temp = {
						data:data,
						xhr:jqXHR
					};

					_mfpTrigger('ParseAjax', temp);

					mfp.appendContent( $(temp.data), AJAX_NS );

					item.finished = true;

					_removeAjaxCursor();

					mfp._setFocus();

					setTimeout(function() {
						mfp.wrap.addClass(READY_CLASS);
					}, 16);

					mfp.updateStatus('ready');

					_mfpTrigger('AjaxContentAdded');
				},
				error: function() {
					_removeAjaxCursor();
					item.finished = item.loadError = true;
					mfp.updateStatus('error', mfp.st.ajax.tError.replace('%url%', item.src));
				}
			}, mfp.st.ajax.settings);

			mfp.req = $.ajax(opts);

			return '';
		}
	}
});

/*>>ajax*/

/*>>image*/
var _imgInterval,
	_getTitle = function(item) {
		if(item.data && item.data.title !== undefined)
			return item.data.title;

		var src = mfp.st.image.titleSrc;

		if(src) {
			if($.isFunction(src)) {
				return src.call(mfp, item);
			} else if(item.el) {
				return item.el.attr(src) || '';
			}
		}
		return '';
	};

$.magnificPopup.registerModule('image', {

	options: {
		markup: '<div class="mfp-figure">'+
					'<div class="mfp-close"></div>'+
					'<figure>'+
						'<div class="mfp-img"></div>'+
						'<figcaption>'+
							'<div class="mfp-bottom-bar">'+
								'<div class="mfp-title"></div>'+
								'<div class="mfp-counter"></div>'+
							'</div>'+
						'</figcaption>'+
					'</figure>'+
				'</div>',
		cursor: 'mfp-zoom-out-cur',
		titleSrc: 'title',
		verticalFit: true,
		tError: '<a href="%url%">The image</a> could not be loaded.'
	},

	proto: {
		initImage: function() {
			var imgSt = mfp.st.image,
				ns = '.image';

			mfp.types.push('image');

			_mfpOn(OPEN_EVENT+ns, function() {
				if(mfp.currItem.type === 'image' && imgSt.cursor) {
					$(document.body).addClass(imgSt.cursor);
				}
			});

			_mfpOn(CLOSE_EVENT+ns, function() {
				if(imgSt.cursor) {
					$(document.body).removeClass(imgSt.cursor);
				}
				_window.off('resize' + EVENT_NS);
			});

			_mfpOn('Resize'+ns, mfp.resizeImage);
			if(mfp.isLowIE) {
				_mfpOn('AfterChange', mfp.resizeImage);
			}
		},
		resizeImage: function() {
			var item = mfp.currItem;
			if(!item || !item.img) return;

			if(mfp.st.image.verticalFit) {
				var decr = 0;
				// fix box-sizing in ie7/8
				if(mfp.isLowIE) {
					decr = parseInt(item.img.css('padding-top'), 10) + parseInt(item.img.css('padding-bottom'),10);
				}
				item.img.css('max-height', mfp.wH-decr);
			}
		},
		_onImageHasSize: function(item) {
			if(item.img) {

				item.hasSize = true;

				if(_imgInterval) {
					clearInterval(_imgInterval);
				}

				item.isCheckingImgSize = false;

				_mfpTrigger('ImageHasSize', item);

				if(item.imgHidden) {
					if(mfp.content)
						mfp.content.removeClass('mfp-loading');

					item.imgHidden = false;
				}

			}
		},

		/**
		 * Function that loops until the image has size to display elements that rely on it asap
		 */
		findImageSize: function(item) {

			var counter = 0,
				img = item.img[0],
				mfpSetInterval = function(delay) {

					if(_imgInterval) {
						clearInterval(_imgInterval);
					}
					// decelerating interval that checks for size of an image
					_imgInterval = setInterval(function() {
						if(img.naturalWidth > 0) {
							mfp._onImageHasSize(item);
							return;
						}

						if(counter > 200) {
							clearInterval(_imgInterval);
						}

						counter++;
						if(counter === 3) {
							mfpSetInterval(10);
						} else if(counter === 40) {
							mfpSetInterval(50);
						} else if(counter === 100) {
							mfpSetInterval(500);
						}
					}, delay);
				};

			mfpSetInterval(1);
		},

		getImage: function(item, template) {

			var guard = 0,

				// image load complete handler
				onLoadComplete = function() {
					if(item) {
						if (item.img[0].complete) {
							item.img.off('.mfploader');

							if(item === mfp.currItem){
								mfp._onImageHasSize(item);

								mfp.updateStatus('ready');
							}

							item.hasSize = true;
							item.loaded = true;

							_mfpTrigger('ImageLoadComplete');

						}
						else {
							// if image complete check fails 200 times (20 sec), we assume that there was an error.
							guard++;
							if(guard < 200) {
								setTimeout(onLoadComplete,100);
							} else {
								onLoadError();
							}
						}
					}
				},

				// image error handler
				onLoadError = function() {
					if(item) {
						item.img.off('.mfploader');
						if(item === mfp.currItem){
							mfp._onImageHasSize(item);
							mfp.updateStatus('error', imgSt.tError.replace('%url%', item.src) );
						}

						item.hasSize = true;
						item.loaded = true;
						item.loadError = true;
					}
				},
				imgSt = mfp.st.image;


			var el = template.find('.mfp-img');
			if(el.length) {
				var img = document.createElement('img');
				img.className = 'mfp-img';
				if(item.el && item.el.find('img').length) {
					img.alt = item.el.find('img').attr('alt');
				}
				item.img = $(img).on('load.mfploader', onLoadComplete).on('error.mfploader', onLoadError);
				img.src = item.src;

				// without clone() "error" event is not firing when IMG is replaced by new IMG
				// TODO: find a way to avoid such cloning
				if(el.is('img')) {
					item.img = item.img.clone();
				}

				img = item.img[0];
				if(img.naturalWidth > 0) {
					item.hasSize = true;
				} else if(!img.width) {
					item.hasSize = false;
				}
			}

			mfp._parseMarkup(template, {
				title: _getTitle(item),
				img_replaceWith: item.img
			}, item);

			mfp.resizeImage();

			if(item.hasSize) {
				if(_imgInterval) clearInterval(_imgInterval);

				if(item.loadError) {
					template.addClass('mfp-loading');
					mfp.updateStatus('error', imgSt.tError.replace('%url%', item.src) );
				} else {
					template.removeClass('mfp-loading');
					mfp.updateStatus('ready');
				}
				return template;
			}

			mfp.updateStatus('loading');
			item.loading = true;

			if(!item.hasSize) {
				item.imgHidden = true;
				template.addClass('mfp-loading');
				mfp.findImageSize(item);
			}

			return template;
		}
	}
});

/*>>image*/

/*>>zoom*/
var hasMozTransform,
	getHasMozTransform = function() {
		if(hasMozTransform === undefined) {
			hasMozTransform = document.createElement('p').style.MozTransform !== undefined;
		}
		return hasMozTransform;
	};

$.magnificPopup.registerModule('zoom', {

	options: {
		enabled: false,
		easing: 'ease-in-out',
		duration: 300,
		opener: function(element) {
			return element.is('img') ? element : element.find('img');
		}
	},

	proto: {

		initZoom: function() {
			var zoomSt = mfp.st.zoom,
				ns = '.zoom',
				image;

			if(!zoomSt.enabled || !mfp.supportsTransition) {
				return;
			}

			var duration = zoomSt.duration,
				getElToAnimate = function(image) {
					var newImg = image.clone().removeAttr('style').removeAttr('class').addClass('mfp-animated-image'),
						transition = 'all '+(zoomSt.duration/1000)+'s ' + zoomSt.easing,
						cssObj = {
							position: 'fixed',
							zIndex: 9999,
							left: 0,
							top: 0,
							'-webkit-backface-visibility': 'hidden'
						},
						t = 'transition';

					cssObj['-webkit-'+t] = cssObj['-moz-'+t] = cssObj['-o-'+t] = cssObj[t] = transition;

					newImg.css(cssObj);
					return newImg;
				},
				showMainContent = function() {
					mfp.content.css('visibility', 'visible');
				},
				openTimeout,
				animatedImg;

			_mfpOn('BuildControls'+ns, function() {
				if(mfp._allowZoom()) {

					clearTimeout(openTimeout);
					mfp.content.css('visibility', 'hidden');

					// Basically, all code below does is clones existing image, puts in on top of the current one and animated it

					image = mfp._getItemToZoom();

					if(!image) {
						showMainContent();
						return;
					}

					animatedImg = getElToAnimate(image);

					animatedImg.css( mfp._getOffset() );

					mfp.wrap.append(animatedImg);

					openTimeout = setTimeout(function() {
						animatedImg.css( mfp._getOffset( true ) );
						openTimeout = setTimeout(function() {

							showMainContent();

							setTimeout(function() {
								animatedImg.remove();
								image = animatedImg = null;
								_mfpTrigger('ZoomAnimationEnded');
							}, 16); // avoid blink when switching images

						}, duration); // this timeout equals animation duration

					}, 16); // by adding this timeout we avoid short glitch at the beginning of animation


					// Lots of timeouts...
				}
			});
			_mfpOn(BEFORE_CLOSE_EVENT+ns, function() {
				if(mfp._allowZoom()) {

					clearTimeout(openTimeout);

					mfp.st.removalDelay = duration;

					if(!image) {
						image = mfp._getItemToZoom();
						if(!image) {
							return;
						}
						animatedImg = getElToAnimate(image);
					}

					animatedImg.css( mfp._getOffset(true) );
					mfp.wrap.append(animatedImg);
					mfp.content.css('visibility', 'hidden');

					setTimeout(function() {
						animatedImg.css( mfp._getOffset() );
					}, 16);
				}

			});

			_mfpOn(CLOSE_EVENT+ns, function() {
				if(mfp._allowZoom()) {
					showMainContent();
					if(animatedImg) {
						animatedImg.remove();
					}
					image = null;
				}
			});
		},

		_allowZoom: function() {
			return mfp.currItem.type === 'image';
		},

		_getItemToZoom: function() {
			if(mfp.currItem.hasSize) {
				return mfp.currItem.img;
			} else {
				return false;
			}
		},

		// Get element postion relative to viewport
		_getOffset: function(isLarge) {
			var el;
			if(isLarge) {
				el = mfp.currItem.img;
			} else {
				el = mfp.st.zoom.opener(mfp.currItem.el || mfp.currItem);
			}

			var offset = el.offset();
			var paddingTop = parseInt(el.css('padding-top'),10);
			var paddingBottom = parseInt(el.css('padding-bottom'),10);
			offset.top -= ( $(window).scrollTop() - paddingTop );


			/*

			Animating left + top + width/height looks glitchy in Firefox, but perfect in Chrome. And vice-versa.

			 */
			var obj = {
				width: el.width(),
				// fix Zepto height+padding issue
				height: (_isJQ ? el.innerHeight() : el[0].offsetHeight) - paddingBottom - paddingTop
			};

			// I hate to do this, but there is no another option
			if( getHasMozTransform() ) {
				obj['-moz-transform'] = obj['transform'] = 'translate(' + offset.left + 'px,' + offset.top + 'px)';
			} else {
				obj.left = offset.left;
				obj.top = offset.top;
			}
			return obj;
		}

	}
});



/*>>zoom*/

/*>>iframe*/

var IFRAME_NS = 'iframe',
	_emptyPage = '//about:blank',

	_fixIframeBugs = function(isShowing) {
		if(mfp.currTemplate[IFRAME_NS]) {
			var el = mfp.currTemplate[IFRAME_NS].find('iframe');
			if(el.length) {
				// reset src after the popup is closed to avoid "video keeps playing after popup is closed" bug
				if(!isShowing) {
					el[0].src = _emptyPage;
				}

				// IE8 black screen bug fix
				if(mfp.isIE8) {
					el.css('display', isShowing ? 'block' : 'none');
				}
			}
		}
	};

$.magnificPopup.registerModule(IFRAME_NS, {

	options: {
		markup: '<div class="mfp-iframe-scaler">'+
					'<div class="mfp-close"></div>'+
					'<iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe>'+
				'</div>',

		srcAction: 'iframe_src',

		// we don't care and support only one default type of URL by default
		patterns: {
			youtube: {
				index: 'youtube.com',
				id: 'v=',
				src: '//www.youtube.com/embed/%id%?autoplay=1'
			},
			vimeo: {
				index: 'vimeo.com/',
				id: '/',
				src: '//player.vimeo.com/video/%id%?autoplay=1'
			},
			gmaps: {
				index: '//maps.google.',
				src: '%id%&output=embed'
			}
		}
	},

	proto: {
		initIframe: function() {
			mfp.types.push(IFRAME_NS);

			_mfpOn('BeforeChange', function(e, prevType, newType) {
				if(prevType !== newType) {
					if(prevType === IFRAME_NS) {
						_fixIframeBugs(); // iframe if removed
					} else if(newType === IFRAME_NS) {
						_fixIframeBugs(true); // iframe is showing
					}
				}// else {
					// iframe source is switched, don't do anything
				//}
			});

			_mfpOn(CLOSE_EVENT + '.' + IFRAME_NS, function() {
				_fixIframeBugs();
			});
		},

		getIframe: function(item, template) {
			var embedSrc = item.src;
			var iframeSt = mfp.st.iframe;

			$.each(iframeSt.patterns, function() {
				if(embedSrc.indexOf( this.index ) > -1) {
					if(this.id) {
						if(typeof this.id === 'string') {
							embedSrc = embedSrc.substr(embedSrc.lastIndexOf(this.id)+this.id.length, embedSrc.length);
						} else {
							embedSrc = this.id.call( this, embedSrc );
						}
					}
					embedSrc = this.src.replace('%id%', embedSrc );
					return false; // break;
				}
			});

			var dataObj = {};
			if(iframeSt.srcAction) {
				dataObj[iframeSt.srcAction] = embedSrc;
			}
			mfp._parseMarkup(template, dataObj, item);

			mfp.updateStatus('ready');

			return template;
		}
	}
});



/*>>iframe*/

/*>>gallery*/
/**
 * Get looped index depending on number of slides
 */
var _getLoopedId = function(index) {
		var numSlides = mfp.items.length;
		if(index > numSlides - 1) {
			return index - numSlides;
		} else  if(index < 0) {
			return numSlides + index;
		}
		return index;
	},
	_replaceCurrTotal = function(text, curr, total) {
		return text.replace(/%curr%/gi, curr + 1).replace(/%total%/gi, total);
	};

$.magnificPopup.registerModule('gallery', {

	options: {
		enabled: false,
		arrowMarkup: '<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',
		preload: [0,2],
		navigateByImgClick: true,
		arrows: true,

		tPrev: 'Previous (Left arrow key)',
		tNext: 'Next (Right arrow key)',
		tCounter: '%curr% of %total%'
	},

	proto: {
		initGallery: function() {

			var gSt = mfp.st.gallery,
				ns = '.mfp-gallery';

			mfp.direction = true; // true - next, false - prev

			if(!gSt || !gSt.enabled ) return false;

			_wrapClasses += ' mfp-gallery';

			_mfpOn(OPEN_EVENT+ns, function() {

				if(gSt.navigateByImgClick) {
					mfp.wrap.on('click'+ns, '.mfp-img', function() {
						if(mfp.items.length > 1) {
							mfp.next();
							return false;
						}
					});
				}

				_document.on('keydown'+ns, function(e) {
					if (e.keyCode === 37) {
						mfp.prev();
					} else if (e.keyCode === 39) {
						mfp.next();
					}
				});
			});

			_mfpOn('UpdateStatus'+ns, function(e, data) {
				if(data.text) {
					data.text = _replaceCurrTotal(data.text, mfp.currItem.index, mfp.items.length);
				}
			});

			_mfpOn(MARKUP_PARSE_EVENT+ns, function(e, element, values, item) {
				var l = mfp.items.length;
				values.counter = l > 1 ? _replaceCurrTotal(gSt.tCounter, item.index, l) : '';
			});

			_mfpOn('BuildControls' + ns, function() {
				if(mfp.items.length > 1 && gSt.arrows && !mfp.arrowLeft) {
					var markup = gSt.arrowMarkup,
						arrowLeft = mfp.arrowLeft = $( markup.replace(/%title%/gi, gSt.tPrev).replace(/%dir%/gi, 'left') ).addClass(PREVENT_CLOSE_CLASS),
						arrowRight = mfp.arrowRight = $( markup.replace(/%title%/gi, gSt.tNext).replace(/%dir%/gi, 'right') ).addClass(PREVENT_CLOSE_CLASS);

					arrowLeft.click(function() {
						mfp.prev();
					});
					arrowRight.click(function() {
						mfp.next();
					});

					mfp.container.append(arrowLeft.add(arrowRight));
				}
			});

			_mfpOn(CHANGE_EVENT+ns, function() {
				if(mfp._preloadTimeout) clearTimeout(mfp._preloadTimeout);

				mfp._preloadTimeout = setTimeout(function() {
					mfp.preloadNearbyImages();
					mfp._preloadTimeout = null;
				}, 16);
			});


			_mfpOn(CLOSE_EVENT+ns, function() {
				_document.off(ns);
				mfp.wrap.off('click'+ns);
				mfp.arrowRight = mfp.arrowLeft = null;
			});

		},
		next: function() {
			mfp.direction = true;
			mfp.index = _getLoopedId(mfp.index + 1);
			mfp.updateItemHTML();
		},
		prev: function() {
			mfp.direction = false;
			mfp.index = _getLoopedId(mfp.index - 1);
			mfp.updateItemHTML();
		},
		goTo: function(newIndex) {
			mfp.direction = (newIndex >= mfp.index);
			mfp.index = newIndex;
			mfp.updateItemHTML();
		},
		preloadNearbyImages: function() {
			var p = mfp.st.gallery.preload,
				preloadBefore = Math.min(p[0], mfp.items.length),
				preloadAfter = Math.min(p[1], mfp.items.length),
				i;

			for(i = 1; i <= (mfp.direction ? preloadAfter : preloadBefore); i++) {
				mfp._preloadItem(mfp.index+i);
			}
			for(i = 1; i <= (mfp.direction ? preloadBefore : preloadAfter); i++) {
				mfp._preloadItem(mfp.index-i);
			}
		},
		_preloadItem: function(index) {
			index = _getLoopedId(index);

			if(mfp.items[index].preloaded) {
				return;
			}

			var item = mfp.items[index];
			if(!item.parsed) {
				item = mfp.parseEl( index );
			}

			_mfpTrigger('LazyLoad', item);

			if(item.type === 'image') {
				item.img = $('<img class="mfp-img" />').on('load.mfploader', function() {
					item.hasSize = true;
				}).on('error.mfploader', function() {
					item.hasSize = true;
					item.loadError = true;
					_mfpTrigger('LazyLoadError', item);
				}).attr('src', item.src);
			}


			item.preloaded = true;
		}
	}
});

/*>>gallery*/

/*>>retina*/

var RETINA_NS = 'retina';

$.magnificPopup.registerModule(RETINA_NS, {
	options: {
		replaceSrc: function(item) {
			return item.src.replace(/\.\w+$/, function(m) { return '@2x' + m; });
		},
		ratio: 1 // Function or number.  Set to 1 to disable.
	},
	proto: {
		initRetina: function() {
			if(window.devicePixelRatio > 1) {

				var st = mfp.st.retina,
					ratio = st.ratio;

				ratio = !isNaN(ratio) ? ratio : ratio();

				if(ratio > 1) {
					_mfpOn('ImageHasSize' + '.' + RETINA_NS, function(e, item) {
						item.img.css({
							'max-width': item.img[0].naturalWidth / ratio,
							'width': '100%'
						});
					});
					_mfpOn('ElementParse' + '.' + RETINA_NS, function(e, item) {
						item.src = st.replaceSrc(item, ratio);
					});
				}
			}

		}
	}
});

/*>>retina*/
 _checkInstance(); }));
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
; (function () {

	/** Used as a safe reference for `undefined` in pre-ES5 environments. */
	var undefined;

	/** Used as the semantic version number. */
	var VERSION = '4.17.4';

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/** Error message constants. */
	var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
		FUNC_ERROR_TEXT = 'Expected a function';

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used as the maximum memoize cache size. */
	var MAX_MEMOIZE_SIZE = 500;

	/** Used as the internal argument placeholder. */
	var PLACEHOLDER = '__lodash_placeholder__';

	/** Used to compose bitmasks for cloning. */
	var CLONE_DEEP_FLAG = 1,
		CLONE_FLAT_FLAG = 2,
		CLONE_SYMBOLS_FLAG = 4;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
		COMPARE_UNORDERED_FLAG = 2;

	/** Used to compose bitmasks for function metadata. */
	var WRAP_BIND_FLAG = 1,
		WRAP_BIND_KEY_FLAG = 2,
		WRAP_CURRY_BOUND_FLAG = 4,
		WRAP_CURRY_FLAG = 8,
		WRAP_CURRY_RIGHT_FLAG = 16,
		WRAP_PARTIAL_FLAG = 32,
		WRAP_PARTIAL_RIGHT_FLAG = 64,
		WRAP_ARY_FLAG = 128,
		WRAP_REARG_FLAG = 256,
		WRAP_FLIP_FLAG = 512;

	/** Used as default options for `_.truncate`. */
	var DEFAULT_TRUNC_LENGTH = 30,
		DEFAULT_TRUNC_OMISSION = '...';

	/** Used to detect hot functions by number of calls within a span of milliseconds. */
	var HOT_COUNT = 800,
		HOT_SPAN = 16;

	/** Used to indicate the type of lazy iteratees. */
	var LAZY_FILTER_FLAG = 1,
		LAZY_MAP_FLAG = 2,
		LAZY_WHILE_FLAG = 3;

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0,
		MAX_SAFE_INTEGER = 9007199254740991,
		MAX_INTEGER = 1.7976931348623157e+308,
		NAN = 0 / 0;

	/** Used as references for the maximum length and index of an array. */
	var MAX_ARRAY_LENGTH = 4294967295,
		MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
		HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	/** Used to associate wrap methods with their bit flags. */
	var wrapFlags = [
	  ['ary', WRAP_ARY_FLAG],
	  ['bind', WRAP_BIND_FLAG],
	  ['bindKey', WRAP_BIND_KEY_FLAG],
	  ['curry', WRAP_CURRY_FLAG],
	  ['curryRight', WRAP_CURRY_RIGHT_FLAG],
	  ['flip', WRAP_FLIP_FLAG],
	  ['partial', WRAP_PARTIAL_FLAG],
	  ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
	  ['rearg', WRAP_REARG_FLAG]
	];

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
		arrayTag = '[object Array]',
		asyncTag = '[object AsyncFunction]',
		boolTag = '[object Boolean]',
		dateTag = '[object Date]',
		domExcTag = '[object DOMException]',
		errorTag = '[object Error]',
		funcTag = '[object Function]',
		genTag = '[object GeneratorFunction]',
		mapTag = '[object Map]',
		numberTag = '[object Number]',
		nullTag = '[object Null]',
		objectTag = '[object Object]',
		promiseTag = '[object Promise]',
		proxyTag = '[object Proxy]',
		regexpTag = '[object RegExp]',
		setTag = '[object Set]',
		stringTag = '[object String]',
		symbolTag = '[object Symbol]',
		undefinedTag = '[object Undefined]',
		weakMapTag = '[object WeakMap]',
		weakSetTag = '[object WeakSet]';

	var arrayBufferTag = '[object ArrayBuffer]',
		dataViewTag = '[object DataView]',
		float32Tag = '[object Float32Array]',
		float64Tag = '[object Float64Array]',
		int8Tag = '[object Int8Array]',
		int16Tag = '[object Int16Array]',
		int32Tag = '[object Int32Array]',
		uint8Tag = '[object Uint8Array]',
		uint8ClampedTag = '[object Uint8ClampedArray]',
		uint16Tag = '[object Uint16Array]',
		uint32Tag = '[object Uint32Array]';

	/** Used to match empty string literals in compiled template source. */
	var reEmptyStringLeading = /\b__p \+= '';/g,
		reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
		reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	/** Used to match HTML entities and HTML characters. */
	var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
		reUnescapedHtml = /[&<>"']/g,
		reHasEscapedHtml = RegExp(reEscapedHtml.source),
		reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	/** Used to match template delimiters. */
	var reEscape = /<%-([\s\S]+?)%>/g,
		reEvaluate = /<%([\s\S]+?)%>/g,
		reInterpolate = /<%=([\s\S]+?)%>/g;

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
		reIsPlainProp = /^\w*$/,
		reLeadingDot = /^\./,
		rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
		reHasRegExpChar = RegExp(reRegExpChar.source);

	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g,
		reTrimStart = /^\s+/,
		reTrimEnd = /\s+$/;

	/** Used to match wrap detail comments. */
	var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
		reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
		reSplitDetails = /,? & /;

	/** Used to match words composed of alphanumeric characters. */
	var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Used to match
	 * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
	 */
	var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/** Used to match Latin Unicode letters (excluding mathematical operators). */
	var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

	/** Used to ensure capturing order of template delimiters. */
	var reNoMatch = /($^)/;

	/** Used to match unescaped characters in compiled string literals. */
	var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	/** Used to compose unicode character classes. */
	var rsAstralRange = '\\ud800-\\udfff',
		rsComboMarksRange = '\\u0300-\\u036f',
		reComboHalfMarksRange = '\\ufe20-\\ufe2f',
		rsComboSymbolsRange = '\\u20d0-\\u20ff',
		rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
		rsDingbatRange = '\\u2700-\\u27bf',
		rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
		rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
		rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
		rsPunctuationRange = '\\u2000-\\u206f',
		rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
		rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
		rsVarRange = '\\ufe0e\\ufe0f',
		rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

	/** Used to compose unicode capture groups. */
	var rsApos = "['\u2019]",
		rsAstral = '[' + rsAstralRange + ']',
		rsBreak = '[' + rsBreakRange + ']',
		rsCombo = '[' + rsComboRange + ']',
		rsDigits = '\\d+',
		rsDingbat = '[' + rsDingbatRange + ']',
		rsLower = '[' + rsLowerRange + ']',
		rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
		rsFitz = '\\ud83c[\\udffb-\\udfff]',
		rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
		rsNonAstral = '[^' + rsAstralRange + ']',
		rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
		rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
		rsUpper = '[' + rsUpperRange + ']',
		rsZWJ = '\\u200d';

	/** Used to compose unicode regexes. */
	var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
		rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
		rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
		rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
		reOptMod = rsModifier + '?',
		rsOptVar = '[' + rsVarRange + ']?',
		rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
		rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
		rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
		rsSeq = rsOptVar + reOptMod + rsOptJoin,
		rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
		rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	/** Used to match apostrophes. */
	var reApos = RegExp(rsApos, 'g');

	/**
	 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	 */
	var reComboMark = RegExp(rsCombo, 'g');

	/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	/** Used to match complex or compound words. */
	var reUnicodeWord = RegExp([
	  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
	  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
	  rsUpper + '+' + rsOptContrUpper,
	  rsOrdUpper,
	  rsOrdLower,
	  rsDigits,
	  rsEmoji
	].join('|'), 'g');

	/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');

	/** Used to detect strings that need a more robust regexp to match words. */
	var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	/** Used to assign default `context` object properties. */
	var contextProps = [
	  'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
	  'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
	  'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
	  'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
	  '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
	];

	/** Used to make template sourceURLs easier to identify. */
	var templateCounter = -1;

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;

	/** Used to identify `toStringTag` values supported by `_.clone`. */
	var cloneableTags = {};
	cloneableTags[argsTag] = cloneableTags[arrayTag] =
	cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	cloneableTags[boolTag] = cloneableTags[dateTag] =
	cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	cloneableTags[int32Tag] = cloneableTags[mapTag] =
	cloneableTags[numberTag] = cloneableTags[objectTag] =
	cloneableTags[regexpTag] = cloneableTags[setTag] =
	cloneableTags[stringTag] = cloneableTags[symbolTag] =
	cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	cloneableTags[errorTag] = cloneableTags[funcTag] =
	cloneableTags[weakMapTag] = false;

	/** Used to map Latin Unicode letters to basic Latin letters. */
	var deburredLetters = {
		// Latin-1 Supplement block.
		'\xc0': 'A', '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
		'\xe0': 'a', '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
		'\xc7': 'C', '\xe7': 'c',
		'\xd0': 'D', '\xf0': 'd',
		'\xc8': 'E', '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
		'\xe8': 'e', '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
		'\xcc': 'I', '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
		'\xec': 'i', '\xed': 'i', '\xee': 'i', '\xef': 'i',
		'\xd1': 'N', '\xf1': 'n',
		'\xd2': 'O', '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
		'\xf2': 'o', '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
		'\xd9': 'U', '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
		'\xf9': 'u', '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
		'\xdd': 'Y', '\xfd': 'y', '\xff': 'y',
		'\xc6': 'Ae', '\xe6': 'ae',
		'\xde': 'Th', '\xfe': 'th',
		'\xdf': 'ss',
		// Latin Extended-A block.
		'\u0100': 'A', '\u0102': 'A', '\u0104': 'A',
		'\u0101': 'a', '\u0103': 'a', '\u0105': 'a',
		'\u0106': 'C', '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
		'\u0107': 'c', '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
		'\u010e': 'D', '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
		'\u0112': 'E', '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
		'\u0113': 'e', '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
		'\u011c': 'G', '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
		'\u011d': 'g', '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
		'\u0124': 'H', '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
		'\u0128': 'I', '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
		'\u0129': 'i', '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
		'\u0134': 'J', '\u0135': 'j',
		'\u0136': 'K', '\u0137': 'k', '\u0138': 'k',
		'\u0139': 'L', '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
		'\u013a': 'l', '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
		'\u0143': 'N', '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
		'\u0144': 'n', '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
		'\u014c': 'O', '\u014e': 'O', '\u0150': 'O',
		'\u014d': 'o', '\u014f': 'o', '\u0151': 'o',
		'\u0154': 'R', '\u0156': 'R', '\u0158': 'R',
		'\u0155': 'r', '\u0157': 'r', '\u0159': 'r',
		'\u015a': 'S', '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
		'\u015b': 's', '\u015d': 's', '\u015f': 's', '\u0161': 's',
		'\u0162': 'T', '\u0164': 'T', '\u0166': 'T',
		'\u0163': 't', '\u0165': 't', '\u0167': 't',
		'\u0168': 'U', '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
		'\u0169': 'u', '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
		'\u0174': 'W', '\u0175': 'w',
		'\u0176': 'Y', '\u0177': 'y', '\u0178': 'Y',
		'\u0179': 'Z', '\u017b': 'Z', '\u017d': 'Z',
		'\u017a': 'z', '\u017c': 'z', '\u017e': 'z',
		'\u0132': 'IJ', '\u0133': 'ij',
		'\u0152': 'Oe', '\u0153': 'oe',
		'\u0149': "'n", '\u017f': 's'
	};

	/** Used to map characters to HTML entities. */
	var htmlEscapes = {
		'&': '&amp;',
		'<': '&lt;',
		'>': '&gt;',
		'"': '&quot;',
		"'": '&#39;'
	};

	/** Used to map HTML entities to characters. */
	var htmlUnescapes = {
		'&amp;': '&',
		'&lt;': '<',
		'&gt;': '>',
		'&quot;': '"',
		'&#39;': "'"
	};

	/** Used to escape characters for inclusion in compiled string literals. */
	var stringEscapes = {
		'\\': '\\',
		"'": "'",
		'\n': 'n',
		'\r': 'r',
		'\u2028': 'u2028',
		'\u2029': 'u2029'
	};

	/** Built-in method references without a dependency on `root`. */
	var freeParseFloat = parseFloat,
		freeParseInt = parseInt;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function () {
		try {
			return freeProcess && freeProcess.binding && freeProcess.binding('util');
		} catch (e) { }
	}());

	/* Node.js helper references. */
	var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
		nodeIsDate = nodeUtil && nodeUtil.isDate,
		nodeIsMap = nodeUtil && nodeUtil.isMap,
		nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
		nodeIsSet = nodeUtil && nodeUtil.isSet,
		nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	/*--------------------------------------------------------------------------*/

	/**
	 * Adds the key-value `pair` to `map`.
	 *
	 * @private
	 * @param {Object} map The map to modify.
	 * @param {Array} pair The key-value pair to add.
	 * @returns {Object} Returns `map`.
	 */
	function addMapEntry(map, pair) {
		// Don't return `map.set` because it's not chainable in IE 11.
		map.set(pair[0], pair[1]);
		return map;
	}

	/**
	 * Adds `value` to `set`.
	 *
	 * @private
	 * @param {Object} set The set to modify.
	 * @param {*} value The value to add.
	 * @returns {Object} Returns `set`.
	 */
	function addSetEntry(set, value) {
		// Don't return `set.add` because it's not chainable in IE 11.
		set.add(value);
		return set;
	}

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
		switch (args.length) {
			case 0: return func.call(thisArg);
			case 1: return func.call(thisArg, args[0]);
			case 2: return func.call(thisArg, args[0], args[1]);
			case 3: return func.call(thisArg, args[0], args[1], args[2]);
		}
		return func.apply(thisArg, args);
	}

	/**
	 * A specialized version of `baseAggregator` for arrays.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} setter The function to set `accumulator` values.
	 * @param {Function} iteratee The iteratee to transform keys.
	 * @param {Object} accumulator The initial aggregated object.
	 * @returns {Function} Returns `accumulator`.
	 */
	function arrayAggregator(array, setter, iteratee, accumulator) {
		var index = -1,
			length = array == null ? 0 : array.length;

		while (++index < length) {
			var value = array[index];
			setter(accumulator, value, iteratee(value), array);
		}
		return accumulator;
	}

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
		var index = -1,
			length = array == null ? 0 : array.length;

		while (++index < length) {
			if (iteratee(array[index], index, array) === false) {
				break;
			}
		}
		return array;
	}

	/**
	 * A specialized version of `_.forEachRight` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEachRight(array, iteratee) {
		var length = array == null ? 0 : array.length;

		while (length--) {
			if (iteratee(array[length], length, array) === false) {
				break;
			}
		}
		return array;
	}

	/**
	 * A specialized version of `_.every` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if all elements pass the predicate check,
	 *  else `false`.
	 */
	function arrayEvery(array, predicate) {
		var index = -1,
			length = array == null ? 0 : array.length;

		while (++index < length) {
			if (!predicate(array[index], index, array)) {
				return false;
			}
		}
		return true;
	}

	/**
	 * A specialized version of `_.filter` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function arrayFilter(array, predicate) {
		var index = -1,
			length = array == null ? 0 : array.length,
			resIndex = 0,
			result = [];

		while (++index < length) {
			var value = array[index];
			if (predicate(value, index, array)) {
				result[resIndex++] = value;
			}
		}
		return result;
	}

	/**
	 * A specialized version of `_.includes` for arrays without support for
	 * specifying an index to search from.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludes(array, value) {
		var length = array == null ? 0 : array.length;
		return !!length && baseIndexOf(array, value, 0) > -1;
	}

	/**
	 * This function is like `arrayIncludes` except that it accepts a comparator.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @param {Function} comparator The comparator invoked per element.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludesWith(array, value, comparator) {
		var index = -1,
			length = array == null ? 0 : array.length;

		while (++index < length) {
			if (comparator(value, array[index])) {
				return true;
			}
		}
		return false;
	}

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
		var index = -1,
			length = array == null ? 0 : array.length,
			result = Array(length);

		while (++index < length) {
			result[index] = iteratee(array[index], index, array);
		}
		return result;
	}

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
		var index = -1,
			length = values.length,
			offset = array.length;

		while (++index < length) {
			array[offset + index] = values[index];
		}
		return array;
	}

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initAccum) {
		var index = -1,
			length = array == null ? 0 : array.length;

		if (initAccum && length) {
			accumulator = array[++index];
		}
		while (++index < length) {
			accumulator = iteratee(accumulator, array[index], index, array);
		}
		return accumulator;
	}

	/**
	 * A specialized version of `_.reduceRight` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the last element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduceRight(array, iteratee, accumulator, initAccum) {
		var length = array == null ? 0 : array.length;
		if (initAccum && length) {
			accumulator = array[--length];
		}
		while (length--) {
			accumulator = iteratee(accumulator, array[length], length, array);
		}
		return accumulator;
	}

	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
		var index = -1,
			length = array == null ? 0 : array.length;

		while (++index < length) {
			if (predicate(array[index], index, array)) {
				return true;
			}
		}
		return false;
	}

	/**
	 * Gets the size of an ASCII `string`.
	 *
	 * @private
	 * @param {string} string The string inspect.
	 * @returns {number} Returns the string size.
	 */
	var asciiSize = baseProperty('length');

	/**
	 * Converts an ASCII `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function asciiToArray(string) {
		return string.split('');
	}

	/**
	 * Splits an ASCII `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */
	function asciiWords(string) {
		return string.match(reAsciiWord) || [];
	}

	/**
	 * The base implementation of methods like `_.findKey` and `_.findLastKey`,
	 * without support for iteratee shorthands, which iterates over `collection`
	 * using `eachFunc`.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to inspect.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {Function} eachFunc The function to iterate over `collection`.
	 * @returns {*} Returns the found element or its key, else `undefined`.
	 */
	function baseFindKey(collection, predicate, eachFunc) {
		var result;
		eachFunc(collection, function (value, key, collection) {
			if (predicate(value, key, collection)) {
				result = key;
				return false;
			}
		});
		return result;
	}

	/**
	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
	 * support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseFindIndex(array, predicate, fromIndex, fromRight) {
		var length = array.length,
			index = fromIndex + (fromRight ? 1 : -1);

		while ((fromRight ? index-- : ++index < length)) {
			if (predicate(array[index], index, array)) {
				return index;
			}
		}
		return -1;
	}

	/**
	 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf(array, value, fromIndex) {
		return value === value
		  ? strictIndexOf(array, value, fromIndex)
		  : baseFindIndex(array, baseIsNaN, fromIndex);
	}

	/**
	 * This function is like `baseIndexOf` except that it accepts a comparator.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @param {Function} comparator The comparator invoked per element.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOfWith(array, value, fromIndex, comparator) {
		var index = fromIndex - 1,
			length = array.length;

		while (++index < length) {
			if (comparator(array[index], value)) {
				return index;
			}
		}
		return -1;
	}

	/**
	 * The base implementation of `_.isNaN` without support for number objects.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	 */
	function baseIsNaN(value) {
		return value !== value;
	}

	/**
	 * The base implementation of `_.mean` and `_.meanBy` without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {number} Returns the mean.
	 */
	function baseMean(array, iteratee) {
		var length = array == null ? 0 : array.length;
		return length ? (baseSum(array, iteratee) / length) : NAN;
	}

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function baseProperty(key) {
		return function (object) {
			return object == null ? undefined : object[key];
		};
	}

	/**
	 * The base implementation of `_.propertyOf` without support for deep paths.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyOf(object) {
		return function (key) {
			return object == null ? undefined : object[key];
		};
	}

	/**
	 * The base implementation of `_.reduce` and `_.reduceRight`, without support
	 * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} accumulator The initial value.
	 * @param {boolean} initAccum Specify using the first or last element of
	 *  `collection` as the initial value.
	 * @param {Function} eachFunc The function to iterate over `collection`.
	 * @returns {*} Returns the accumulated value.
	 */
	function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
		eachFunc(collection, function (value, index, collection) {
			accumulator = initAccum
			  ? (initAccum = false, value)
			  : iteratee(accumulator, value, index, collection);
		});
		return accumulator;
	}

	/**
	 * The base implementation of `_.sortBy` which uses `comparer` to define the
	 * sort order of `array` and replaces criteria objects with their corresponding
	 * values.
	 *
	 * @private
	 * @param {Array} array The array to sort.
	 * @param {Function} comparer The function to define sort order.
	 * @returns {Array} Returns `array`.
	 */
	function baseSortBy(array, comparer) {
		var length = array.length;

		array.sort(comparer);
		while (length--) {
			array[length] = array[length].value;
		}
		return array;
	}

	/**
	 * The base implementation of `_.sum` and `_.sumBy` without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {number} Returns the sum.
	 */
	function baseSum(array, iteratee) {
		var result,
			index = -1,
			length = array.length;

		while (++index < length) {
			var current = iteratee(array[index]);
			if (current !== undefined) {
				result = result === undefined ? current : (result + current);
			}
		}
		return result;
	}

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
		var index = -1,
			result = Array(n);

		while (++index < n) {
			result[index] = iteratee(index);
		}
		return result;
	}

	/**
	 * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	 * of key-value pairs for `object` corresponding to the property names of `props`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} props The property names to get values for.
	 * @returns {Object} Returns the key-value pairs.
	 */
	function baseToPairs(object, props) {
		return arrayMap(props, function (key) {
			return [key, object[key]];
		});
	}

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
		return function (value) {
			return func(value);
		};
	}

	/**
	 * The base implementation of `_.values` and `_.valuesIn` which creates an
	 * array of `object` property values corresponding to the property names
	 * of `props`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} props The property names to get values for.
	 * @returns {Object} Returns the array of property values.
	 */
	function baseValues(object, props) {
		return arrayMap(props, function (key) {
			return object[key];
		});
	}

	/**
	 * Checks if a `cache` value for `key` exists.
	 *
	 * @private
	 * @param {Object} cache The cache to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function cacheHas(cache, key) {
		return cache.has(key);
	}

	/**
	 * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	 * that is not found in the character symbols.
	 *
	 * @private
	 * @param {Array} strSymbols The string symbols to inspect.
	 * @param {Array} chrSymbols The character symbols to find.
	 * @returns {number} Returns the index of the first unmatched string symbol.
	 */
	function charsStartIndex(strSymbols, chrSymbols) {
		var index = -1,
			length = strSymbols.length;

		while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) { }
		return index;
	}

	/**
	 * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	 * that is not found in the character symbols.
	 *
	 * @private
	 * @param {Array} strSymbols The string symbols to inspect.
	 * @param {Array} chrSymbols The character symbols to find.
	 * @returns {number} Returns the index of the last unmatched string symbol.
	 */
	function charsEndIndex(strSymbols, chrSymbols) {
		var index = strSymbols.length;

		while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) { }
		return index;
	}

	/**
	 * Gets the number of `placeholder` occurrences in `array`.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} placeholder The placeholder to search for.
	 * @returns {number} Returns the placeholder count.
	 */
	function countHolders(array, placeholder) {
		var length = array.length,
			result = 0;

		while (length--) {
			if (array[length] === placeholder) {
				++result;
			}
		}
		return result;
	}

	/**
	 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	 * letters to basic Latin letters.
	 *
	 * @private
	 * @param {string} letter The matched letter to deburr.
	 * @returns {string} Returns the deburred letter.
	 */
	var deburrLetter = basePropertyOf(deburredLetters);

	/**
	 * Used by `_.escape` to convert characters to HTML entities.
	 *
	 * @private
	 * @param {string} chr The matched character to escape.
	 * @returns {string} Returns the escaped character.
	 */
	var escapeHtmlChar = basePropertyOf(htmlEscapes);

	/**
	 * Used by `_.template` to escape characters for inclusion in compiled string literals.
	 *
	 * @private
	 * @param {string} chr The matched character to escape.
	 * @returns {string} Returns the escaped character.
	 */
	function escapeStringChar(chr) {
		return '\\' + stringEscapes[chr];
	}

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
		return object == null ? undefined : object[key];
	}

	/**
	 * Checks if `string` contains Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	 */
	function hasUnicode(string) {
		return reHasUnicode.test(string);
	}

	/**
	 * Checks if `string` contains a word composed of Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a word is found, else `false`.
	 */
	function hasUnicodeWord(string) {
		return reHasUnicodeWord.test(string);
	}

	/**
	 * Converts `iterator` to an array.
	 *
	 * @private
	 * @param {Object} iterator The iterator to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function iteratorToArray(iterator) {
		var data,
			result = [];

		while (!(data = iterator.next()).done) {
			result.push(data.value);
		}
		return result;
	}

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
		var index = -1,
			result = Array(map.size);

		map.forEach(function (value, key) {
			result[++index] = [key, value];
		});
		return result;
	}

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
		return function (arg) {
			return func(transform(arg));
		};
	}

	/**
	 * Replaces all `placeholder` elements in `array` with an internal placeholder
	 * and returns an array of their indexes.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {*} placeholder The placeholder to replace.
	 * @returns {Array} Returns the new array of placeholder indexes.
	 */
	function replaceHolders(array, placeholder) {
		var index = -1,
			length = array.length,
			resIndex = 0,
			result = [];

		while (++index < length) {
			var value = array[index];
			if (value === placeholder || value === PLACEHOLDER) {
				array[index] = PLACEHOLDER;
				result[resIndex++] = index;
			}
		}
		return result;
	}

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
		var index = -1,
			result = Array(set.size);

		set.forEach(function (value) {
			result[++index] = value;
		});
		return result;
	}

	/**
	 * Converts `set` to its value-value pairs.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the value-value pairs.
	 */
	function setToPairs(set) {
		var index = -1,
			result = Array(set.size);

		set.forEach(function (value) {
			result[++index] = [value, value];
		});
		return result;
	}

	/**
	 * A specialized version of `_.indexOf` which performs strict equality
	 * comparisons of values, i.e. `===`.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function strictIndexOf(array, value, fromIndex) {
		var index = fromIndex - 1,
			length = array.length;

		while (++index < length) {
			if (array[index] === value) {
				return index;
			}
		}
		return -1;
	}

	/**
	 * A specialized version of `_.lastIndexOf` which performs strict equality
	 * comparisons of values, i.e. `===`.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function strictLastIndexOf(array, value, fromIndex) {
		var index = fromIndex + 1;
		while (index--) {
			if (array[index] === value) {
				return index;
			}
		}
		return index;
	}

	/**
	 * Gets the number of symbols in `string`.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {number} Returns the string size.
	 */
	function stringSize(string) {
		return hasUnicode(string)
		  ? unicodeSize(string)
		  : asciiSize(string);
	}

	/**
	 * Converts `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function stringToArray(string) {
		return hasUnicode(string)
		  ? unicodeToArray(string)
		  : asciiToArray(string);
	}

	/**
	 * Used by `_.unescape` to convert HTML entities to characters.
	 *
	 * @private
	 * @param {string} chr The matched character to unescape.
	 * @returns {string} Returns the unescaped character.
	 */
	var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

	/**
	 * Gets the size of a Unicode `string`.
	 *
	 * @private
	 * @param {string} string The string inspect.
	 * @returns {number} Returns the string size.
	 */
	function unicodeSize(string) {
		var result = reUnicode.lastIndex = 0;
		while (reUnicode.test(string)) {
			++result;
		}
		return result;
	}

	/**
	 * Converts a Unicode `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function unicodeToArray(string) {
		return string.match(reUnicode) || [];
	}

	/**
	 * Splits a Unicode `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */
	function unicodeWords(string) {
		return string.match(reUnicodeWord) || [];
	}

	/*--------------------------------------------------------------------------*/

	/**
	 * Create a new pristine `lodash` function using the `context` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.1.0
	 * @category Util
	 * @param {Object} [context=root] The context object.
	 * @returns {Function} Returns a new `lodash` function.
	 * @example
	 *
	 * _.mixin({ 'foo': _.constant('foo') });
	 *
	 * var lodash = _.runInContext();
	 * lodash.mixin({ 'bar': lodash.constant('bar') });
	 *
	 * _.isFunction(_.foo);
	 * // => true
	 * _.isFunction(_.bar);
	 * // => false
	 *
	 * lodash.isFunction(lodash.foo);
	 * // => false
	 * lodash.isFunction(lodash.bar);
	 * // => true
	 *
	 * // Create a suped-up `defer` in Node.js.
	 * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	 */
	var runInContext = (function runInContext(context) {
		context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

		/** Built-in constructor references. */
		var Array = context.Array,
			Date = context.Date,
			Error = context.Error,
			Function = context.Function,
			Math = context.Math,
			Object = context.Object,
			RegExp = context.RegExp,
			String = context.String,
			TypeError = context.TypeError;

		/** Used for built-in method references. */
		var arrayProto = Array.prototype,
			funcProto = Function.prototype,
			objectProto = Object.prototype;

		/** Used to detect overreaching core-js shims. */
		var coreJsData = context['__core-js_shared__'];

		/** Used to resolve the decompiled source of functions. */
		var funcToString = funcProto.toString;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/** Used to generate unique IDs. */
		var idCounter = 0;

		/** Used to detect methods masquerading as native. */
		var maskSrcKey = (function () {
			var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
			return uid ? ('Symbol(src)_1.' + uid) : '';
		}());

		/**
		 * Used to resolve the
		 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
		 * of values.
		 */
		var nativeObjectToString = objectProto.toString;

		/** Used to infer the `Object` constructor. */
		var objectCtorString = funcToString.call(Object);

		/** Used to restore the original `_` reference in `_.noConflict`. */
		var oldDash = root._;

		/** Used to detect if a method is native. */
		var reIsNative = RegExp('^' +
		  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
		  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
		);

		/** Built-in value references. */
		var Buffer = moduleExports ? context.Buffer : undefined,
			Symbol = context.Symbol,
			Uint8Array = context.Uint8Array,
			allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
			getPrototype = overArg(Object.getPrototypeOf, Object),
			objectCreate = Object.create,
			propertyIsEnumerable = objectProto.propertyIsEnumerable,
			splice = arrayProto.splice,
			spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
			symIterator = Symbol ? Symbol.iterator : undefined,
			symToStringTag = Symbol ? Symbol.toStringTag : undefined;

		var defineProperty = (function () {
			try {
				var func = getNative(Object, 'defineProperty');
				func({}, '', {});
				return func;
			} catch (e) { }
		}());

		/** Mocked built-ins. */
		var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
			ctxNow = Date && Date.now !== root.Date.now && Date.now,
			ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

		/* Built-in method references for those with the same name as other `lodash` methods. */
		var nativeCeil = Math.ceil,
			nativeFloor = Math.floor,
			nativeGetSymbols = Object.getOwnPropertySymbols,
			nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
			nativeIsFinite = context.isFinite,
			nativeJoin = arrayProto.join,
			nativeKeys = overArg(Object.keys, Object),
			nativeMax = Math.max,
			nativeMin = Math.min,
			nativeNow = Date.now,
			nativeParseInt = context.parseInt,
			nativeRandom = Math.random,
			nativeReverse = arrayProto.reverse;

		/* Built-in method references that are verified to be native. */
		var DataView = getNative(context, 'DataView'),
			Map = getNative(context, 'Map'),
			Promise = getNative(context, 'Promise'),
			Set = getNative(context, 'Set'),
			WeakMap = getNative(context, 'WeakMap'),
			nativeCreate = getNative(Object, 'create');

		/** Used to store function metadata. */
		var metaMap = WeakMap && new WeakMap;

		/** Used to lookup unminified function names. */
		var realNames = {};

		/** Used to detect maps, sets, and weakmaps. */
		var dataViewCtorString = toSource(DataView),
			mapCtorString = toSource(Map),
			promiseCtorString = toSource(Promise),
			setCtorString = toSource(Set),
			weakMapCtorString = toSource(WeakMap);

		/** Used to convert symbols to primitives and strings. */
		var symbolProto = Symbol ? Symbol.prototype : undefined,
			symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
			symbolToString = symbolProto ? symbolProto.toString : undefined;

		/*------------------------------------------------------------------------*/

		/**
		 * Creates a `lodash` object which wraps `value` to enable implicit method
		 * chain sequences. Methods that operate on and return arrays, collections,
		 * and functions can be chained together. Methods that retrieve a single value
		 * or may return a primitive value will automatically end the chain sequence
		 * and return the unwrapped value. Otherwise, the value must be unwrapped
		 * with `_#value`.
		 *
		 * Explicit chain sequences, which must be unwrapped with `_#value`, may be
		 * enabled using `_.chain`.
		 *
		 * The execution of chained methods is lazy, that is, it's deferred until
		 * `_#value` is implicitly or explicitly called.
		 *
		 * Lazy evaluation allows several methods to support shortcut fusion.
		 * Shortcut fusion is an optimization to merge iteratee calls; this avoids
		 * the creation of intermediate arrays and can greatly reduce the number of
		 * iteratee executions. Sections of a chain sequence qualify for shortcut
		 * fusion if the section is applied to an array and iteratees accept only
		 * one argument. The heuristic for whether a section qualifies for shortcut
		 * fusion is subject to change.
		 *
		 * Chaining is supported in custom builds as long as the `_#value` method is
		 * directly or indirectly included in the build.
		 *
		 * In addition to lodash methods, wrappers have `Array` and `String` methods.
		 *
		 * The wrapper `Array` methods are:
		 * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
		 *
		 * The wrapper `String` methods are:
		 * `replace` and `split`
		 *
		 * The wrapper methods that support shortcut fusion are:
		 * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
		 * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
		 * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
		 *
		 * The chainable wrapper methods are:
		 * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
		 * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
		 * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
		 * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
		 * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
		 * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
		 * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
		 * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
		 * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
		 * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
		 * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
		 * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
		 * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
		 * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
		 * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
		 * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
		 * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
		 * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
		 * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
		 * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
		 * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
		 * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
		 * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
		 * `zipObject`, `zipObjectDeep`, and `zipWith`
		 *
		 * The wrapper methods that are **not** chainable by default are:
		 * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
		 * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
		 * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
		 * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
		 * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
		 * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
		 * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
		 * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
		 * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
		 * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
		 * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
		 * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
		 * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
		 * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
		 * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
		 * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
		 * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
		 * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
		 * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
		 * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
		 * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
		 * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
		 * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
		 * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
		 * `upperFirst`, `value`, and `words`
		 *
		 * @name _
		 * @constructor
		 * @category Seq
		 * @param {*} value The value to wrap in a `lodash` instance.
		 * @returns {Object} Returns the new `lodash` wrapper instance.
		 * @example
		 *
		 * function square(n) {
		 *   return n * n;
		 * }
		 *
		 * var wrapped = _([1, 2, 3]);
		 *
		 * // Returns an unwrapped value.
		 * wrapped.reduce(_.add);
		 * // => 6
		 *
		 * // Returns a wrapped value.
		 * var squares = wrapped.map(square);
		 *
		 * _.isArray(squares);
		 * // => false
		 *
		 * _.isArray(squares.value());
		 * // => true
		 */
		function lodash(value) {
			if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
				if (value instanceof LodashWrapper) {
					return value;
				}
				if (hasOwnProperty.call(value, '__wrapped__')) {
					return wrapperClone(value);
				}
			}
			return new LodashWrapper(value);
		}

		/**
		 * The base implementation of `_.create` without support for assigning
		 * properties to the created object.
		 *
		 * @private
		 * @param {Object} proto The object to inherit from.
		 * @returns {Object} Returns the new object.
		 */
		var baseCreate = (function () {
			function object() { }
			return function (proto) {
				if (!isObject(proto)) {
					return {};
				}
				if (objectCreate) {
					return objectCreate(proto);
				}
				object.prototype = proto;
				var result = new object;
				object.prototype = undefined;
				return result;
			};
		}());

		/**
		 * The function whose prototype chain sequence wrappers inherit from.
		 *
		 * @private
		 */
		function baseLodash() {
			// No operation performed.
		}

		/**
		 * The base constructor for creating `lodash` wrapper objects.
		 *
		 * @private
		 * @param {*} value The value to wrap.
		 * @param {boolean} [chainAll] Enable explicit method chain sequences.
		 */
		function LodashWrapper(value, chainAll) {
			this.__wrapped__ = value;
			this.__actions__ = [];
			this.__chain__ = !!chainAll;
			this.__index__ = 0;
			this.__values__ = undefined;
		}

		/**
		 * By default, the template delimiters used by lodash are like those in
		 * embedded Ruby (ERB) as well as ES2015 template strings. Change the
		 * following template settings to use alternative delimiters.
		 *
		 * @static
		 * @memberOf _
		 * @type {Object}
		 */
		lodash.templateSettings = {

			/**
			 * Used to detect `data` property values to be HTML-escaped.
			 *
			 * @memberOf _.templateSettings
			 * @type {RegExp}
			 */
			'escape': reEscape,

			/**
			 * Used to detect code to be evaluated.
			 *
			 * @memberOf _.templateSettings
			 * @type {RegExp}
			 */
			'evaluate': reEvaluate,

			/**
			 * Used to detect `data` property values to inject.
			 *
			 * @memberOf _.templateSettings
			 * @type {RegExp}
			 */
			'interpolate': reInterpolate,

			/**
			 * Used to reference the data object in the template text.
			 *
			 * @memberOf _.templateSettings
			 * @type {string}
			 */
			'variable': '',

			/**
			 * Used to import variables into the compiled template.
			 *
			 * @memberOf _.templateSettings
			 * @type {Object}
			 */
			'imports': {

				/**
				 * A reference to the `lodash` function.
				 *
				 * @memberOf _.templateSettings.imports
				 * @type {Function}
				 */
				'_': lodash
			}
		};

		// Ensure wrappers are instances of `baseLodash`.
		lodash.prototype = baseLodash.prototype;
		lodash.prototype.constructor = lodash;

		LodashWrapper.prototype = baseCreate(baseLodash.prototype);
		LodashWrapper.prototype.constructor = LodashWrapper;

		/*------------------------------------------------------------------------*/

		/**
		 * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
		 *
		 * @private
		 * @constructor
		 * @param {*} value The value to wrap.
		 */
		function LazyWrapper(value) {
			this.__wrapped__ = value;
			this.__actions__ = [];
			this.__dir__ = 1;
			this.__filtered__ = false;
			this.__iteratees__ = [];
			this.__takeCount__ = MAX_ARRAY_LENGTH;
			this.__views__ = [];
		}

		/**
		 * Creates a clone of the lazy wrapper object.
		 *
		 * @private
		 * @name clone
		 * @memberOf LazyWrapper
		 * @returns {Object} Returns the cloned `LazyWrapper` object.
		 */
		function lazyClone() {
			var result = new LazyWrapper(this.__wrapped__);
			result.__actions__ = copyArray(this.__actions__);
			result.__dir__ = this.__dir__;
			result.__filtered__ = this.__filtered__;
			result.__iteratees__ = copyArray(this.__iteratees__);
			result.__takeCount__ = this.__takeCount__;
			result.__views__ = copyArray(this.__views__);
			return result;
		}

		/**
		 * Reverses the direction of lazy iteration.
		 *
		 * @private
		 * @name reverse
		 * @memberOf LazyWrapper
		 * @returns {Object} Returns the new reversed `LazyWrapper` object.
		 */
		function lazyReverse() {
			if (this.__filtered__) {
				var result = new LazyWrapper(this);
				result.__dir__ = -1;
				result.__filtered__ = true;
			} else {
				result = this.clone();
				result.__dir__ *= -1;
			}
			return result;
		}

		/**
		 * Extracts the unwrapped value from its lazy wrapper.
		 *
		 * @private
		 * @name value
		 * @memberOf LazyWrapper
		 * @returns {*} Returns the unwrapped value.
		 */
		function lazyValue() {
			var array = this.__wrapped__.value(),
				dir = this.__dir__,
				isArr = isArray(array),
				isRight = dir < 0,
				arrLength = isArr ? array.length : 0,
				view = getView(0, arrLength, this.__views__),
				start = view.start,
				end = view.end,
				length = end - start,
				index = isRight ? end : (start - 1),
				iteratees = this.__iteratees__,
				iterLength = iteratees.length,
				resIndex = 0,
				takeCount = nativeMin(length, this.__takeCount__);

			if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
				return baseWrapperValue(array, this.__actions__);
			}
			var result = [];

			outer:
				while (length-- && resIndex < takeCount) {
					index += dir;

					var iterIndex = -1,
						value = array[index];

					while (++iterIndex < iterLength) {
						var data = iteratees[iterIndex],
							iteratee = data.iteratee,
							type = data.type,
							computed = iteratee(value);

						if (type == LAZY_MAP_FLAG) {
							value = computed;
						} else if (!computed) {
							if (type == LAZY_FILTER_FLAG) {
								continue outer;
							} else {
								break outer;
							}
						}
					}
					result[resIndex++] = value;
				}
			return result;
		}

		// Ensure `LazyWrapper` is an instance of `baseLodash`.
		LazyWrapper.prototype = baseCreate(baseLodash.prototype);
		LazyWrapper.prototype.constructor = LazyWrapper;

		/*------------------------------------------------------------------------*/

		/**
		 * Creates a hash object.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function Hash(entries) {
			var index = -1,
				length = entries == null ? 0 : entries.length;

			this.clear();
			while (++index < length) {
				var entry = entries[index];
				this.set(entry[0], entry[1]);
			}
		}

		/**
		 * Removes all key-value entries from the hash.
		 *
		 * @private
		 * @name clear
		 * @memberOf Hash
		 */
		function hashClear() {
			this.__data__ = nativeCreate ? nativeCreate(null) : {};
			this.size = 0;
		}

		/**
		 * Removes `key` and its value from the hash.
		 *
		 * @private
		 * @name delete
		 * @memberOf Hash
		 * @param {Object} hash The hash to modify.
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function hashDelete(key) {
			var result = this.has(key) && delete this.__data__[key];
			this.size -= result ? 1 : 0;
			return result;
		}

		/**
		 * Gets the hash value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf Hash
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function hashGet(key) {
			var data = this.__data__;
			if (nativeCreate) {
				var result = data[key];
				return result === HASH_UNDEFINED ? undefined : result;
			}
			return hasOwnProperty.call(data, key) ? data[key] : undefined;
		}

		/**
		 * Checks if a hash value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf Hash
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function hashHas(key) {
			var data = this.__data__;
			return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
		}

		/**
		 * Sets the hash `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf Hash
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the hash instance.
		 */
		function hashSet(key, value) {
			var data = this.__data__;
			this.size += this.has(key) ? 0 : 1;
			data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
			return this;
		}

		// Add methods to `Hash`.
		Hash.prototype.clear = hashClear;
		Hash.prototype['delete'] = hashDelete;
		Hash.prototype.get = hashGet;
		Hash.prototype.has = hashHas;
		Hash.prototype.set = hashSet;

		/*------------------------------------------------------------------------*/

		/**
		 * Creates an list cache object.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function ListCache(entries) {
			var index = -1,
				length = entries == null ? 0 : entries.length;

			this.clear();
			while (++index < length) {
				var entry = entries[index];
				this.set(entry[0], entry[1]);
			}
		}

		/**
		 * Removes all key-value entries from the list cache.
		 *
		 * @private
		 * @name clear
		 * @memberOf ListCache
		 */
		function listCacheClear() {
			this.__data__ = [];
			this.size = 0;
		}

		/**
		 * Removes `key` and its value from the list cache.
		 *
		 * @private
		 * @name delete
		 * @memberOf ListCache
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function listCacheDelete(key) {
			var data = this.__data__,
				index = assocIndexOf(data, key);

			if (index < 0) {
				return false;
			}
			var lastIndex = data.length - 1;
			if (index == lastIndex) {
				data.pop();
			} else {
				splice.call(data, index, 1);
			}
			--this.size;
			return true;
		}

		/**
		 * Gets the list cache value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf ListCache
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function listCacheGet(key) {
			var data = this.__data__,
				index = assocIndexOf(data, key);

			return index < 0 ? undefined : data[index][1];
		}

		/**
		 * Checks if a list cache value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf ListCache
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function listCacheHas(key) {
			return assocIndexOf(this.__data__, key) > -1;
		}

		/**
		 * Sets the list cache `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf ListCache
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the list cache instance.
		 */
		function listCacheSet(key, value) {
			var data = this.__data__,
				index = assocIndexOf(data, key);

			if (index < 0) {
				++this.size;
				data.push([key, value]);
			} else {
				data[index][1] = value;
			}
			return this;
		}

		// Add methods to `ListCache`.
		ListCache.prototype.clear = listCacheClear;
		ListCache.prototype['delete'] = listCacheDelete;
		ListCache.prototype.get = listCacheGet;
		ListCache.prototype.has = listCacheHas;
		ListCache.prototype.set = listCacheSet;

		/*------------------------------------------------------------------------*/

		/**
		 * Creates a map cache object to store key-value pairs.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function MapCache(entries) {
			var index = -1,
				length = entries == null ? 0 : entries.length;

			this.clear();
			while (++index < length) {
				var entry = entries[index];
				this.set(entry[0], entry[1]);
			}
		}

		/**
		 * Removes all key-value entries from the map.
		 *
		 * @private
		 * @name clear
		 * @memberOf MapCache
		 */
		function mapCacheClear() {
			this.size = 0;
			this.__data__ = {
				'hash': new Hash,
				'map': new (Map || ListCache),
				'string': new Hash
			};
		}

		/**
		 * Removes `key` and its value from the map.
		 *
		 * @private
		 * @name delete
		 * @memberOf MapCache
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function mapCacheDelete(key) {
			var result = getMapData(this, key)['delete'](key);
			this.size -= result ? 1 : 0;
			return result;
		}

		/**
		 * Gets the map value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf MapCache
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function mapCacheGet(key) {
			return getMapData(this, key).get(key);
		}

		/**
		 * Checks if a map value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf MapCache
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function mapCacheHas(key) {
			return getMapData(this, key).has(key);
		}

		/**
		 * Sets the map `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf MapCache
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the map cache instance.
		 */
		function mapCacheSet(key, value) {
			var data = getMapData(this, key),
				size = data.size;

			data.set(key, value);
			this.size += data.size == size ? 0 : 1;
			return this;
		}

		// Add methods to `MapCache`.
		MapCache.prototype.clear = mapCacheClear;
		MapCache.prototype['delete'] = mapCacheDelete;
		MapCache.prototype.get = mapCacheGet;
		MapCache.prototype.has = mapCacheHas;
		MapCache.prototype.set = mapCacheSet;

		/*------------------------------------------------------------------------*/

		/**
		 *
		 * Creates an array cache object to store unique values.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [values] The values to cache.
		 */
		function SetCache(values) {
			var index = -1,
				length = values == null ? 0 : values.length;

			this.__data__ = new MapCache;
			while (++index < length) {
				this.add(values[index]);
			}
		}

		/**
		 * Adds `value` to the array cache.
		 *
		 * @private
		 * @name add
		 * @memberOf SetCache
		 * @alias push
		 * @param {*} value The value to cache.
		 * @returns {Object} Returns the cache instance.
		 */
		function setCacheAdd(value) {
			this.__data__.set(value, HASH_UNDEFINED);
			return this;
		}

		/**
		 * Checks if `value` is in the array cache.
		 *
		 * @private
		 * @name has
		 * @memberOf SetCache
		 * @param {*} value The value to search for.
		 * @returns {number} Returns `true` if `value` is found, else `false`.
		 */
		function setCacheHas(value) {
			return this.__data__.has(value);
		}

		// Add methods to `SetCache`.
		SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
		SetCache.prototype.has = setCacheHas;

		/*------------------------------------------------------------------------*/

		/**
		 * Creates a stack cache object to store key-value pairs.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function Stack(entries) {
			var data = this.__data__ = new ListCache(entries);
			this.size = data.size;
		}

		/**
		 * Removes all key-value entries from the stack.
		 *
		 * @private
		 * @name clear
		 * @memberOf Stack
		 */
		function stackClear() {
			this.__data__ = new ListCache;
			this.size = 0;
		}

		/**
		 * Removes `key` and its value from the stack.
		 *
		 * @private
		 * @name delete
		 * @memberOf Stack
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function stackDelete(key) {
			var data = this.__data__,
				result = data['delete'](key);

			this.size = data.size;
			return result;
		}

		/**
		 * Gets the stack value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf Stack
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function stackGet(key) {
			return this.__data__.get(key);
		}

		/**
		 * Checks if a stack value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf Stack
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function stackHas(key) {
			return this.__data__.has(key);
		}

		/**
		 * Sets the stack `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf Stack
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the stack cache instance.
		 */
		function stackSet(key, value) {
			var data = this.__data__;
			if (data instanceof ListCache) {
				var pairs = data.__data__;
				if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
					pairs.push([key, value]);
					this.size = ++data.size;
					return this;
				}
				data = this.__data__ = new MapCache(pairs);
			}
			data.set(key, value);
			this.size = data.size;
			return this;
		}

		// Add methods to `Stack`.
		Stack.prototype.clear = stackClear;
		Stack.prototype['delete'] = stackDelete;
		Stack.prototype.get = stackGet;
		Stack.prototype.has = stackHas;
		Stack.prototype.set = stackSet;

		/*------------------------------------------------------------------------*/

		/**
		 * Creates an array of the enumerable property names of the array-like `value`.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @param {boolean} inherited Specify returning inherited property names.
		 * @returns {Array} Returns the array of property names.
		 */
		function arrayLikeKeys(value, inherited) {
			var isArr = isArray(value),
				isArg = !isArr && isArguments(value),
				isBuff = !isArr && !isArg && isBuffer(value),
				isType = !isArr && !isArg && !isBuff && isTypedArray(value),
				skipIndexes = isArr || isArg || isBuff || isType,
				result = skipIndexes ? baseTimes(value.length, String) : [],
				length = result.length;

			for (var key in value) {
				if ((inherited || hasOwnProperty.call(value, key)) &&
					!(skipIndexes && (
					// Safari 9 has enumerable `arguments.length` in strict mode.
					   key == 'length' ||
					// Node.js 0.10 has enumerable non-index properties on buffers.
					   (isBuff && (key == 'offset' || key == 'parent')) ||
					// PhantomJS 2 has enumerable non-index properties on typed arrays.
					   (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
					// Skip index properties.
					   isIndex(key, length)
					))) {
					result.push(key);
				}
			}
			return result;
		}

		/**
		 * A specialized version of `_.sample` for arrays.
		 *
		 * @private
		 * @param {Array} array The array to sample.
		 * @returns {*} Returns the random element.
		 */
		function arraySample(array) {
			var length = array.length;
			return length ? array[baseRandom(0, length - 1)] : undefined;
		}

		/**
		 * A specialized version of `_.sampleSize` for arrays.
		 *
		 * @private
		 * @param {Array} array The array to sample.
		 * @param {number} n The number of elements to sample.
		 * @returns {Array} Returns the random elements.
		 */
		function arraySampleSize(array, n) {
			return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
		}

		/**
		 * A specialized version of `_.shuffle` for arrays.
		 *
		 * @private
		 * @param {Array} array The array to shuffle.
		 * @returns {Array} Returns the new shuffled array.
		 */
		function arrayShuffle(array) {
			return shuffleSelf(copyArray(array));
		}

		/**
		 * This function is like `assignValue` except that it doesn't assign
		 * `undefined` values.
		 *
		 * @private
		 * @param {Object} object The object to modify.
		 * @param {string} key The key of the property to assign.
		 * @param {*} value The value to assign.
		 */
		function assignMergeValue(object, key, value) {
			if ((value !== undefined && !eq(object[key], value)) ||
				(value === undefined && !(key in object))) {
				baseAssignValue(object, key, value);
			}
		}

		/**
		 * Assigns `value` to `key` of `object` if the existing value is not equivalent
		 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		 * for equality comparisons.
		 *
		 * @private
		 * @param {Object} object The object to modify.
		 * @param {string} key The key of the property to assign.
		 * @param {*} value The value to assign.
		 */
		function assignValue(object, key, value) {
			var objValue = object[key];
			if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
				(value === undefined && !(key in object))) {
				baseAssignValue(object, key, value);
			}
		}

		/**
		 * Gets the index at which the `key` is found in `array` of key-value pairs.
		 *
		 * @private
		 * @param {Array} array The array to inspect.
		 * @param {*} key The key to search for.
		 * @returns {number} Returns the index of the matched value, else `-1`.
		 */
		function assocIndexOf(array, key) {
			var length = array.length;
			while (length--) {
				if (eq(array[length][0], key)) {
					return length;
				}
			}
			return -1;
		}

		/**
		 * Aggregates elements of `collection` on `accumulator` with keys transformed
		 * by `iteratee` and values set by `setter`.
		 *
		 * @private
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} setter The function to set `accumulator` values.
		 * @param {Function} iteratee The iteratee to transform keys.
		 * @param {Object} accumulator The initial aggregated object.
		 * @returns {Function} Returns `accumulator`.
		 */
		function baseAggregator(collection, setter, iteratee, accumulator) {
			baseEach(collection, function (value, key, collection) {
				setter(accumulator, value, iteratee(value), collection);
			});
			return accumulator;
		}

		/**
		 * The base implementation of `_.assign` without support for multiple sources
		 * or `customizer` functions.
		 *
		 * @private
		 * @param {Object} object The destination object.
		 * @param {Object} source The source object.
		 * @returns {Object} Returns `object`.
		 */
		function baseAssign(object, source) {
			return object && copyObject(source, keys(source), object);
		}

		/**
		 * The base implementation of `_.assignIn` without support for multiple sources
		 * or `customizer` functions.
		 *
		 * @private
		 * @param {Object} object The destination object.
		 * @param {Object} source The source object.
		 * @returns {Object} Returns `object`.
		 */
		function baseAssignIn(object, source) {
			return object && copyObject(source, keysIn(source), object);
		}

		/**
		 * The base implementation of `assignValue` and `assignMergeValue` without
		 * value checks.
		 *
		 * @private
		 * @param {Object} object The object to modify.
		 * @param {string} key The key of the property to assign.
		 * @param {*} value The value to assign.
		 */
		function baseAssignValue(object, key, value) {
			if (key == '__proto__' && defineProperty) {
				defineProperty(object, key, {
					'configurable': true,
					'enumerable': true,
					'value': value,
					'writable': true
				});
			} else {
				object[key] = value;
			}
		}

		/**
		 * The base implementation of `_.at` without support for individual paths.
		 *
		 * @private
		 * @param {Object} object The object to iterate over.
		 * @param {string[]} paths The property paths to pick.
		 * @returns {Array} Returns the picked elements.
		 */
		function baseAt(object, paths) {
			var index = -1,
				length = paths.length,
				result = Array(length),
				skip = object == null;

			while (++index < length) {
				result[index] = skip ? undefined : get(object, paths[index]);
			}
			return result;
		}

		/**
		 * The base implementation of `_.clamp` which doesn't coerce arguments.
		 *
		 * @private
		 * @param {number} number The number to clamp.
		 * @param {number} [lower] The lower bound.
		 * @param {number} upper The upper bound.
		 * @returns {number} Returns the clamped number.
		 */
		function baseClamp(number, lower, upper) {
			if (number === number) {
				if (upper !== undefined) {
					number = number <= upper ? number : upper;
				}
				if (lower !== undefined) {
					number = number >= lower ? number : lower;
				}
			}
			return number;
		}

		/**
		 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
		 * traversed objects.
		 *
		 * @private
		 * @param {*} value The value to clone.
		 * @param {boolean} bitmask The bitmask flags.
		 *  1 - Deep clone
		 *  2 - Flatten inherited properties
		 *  4 - Clone symbols
		 * @param {Function} [customizer] The function to customize cloning.
		 * @param {string} [key] The key of `value`.
		 * @param {Object} [object] The parent object of `value`.
		 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
		 * @returns {*} Returns the cloned value.
		 */
		function baseClone(value, bitmask, customizer, key, object, stack) {
			var result,
				isDeep = bitmask & CLONE_DEEP_FLAG,
				isFlat = bitmask & CLONE_FLAT_FLAG,
				isFull = bitmask & CLONE_SYMBOLS_FLAG;

			if (customizer) {
				result = object ? customizer(value, key, object, stack) : customizer(value);
			}
			if (result !== undefined) {
				return result;
			}
			if (!isObject(value)) {
				return value;
			}
			var isArr = isArray(value);
			if (isArr) {
				result = initCloneArray(value);
				if (!isDeep) {
					return copyArray(value, result);
				}
			} else {
				var tag = getTag(value),
					isFunc = tag == funcTag || tag == genTag;

				if (isBuffer(value)) {
					return cloneBuffer(value, isDeep);
				}
				if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
					result = (isFlat || isFunc) ? {} : initCloneObject(value);
					if (!isDeep) {
						return isFlat
						  ? copySymbolsIn(value, baseAssignIn(result, value))
						  : copySymbols(value, baseAssign(result, value));
					}
				} else {
					if (!cloneableTags[tag]) {
						return object ? value : {};
					}
					result = initCloneByTag(value, tag, baseClone, isDeep);
				}
			}
			// Check for circular references and return its corresponding clone.
			stack || (stack = new Stack);
			var stacked = stack.get(value);
			if (stacked) {
				return stacked;
			}
			stack.set(value, result);

			var keysFunc = isFull
			  ? (isFlat ? getAllKeysIn : getAllKeys)
			  : (isFlat ? keysIn : keys);

			var props = isArr ? undefined : keysFunc(value);
			arrayEach(props || value, function (subValue, key) {
				if (props) {
					key = subValue;
					subValue = value[key];
				}
				// Recursively populate clone (susceptible to call stack limits).
				assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
			});
			return result;
		}

		/**
		 * The base implementation of `_.conforms` which doesn't clone `source`.
		 *
		 * @private
		 * @param {Object} source The object of property predicates to conform to.
		 * @returns {Function} Returns the new spec function.
		 */
		function baseConforms(source) {
			var props = keys(source);
			return function (object) {
				return baseConformsTo(object, source, props);
			};
		}

		/**
		 * The base implementation of `_.conformsTo` which accepts `props` to check.
		 *
		 * @private
		 * @param {Object} object The object to inspect.
		 * @param {Object} source The object of property predicates to conform to.
		 * @returns {boolean} Returns `true` if `object` conforms, else `false`.
		 */
		function baseConformsTo(object, source, props) {
			var length = props.length;
			if (object == null) {
				return !length;
			}
			object = Object(object);
			while (length--) {
				var key = props[length],
					predicate = source[key],
					value = object[key];

				if ((value === undefined && !(key in object)) || !predicate(value)) {
					return false;
				}
			}
			return true;
		}

		/**
		 * The base implementation of `_.delay` and `_.defer` which accepts `args`
		 * to provide to `func`.
		 *
		 * @private
		 * @param {Function} func The function to delay.
		 * @param {number} wait The number of milliseconds to delay invocation.
		 * @param {Array} args The arguments to provide to `func`.
		 * @returns {number|Object} Returns the timer id or timeout object.
		 */
		function baseDelay(func, wait, args) {
			if (typeof func != 'function') {
				throw new TypeError(FUNC_ERROR_TEXT);
			}
			return setTimeout(function () { func.apply(undefined, args); }, wait);
		}

		/**
		 * The base implementation of methods like `_.difference` without support
		 * for excluding multiple arrays or iteratee shorthands.
		 *
		 * @private
		 * @param {Array} array The array to inspect.
		 * @param {Array} values The values to exclude.
		 * @param {Function} [iteratee] The iteratee invoked per element.
		 * @param {Function} [comparator] The comparator invoked per element.
		 * @returns {Array} Returns the new array of filtered values.
		 */
		function baseDifference(array, values, iteratee, comparator) {
			var index = -1,
				includes = arrayIncludes,
				isCommon = true,
				length = array.length,
				result = [],
				valuesLength = values.length;

			if (!length) {
				return result;
			}
			if (iteratee) {
				values = arrayMap(values, baseUnary(iteratee));
			}
			if (comparator) {
				includes = arrayIncludesWith;
				isCommon = false;
			}
			else if (values.length >= LARGE_ARRAY_SIZE) {
				includes = cacheHas;
				isCommon = false;
				values = new SetCache(values);
			}
			outer:
				while (++index < length) {
					var value = array[index],
						computed = iteratee == null ? value : iteratee(value);

					value = (comparator || value !== 0) ? value : 0;
					if (isCommon && computed === computed) {
						var valuesIndex = valuesLength;
						while (valuesIndex--) {
							if (values[valuesIndex] === computed) {
								continue outer;
							}
						}
						result.push(value);
					}
					else if (!includes(values, computed, comparator)) {
						result.push(value);
					}
				}
			return result;
		}

		/**
		 * The base implementation of `_.forEach` without support for iteratee shorthands.
		 *
		 * @private
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @returns {Array|Object} Returns `collection`.
		 */
		var baseEach = createBaseEach(baseForOwn);

		/**
		 * The base implementation of `_.forEachRight` without support for iteratee shorthands.
		 *
		 * @private
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @returns {Array|Object} Returns `collection`.
		 */
		var baseEachRight = createBaseEach(baseForOwnRight, true);

		/**
		 * The base implementation of `_.every` without support for iteratee shorthands.
		 *
		 * @private
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} predicate The function invoked per iteration.
		 * @returns {boolean} Returns `true` if all elements pass the predicate check,
		 *  else `false`
		 */
		function baseEvery(collection, predicate) {
			var result = true;
			baseEach(collection, function (value, index, collection) {
				result = !!predicate(value, index, collection);
				return result;
			});
			return result;
		}

		/**
		 * The base implementation of methods like `_.max` and `_.min` which accepts a
		 * `comparator` to determine the extremum value.
		 *
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} iteratee The iteratee invoked per iteration.
		 * @param {Function} comparator The comparator used to compare values.
		 * @returns {*} Returns the extremum value.
		 */
		function baseExtremum(array, iteratee, comparator) {
			var index = -1,
				length = array.length;

			while (++index < length) {
				var value = array[index],
					current = iteratee(value);

				if (current != null && (computed === undefined
					  ? (current === current && !isSymbol(current))
					  : comparator(current, computed)
					)) {
					var computed = current,
						result = value;
				}
			}
			return result;
		}

		/**
		 * The base implementation of `_.fill` without an iteratee call guard.
		 *
		 * @private
		 * @param {Array} array The array to fill.
		 * @param {*} value The value to fill `array` with.
		 * @param {number} [start=0] The start position.
		 * @param {number} [end=array.length] The end position.
		 * @returns {Array} Returns `array`.
		 */
		function baseFill(array, value, start, end) {
			var length = array.length;

			start = toInteger(start);
			if (start < 0) {
				start = -start > length ? 0 : (length + start);
			}
			end = (end === undefined || end > length) ? length : toInteger(end);
			if (end < 0) {
				end += length;
			}
			end = start > end ? 0 : toLength(end);
			while (start < end) {
				array[start++] = value;
			}
			return array;
		}

		/**
		 * The base implementation of `_.filter` without support for iteratee shorthands.
		 *
		 * @private
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} predicate The function invoked per iteration.
		 * @returns {Array} Returns the new filtered array.
		 */
		function baseFilter(collection, predicate) {
			var result = [];
			baseEach(collection, function (value, index, collection) {
				if (predicate(value, index, collection)) {
					result.push(value);
				}
			});
			return result;
		}

		/**
		 * The base implementation of `_.flatten` with support for restricting flattening.
		 *
		 * @private
		 * @param {Array} array The array to flatten.
		 * @param {number} depth The maximum recursion depth.
		 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
		 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
		 * @param {Array} [result=[]] The initial result value.
		 * @returns {Array} Returns the new flattened array.
		 */
		function baseFlatten(array, depth, predicate, isStrict, result) {
			var index = -1,
				length = array.length;

			predicate || (predicate = isFlattenable);
			result || (result = []);

			while (++index < length) {
				var value = array[index];
				if (depth > 0 && predicate(value)) {
					if (depth > 1) {
						// Recursively flatten arrays (susceptible to call stack limits).
						baseFlatten(value, depth - 1, predicate, isStrict, result);
					} else {
						arrayPush(result, value);
					}
				} else if (!isStrict) {
					result[result.length] = value;
				}
			}
			return result;
		}

		/**
		 * The base implementation of `baseForOwn` which iterates over `object`
		 * properties returned by `keysFunc` and invokes `iteratee` for each property.
		 * Iteratee functions may exit iteration early by explicitly returning `false`.
		 *
		 * @private
		 * @param {Object} object The object to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @param {Function} keysFunc The function to get the keys of `object`.
		 * @returns {Object} Returns `object`.
		 */
		var baseFor = createBaseFor();

		/**
		 * This function is like `baseFor` except that it iterates over properties
		 * in the opposite order.
		 *
		 * @private
		 * @param {Object} object The object to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @param {Function} keysFunc The function to get the keys of `object`.
		 * @returns {Object} Returns `object`.
		 */
		var baseForRight = createBaseFor(true);

		/**
		 * The base implementation of `_.forOwn` without support for iteratee shorthands.
		 *
		 * @private
		 * @param {Object} object The object to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @returns {Object} Returns `object`.
		 */
		function baseForOwn(object, iteratee) {
			return object && baseFor(object, iteratee, keys);
		}

		/**
		 * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
		 *
		 * @private
		 * @param {Object} object The object to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @returns {Object} Returns `object`.
		 */
		function baseForOwnRight(object, iteratee) {
			return object && baseForRight(object, iteratee, keys);
		}

		/**
		 * The base implementation of `_.functions` which creates an array of
		 * `object` function property names filtered from `props`.
		 *
		 * @private
		 * @param {Object} object The object to inspect.
		 * @param {Array} props The property names to filter.
		 * @returns {Array} Returns the function names.
		 */
		function baseFunctions(object, props) {
			return arrayFilter(props, function (key) {
				return isFunction(object[key]);
			});
		}

		/**
		 * The base implementation of `_.get` without support for default values.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @param {Array|string} path The path of the property to get.
		 * @returns {*} Returns the resolved value.
		 */
		function baseGet(object, path) {
			path = castPath(path, object);

			var index = 0,
				length = path.length;

			while (object != null && index < length) {
				object = object[toKey(path[index++])];
			}
			return (index && index == length) ? object : undefined;
		}

		/**
		 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
		 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
		 * symbols of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @param {Function} keysFunc The function to get the keys of `object`.
		 * @param {Function} symbolsFunc The function to get the symbols of `object`.
		 * @returns {Array} Returns the array of property names and symbols.
		 */
		function baseGetAllKeys(object, keysFunc, symbolsFunc) {
			var result = keysFunc(object);
			return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
		}

		/**
		 * The base implementation of `getTag` without fallbacks for buggy environments.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @returns {string} Returns the `toStringTag`.
		 */
		function baseGetTag(value) {
			if (value == null) {
				return value === undefined ? undefinedTag : nullTag;
			}
			return (symToStringTag && symToStringTag in Object(value))
			  ? getRawTag(value)
			  : objectToString(value);
		}

		/**
		 * The base implementation of `_.gt` which doesn't coerce arguments.
		 *
		 * @private
		 * @param {*} value The value to compare.
		 * @param {*} other The other value to compare.
		 * @returns {boolean} Returns `true` if `value` is greater than `other`,
		 *  else `false`.
		 */
		function baseGt(value, other) {
			return value > other;
		}

		/**
		 * The base implementation of `_.has` without support for deep paths.
		 *
		 * @private
		 * @param {Object} [object] The object to query.
		 * @param {Array|string} key The key to check.
		 * @returns {boolean} Returns `true` if `key` exists, else `false`.
		 */
		function baseHas(object, key) {
			return object != null && hasOwnProperty.call(object, key);
		}

		/**
		 * The base implementation of `_.hasIn` without support for deep paths.
		 *
		 * @private
		 * @param {Object} [object] The object to query.
		 * @param {Array|string} key The key to check.
		 * @returns {boolean} Returns `true` if `key` exists, else `false`.
		 */
		function baseHasIn(object, key) {
			return object != null && key in Object(object);
		}

		/**
		 * The base implementation of `_.inRange` which doesn't coerce arguments.
		 *
		 * @private
		 * @param {number} number The number to check.
		 * @param {number} start The start of the range.
		 * @param {number} end The end of the range.
		 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
		 */
		function baseInRange(number, start, end) {
			return number >= nativeMin(start, end) && number < nativeMax(start, end);
		}

		/**
		 * The base implementation of methods like `_.intersection`, without support
		 * for iteratee shorthands, that accepts an array of arrays to inspect.
		 *
		 * @private
		 * @param {Array} arrays The arrays to inspect.
		 * @param {Function} [iteratee] The iteratee invoked per element.
		 * @param {Function} [comparator] The comparator invoked per element.
		 * @returns {Array} Returns the new array of shared values.
		 */
		function baseIntersection(arrays, iteratee, comparator) {
			var includes = comparator ? arrayIncludesWith : arrayIncludes,
				length = arrays[0].length,
				othLength = arrays.length,
				othIndex = othLength,
				caches = Array(othLength),
				maxLength = Infinity,
				result = [];

			while (othIndex--) {
				var array = arrays[othIndex];
				if (othIndex && iteratee) {
					array = arrayMap(array, baseUnary(iteratee));
				}
				maxLength = nativeMin(array.length, maxLength);
				caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
				  ? new SetCache(othIndex && array)
				  : undefined;
			}
			array = arrays[0];

			var index = -1,
				seen = caches[0];

			outer:
				while (++index < length && result.length < maxLength) {
					var value = array[index],
						computed = iteratee ? iteratee(value) : value;

					value = (comparator || value !== 0) ? value : 0;
					if (!(seen
						  ? cacheHas(seen, computed)
						  : includes(result, computed, comparator)
						)) {
						othIndex = othLength;
						while (--othIndex) {
							var cache = caches[othIndex];
							if (!(cache
								  ? cacheHas(cache, computed)
								  : includes(arrays[othIndex], computed, comparator))
								) {
								continue outer;
							}
						}
						if (seen) {
							seen.push(computed);
						}
						result.push(value);
					}
				}
			return result;
		}

		/**
		 * The base implementation of `_.invert` and `_.invertBy` which inverts
		 * `object` with values transformed by `iteratee` and set by `setter`.
		 *
		 * @private
		 * @param {Object} object The object to iterate over.
		 * @param {Function} setter The function to set `accumulator` values.
		 * @param {Function} iteratee The iteratee to transform values.
		 * @param {Object} accumulator The initial inverted object.
		 * @returns {Function} Returns `accumulator`.
		 */
		function baseInverter(object, setter, iteratee, accumulator) {
			baseForOwn(object, function (value, key, object) {
				setter(accumulator, iteratee(value), key, object);
			});
			return accumulator;
		}

		/**
		 * The base implementation of `_.invoke` without support for individual
		 * method arguments.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @param {Array|string} path The path of the method to invoke.
		 * @param {Array} args The arguments to invoke the method with.
		 * @returns {*} Returns the result of the invoked method.
		 */
		function baseInvoke(object, path, args) {
			path = castPath(path, object);
			object = parent(object, path);
			var func = object == null ? object : object[toKey(last(path))];
			return func == null ? undefined : apply(func, object, args);
		}

		/**
		 * The base implementation of `_.isArguments`.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		 */
		function baseIsArguments(value) {
			return isObjectLike(value) && baseGetTag(value) == argsTag;
		}

		/**
		 * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
		 */
		function baseIsArrayBuffer(value) {
			return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
		}

		/**
		 * The base implementation of `_.isDate` without Node.js optimizations.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
		 */
		function baseIsDate(value) {
			return isObjectLike(value) && baseGetTag(value) == dateTag;
		}

		/**
		 * The base implementation of `_.isEqual` which supports partial comparisons
		 * and tracks traversed objects.
		 *
		 * @private
		 * @param {*} value The value to compare.
		 * @param {*} other The other value to compare.
		 * @param {boolean} bitmask The bitmask flags.
		 *  1 - Unordered comparison
		 *  2 - Partial comparison
		 * @param {Function} [customizer] The function to customize comparisons.
		 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
		 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		 */
		function baseIsEqual(value, other, bitmask, customizer, stack) {
			if (value === other) {
				return true;
			}
			if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
				return value !== value && other !== other;
			}
			return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
		}

		/**
		 * A specialized version of `baseIsEqual` for arrays and objects which performs
		 * deep comparisons and tracks traversed objects enabling objects with circular
		 * references to be compared.
		 *
		 * @private
		 * @param {Object} object The object to compare.
		 * @param {Object} other The other object to compare.
		 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		 * @param {Function} customizer The function to customize comparisons.
		 * @param {Function} equalFunc The function to determine equivalents of values.
		 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
		 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		 */
		function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
			var objIsArr = isArray(object),
				othIsArr = isArray(other),
				objTag = objIsArr ? arrayTag : getTag(object),
				othTag = othIsArr ? arrayTag : getTag(other);

			objTag = objTag == argsTag ? objectTag : objTag;
			othTag = othTag == argsTag ? objectTag : othTag;

			var objIsObj = objTag == objectTag,
				othIsObj = othTag == objectTag,
				isSameTag = objTag == othTag;

			if (isSameTag && isBuffer(object)) {
				if (!isBuffer(other)) {
					return false;
				}
				objIsArr = true;
				objIsObj = false;
			}
			if (isSameTag && !objIsObj) {
				stack || (stack = new Stack);
				return (objIsArr || isTypedArray(object))
				  ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
				  : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
			}
			if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
				var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
					othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

				if (objIsWrapped || othIsWrapped) {
					var objUnwrapped = objIsWrapped ? object.value() : object,
						othUnwrapped = othIsWrapped ? other.value() : other;

					stack || (stack = new Stack);
					return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
				}
			}
			if (!isSameTag) {
				return false;
			}
			stack || (stack = new Stack);
			return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
		}

		/**
		 * The base implementation of `_.isMap` without Node.js optimizations.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
		 */
		function baseIsMap(value) {
			return isObjectLike(value) && getTag(value) == mapTag;
		}

		/**
		 * The base implementation of `_.isMatch` without support for iteratee shorthands.
		 *
		 * @private
		 * @param {Object} object The object to inspect.
		 * @param {Object} source The object of property values to match.
		 * @param {Array} matchData The property names, values, and compare flags to match.
		 * @param {Function} [customizer] The function to customize comparisons.
		 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
		 */
		function baseIsMatch(object, source, matchData, customizer) {
			var index = matchData.length,
				length = index,
				noCustomizer = !customizer;

			if (object == null) {
				return !length;
			}
			object = Object(object);
			while (index--) {
				var data = matchData[index];
				if ((noCustomizer && data[2])
					  ? data[1] !== object[data[0]]
					  : !(data[0] in object)
					) {
					return false;
				}
			}
			while (++index < length) {
				data = matchData[index];
				var key = data[0],
					objValue = object[key],
					srcValue = data[1];

				if (noCustomizer && data[2]) {
					if (objValue === undefined && !(key in object)) {
						return false;
					}
				} else {
					var stack = new Stack;
					if (customizer) {
						var result = customizer(objValue, srcValue, key, object, source, stack);
					}
					if (!(result === undefined
						  ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
						  : result
						)) {
						return false;
					}
				}
			}
			return true;
		}

		/**
		 * The base implementation of `_.isNative` without bad shim checks.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a native function,
		 *  else `false`.
		 */
		function baseIsNative(value) {
			if (!isObject(value) || isMasked(value)) {
				return false;
			}
			var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
			return pattern.test(toSource(value));
		}

		/**
		 * The base implementation of `_.isRegExp` without Node.js optimizations.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
		 */
		function baseIsRegExp(value) {
			return isObjectLike(value) && baseGetTag(value) == regexpTag;
		}

		/**
		 * The base implementation of `_.isSet` without Node.js optimizations.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
		 */
		function baseIsSet(value) {
			return isObjectLike(value) && getTag(value) == setTag;
		}

		/**
		 * The base implementation of `_.isTypedArray` without Node.js optimizations.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
		 */
		function baseIsTypedArray(value) {
			return isObjectLike(value) &&
			  isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
		}

		/**
		 * The base implementation of `_.iteratee`.
		 *
		 * @private
		 * @param {*} [value=_.identity] The value to convert to an iteratee.
		 * @returns {Function} Returns the iteratee.
		 */
		function baseIteratee(value) {
			// Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
			// See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
			if (typeof value == 'function') {
				return value;
			}
			if (value == null) {
				return identity;
			}
			if (typeof value == 'object') {
				return isArray(value)
				  ? baseMatchesProperty(value[0], value[1])
				  : baseMatches(value);
			}
			return property(value);
		}

		/**
		 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 */
		function baseKeys(object) {
			if (!isPrototype(object)) {
				return nativeKeys(object);
			}
			var result = [];
			for (var key in Object(object)) {
				if (hasOwnProperty.call(object, key) && key != 'constructor') {
					result.push(key);
				}
			}
			return result;
		}

		/**
		 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 */
		function baseKeysIn(object) {
			if (!isObject(object)) {
				return nativeKeysIn(object);
			}
			var isProto = isPrototype(object),
				result = [];

			for (var key in object) {
				if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
					result.push(key);
				}
			}
			return result;
		}

		/**
		 * The base implementation of `_.lt` which doesn't coerce arguments.
		 *
		 * @private
		 * @param {*} value The value to compare.
		 * @param {*} other The other value to compare.
		 * @returns {boolean} Returns `true` if `value` is less than `other`,
		 *  else `false`.
		 */
		function baseLt(value, other) {
			return value < other;
		}

		/**
		 * The base implementation of `_.map` without support for iteratee shorthands.
		 *
		 * @private
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @returns {Array} Returns the new mapped array.
		 */
		function baseMap(collection, iteratee) {
			var index = -1,
				result = isArrayLike(collection) ? Array(collection.length) : [];

			baseEach(collection, function (value, key, collection) {
				result[++index] = iteratee(value, key, collection);
			});
			return result;
		}

		/**
		 * The base implementation of `_.matches` which doesn't clone `source`.
		 *
		 * @private
		 * @param {Object} source The object of property values to match.
		 * @returns {Function} Returns the new spec function.
		 */
		function baseMatches(source) {
			var matchData = getMatchData(source);
			if (matchData.length == 1 && matchData[0][2]) {
				return matchesStrictComparable(matchData[0][0], matchData[0][1]);
			}
			return function (object) {
				return object === source || baseIsMatch(object, source, matchData);
			};
		}

		/**
		 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
		 *
		 * @private
		 * @param {string} path The path of the property to get.
		 * @param {*} srcValue The value to match.
		 * @returns {Function} Returns the new spec function.
		 */
		function baseMatchesProperty(path, srcValue) {
			if (isKey(path) && isStrictComparable(srcValue)) {
				return matchesStrictComparable(toKey(path), srcValue);
			}
			return function (object) {
				var objValue = get(object, path);
				return (objValue === undefined && objValue === srcValue)
				  ? hasIn(object, path)
				  : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
			};
		}

		/**
		 * The base implementation of `_.merge` without support for multiple sources.
		 *
		 * @private
		 * @param {Object} object The destination object.
		 * @param {Object} source The source object.
		 * @param {number} srcIndex The index of `source`.
		 * @param {Function} [customizer] The function to customize merged values.
		 * @param {Object} [stack] Tracks traversed source values and their merged
		 *  counterparts.
		 */
		function baseMerge(object, source, srcIndex, customizer, stack) {
			if (object === source) {
				return;
			}
			baseFor(source, function (srcValue, key) {
				if (isObject(srcValue)) {
					stack || (stack = new Stack);
					baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
				}
				else {
					var newValue = customizer
					  ? customizer(object[key], srcValue, (key + ''), object, source, stack)
					  : undefined;

					if (newValue === undefined) {
						newValue = srcValue;
					}
					assignMergeValue(object, key, newValue);
				}
			}, keysIn);
		}

		/**
		 * A specialized version of `baseMerge` for arrays and objects which performs
		 * deep merges and tracks traversed objects enabling objects with circular
		 * references to be merged.
		 *
		 * @private
		 * @param {Object} object The destination object.
		 * @param {Object} source The source object.
		 * @param {string} key The key of the value to merge.
		 * @param {number} srcIndex The index of `source`.
		 * @param {Function} mergeFunc The function to merge values.
		 * @param {Function} [customizer] The function to customize assigned values.
		 * @param {Object} [stack] Tracks traversed source values and their merged
		 *  counterparts.
		 */
		function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
			var objValue = object[key],
				srcValue = source[key],
				stacked = stack.get(srcValue);

			if (stacked) {
				assignMergeValue(object, key, stacked);
				return;
			}
			var newValue = customizer
			  ? customizer(objValue, srcValue, (key + ''), object, source, stack)
			  : undefined;

			var isCommon = newValue === undefined;

			if (isCommon) {
				var isArr = isArray(srcValue),
					isBuff = !isArr && isBuffer(srcValue),
					isTyped = !isArr && !isBuff && isTypedArray(srcValue);

				newValue = srcValue;
				if (isArr || isBuff || isTyped) {
					if (isArray(objValue)) {
						newValue = objValue;
					}
					else if (isArrayLikeObject(objValue)) {
						newValue = copyArray(objValue);
					}
					else if (isBuff) {
						isCommon = false;
						newValue = cloneBuffer(srcValue, true);
					}
					else if (isTyped) {
						isCommon = false;
						newValue = cloneTypedArray(srcValue, true);
					}
					else {
						newValue = [];
					}
				}
				else if (isPlainObject(srcValue) || isArguments(srcValue)) {
					newValue = objValue;
					if (isArguments(objValue)) {
						newValue = toPlainObject(objValue);
					}
					else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
						newValue = initCloneObject(srcValue);
					}
				}
				else {
					isCommon = false;
				}
			}
			if (isCommon) {
				// Recursively merge objects and arrays (susceptible to call stack limits).
				stack.set(srcValue, newValue);
				mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
				stack['delete'](srcValue);
			}
			assignMergeValue(object, key, newValue);
		}

		/**
		 * The base implementation of `_.nth` which doesn't coerce arguments.
		 *
		 * @private
		 * @param {Array} array The array to query.
		 * @param {number} n The index of the element to return.
		 * @returns {*} Returns the nth element of `array`.
		 */
		function baseNth(array, n) {
			var length = array.length;
			if (!length) {
				return;
			}
			n += n < 0 ? length : 0;
			return isIndex(n, length) ? array[n] : undefined;
		}

		/**
		 * The base implementation of `_.orderBy` without param guards.
		 *
		 * @private
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
		 * @param {string[]} orders The sort orders of `iteratees`.
		 * @returns {Array} Returns the new sorted array.
		 */
		function baseOrderBy(collection, iteratees, orders) {
			var index = -1;
			iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

			var result = baseMap(collection, function (value, key, collection) {
				var criteria = arrayMap(iteratees, function (iteratee) {
					return iteratee(value);
				});
				return { 'criteria': criteria, 'index': ++index, 'value': value };
			});

			return baseSortBy(result, function (object, other) {
				return compareMultiple(object, other, orders);
			});
		}

		/**
		 * The base implementation of `_.pick` without support for individual
		 * property identifiers.
		 *
		 * @private
		 * @param {Object} object The source object.
		 * @param {string[]} paths The property paths to pick.
		 * @returns {Object} Returns the new object.
		 */
		function basePick(object, paths) {
			return basePickBy(object, paths, function (value, path) {
				return hasIn(object, path);
			});
		}

		/**
		 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
		 *
		 * @private
		 * @param {Object} object The source object.
		 * @param {string[]} paths The property paths to pick.
		 * @param {Function} predicate The function invoked per property.
		 * @returns {Object} Returns the new object.
		 */
		function basePickBy(object, paths, predicate) {
			var index = -1,
				length = paths.length,
				result = {};

			while (++index < length) {
				var path = paths[index],
					value = baseGet(object, path);

				if (predicate(value, path)) {
					baseSet(result, castPath(path, object), value);
				}
			}
			return result;
		}

		/**
		 * A specialized version of `baseProperty` which supports deep paths.
		 *
		 * @private
		 * @param {Array|string} path The path of the property to get.
		 * @returns {Function} Returns the new accessor function.
		 */
		function basePropertyDeep(path) {
			return function (object) {
				return baseGet(object, path);
			};
		}

		/**
		 * The base implementation of `_.pullAllBy` without support for iteratee
		 * shorthands.
		 *
		 * @private
		 * @param {Array} array The array to modify.
		 * @param {Array} values The values to remove.
		 * @param {Function} [iteratee] The iteratee invoked per element.
		 * @param {Function} [comparator] The comparator invoked per element.
		 * @returns {Array} Returns `array`.
		 */
		function basePullAll(array, values, iteratee, comparator) {
			var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
				index = -1,
				length = values.length,
				seen = array;

			if (array === values) {
				values = copyArray(values);
			}
			if (iteratee) {
				seen = arrayMap(array, baseUnary(iteratee));
			}
			while (++index < length) {
				var fromIndex = 0,
					value = values[index],
					computed = iteratee ? iteratee(value) : value;

				while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
					if (seen !== array) {
						splice.call(seen, fromIndex, 1);
					}
					splice.call(array, fromIndex, 1);
				}
			}
			return array;
		}

		/**
		 * The base implementation of `_.pullAt` without support for individual
		 * indexes or capturing the removed elements.
		 *
		 * @private
		 * @param {Array} array The array to modify.
		 * @param {number[]} indexes The indexes of elements to remove.
		 * @returns {Array} Returns `array`.
		 */
		function basePullAt(array, indexes) {
			var length = array ? indexes.length : 0,
				lastIndex = length - 1;

			while (length--) {
				var index = indexes[length];
				if (length == lastIndex || index !== previous) {
					var previous = index;
					if (isIndex(index)) {
						splice.call(array, index, 1);
					} else {
						baseUnset(array, index);
					}
				}
			}
			return array;
		}

		/**
		 * The base implementation of `_.random` without support for returning
		 * floating-point numbers.
		 *
		 * @private
		 * @param {number} lower The lower bound.
		 * @param {number} upper The upper bound.
		 * @returns {number} Returns the random number.
		 */
		function baseRandom(lower, upper) {
			return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
		}

		/**
		 * The base implementation of `_.range` and `_.rangeRight` which doesn't
		 * coerce arguments.
		 *
		 * @private
		 * @param {number} start The start of the range.
		 * @param {number} end The end of the range.
		 * @param {number} step The value to increment or decrement by.
		 * @param {boolean} [fromRight] Specify iterating from right to left.
		 * @returns {Array} Returns the range of numbers.
		 */
		function baseRange(start, end, step, fromRight) {
			var index = -1,
				length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
				result = Array(length);

			while (length--) {
				result[fromRight ? length : ++index] = start;
				start += step;
			}
			return result;
		}

		/**
		 * The base implementation of `_.repeat` which doesn't coerce arguments.
		 *
		 * @private
		 * @param {string} string The string to repeat.
		 * @param {number} n The number of times to repeat the string.
		 * @returns {string} Returns the repeated string.
		 */
		function baseRepeat(string, n) {
			var result = '';
			if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
				return result;
			}
			// Leverage the exponentiation by squaring algorithm for a faster repeat.
			// See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
			do {
				if (n % 2) {
					result += string;
				}
				n = nativeFloor(n / 2);
				if (n) {
					string += string;
				}
			} while (n);

			return result;
		}

		/**
		 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
		 *
		 * @private
		 * @param {Function} func The function to apply a rest parameter to.
		 * @param {number} [start=func.length-1] The start position of the rest parameter.
		 * @returns {Function} Returns the new function.
		 */
		function baseRest(func, start) {
			return setToString(overRest(func, start, identity), func + '');
		}

		/**
		 * The base implementation of `_.sample`.
		 *
		 * @private
		 * @param {Array|Object} collection The collection to sample.
		 * @returns {*} Returns the random element.
		 */
		function baseSample(collection) {
			return arraySample(values(collection));
		}

		/**
		 * The base implementation of `_.sampleSize` without param guards.
		 *
		 * @private
		 * @param {Array|Object} collection The collection to sample.
		 * @param {number} n The number of elements to sample.
		 * @returns {Array} Returns the random elements.
		 */
		function baseSampleSize(collection, n) {
			var array = values(collection);
			return shuffleSelf(array, baseClamp(n, 0, array.length));
		}

		/**
		 * The base implementation of `_.set`.
		 *
		 * @private
		 * @param {Object} object The object to modify.
		 * @param {Array|string} path The path of the property to set.
		 * @param {*} value The value to set.
		 * @param {Function} [customizer] The function to customize path creation.
		 * @returns {Object} Returns `object`.
		 */
		function baseSet(object, path, value, customizer) {
			if (!isObject(object)) {
				return object;
			}
			path = castPath(path, object);

			var index = -1,
				length = path.length,
				lastIndex = length - 1,
				nested = object;

			while (nested != null && ++index < length) {
				var key = toKey(path[index]),
					newValue = value;

				if (index != lastIndex) {
					var objValue = nested[key];
					newValue = customizer ? customizer(objValue, key, nested) : undefined;
					if (newValue === undefined) {
						newValue = isObject(objValue)
						  ? objValue
						  : (isIndex(path[index + 1]) ? [] : {});
					}
				}
				assignValue(nested, key, newValue);
				nested = nested[key];
			}
			return object;
		}

		/**
		 * The base implementation of `setData` without support for hot loop shorting.
		 *
		 * @private
		 * @param {Function} func The function to associate metadata with.
		 * @param {*} data The metadata.
		 * @returns {Function} Returns `func`.
		 */
		var baseSetData = !metaMap ? identity : function (func, data) {
			metaMap.set(func, data);
			return func;
		};

		/**
		 * The base implementation of `setToString` without support for hot loop shorting.
		 *
		 * @private
		 * @param {Function} func The function to modify.
		 * @param {Function} string The `toString` result.
		 * @returns {Function} Returns `func`.
		 */
		var baseSetToString = !defineProperty ? identity : function (func, string) {
			return defineProperty(func, 'toString', {
				'configurable': true,
				'enumerable': false,
				'value': constant(string),
				'writable': true
			});
		};

		/**
		 * The base implementation of `_.shuffle`.
		 *
		 * @private
		 * @param {Array|Object} collection The collection to shuffle.
		 * @returns {Array} Returns the new shuffled array.
		 */
		function baseShuffle(collection) {
			return shuffleSelf(values(collection));
		}

		/**
		 * The base implementation of `_.slice` without an iteratee call guard.
		 *
		 * @private
		 * @param {Array} array The array to slice.
		 * @param {number} [start=0] The start position.
		 * @param {number} [end=array.length] The end position.
		 * @returns {Array} Returns the slice of `array`.
		 */
		function baseSlice(array, start, end) {
			var index = -1,
				length = array.length;

			if (start < 0) {
				start = -start > length ? 0 : (length + start);
			}
			end = end > length ? length : end;
			if (end < 0) {
				end += length;
			}
			length = start > end ? 0 : ((end - start) >>> 0);
			start >>>= 0;

			var result = Array(length);
			while (++index < length) {
				result[index] = array[index + start];
			}
			return result;
		}

		/**
		 * The base implementation of `_.some` without support for iteratee shorthands.
		 *
		 * @private
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} predicate The function invoked per iteration.
		 * @returns {boolean} Returns `true` if any element passes the predicate check,
		 *  else `false`.
		 */
		function baseSome(collection, predicate) {
			var result;

			baseEach(collection, function (value, index, collection) {
				result = predicate(value, index, collection);
				return !result;
			});
			return !!result;
		}

		/**
		 * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
		 * performs a binary search of `array` to determine the index at which `value`
		 * should be inserted into `array` in order to maintain its sort order.
		 *
		 * @private
		 * @param {Array} array The sorted array to inspect.
		 * @param {*} value The value to evaluate.
		 * @param {boolean} [retHighest] Specify returning the highest qualified index.
		 * @returns {number} Returns the index at which `value` should be inserted
		 *  into `array`.
		 */
		function baseSortedIndex(array, value, retHighest) {
			var low = 0,
				high = array == null ? low : array.length;

			if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
				while (low < high) {
					var mid = (low + high) >>> 1,
						computed = array[mid];

					if (computed !== null && !isSymbol(computed) &&
						(retHighest ? (computed <= value) : (computed < value))) {
						low = mid + 1;
					} else {
						high = mid;
					}
				}
				return high;
			}
			return baseSortedIndexBy(array, value, identity, retHighest);
		}

		/**
		 * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
		 * which invokes `iteratee` for `value` and each element of `array` to compute
		 * their sort ranking. The iteratee is invoked with one argument; (value).
		 *
		 * @private
		 * @param {Array} array The sorted array to inspect.
		 * @param {*} value The value to evaluate.
		 * @param {Function} iteratee The iteratee invoked per element.
		 * @param {boolean} [retHighest] Specify returning the highest qualified index.
		 * @returns {number} Returns the index at which `value` should be inserted
		 *  into `array`.
		 */
		function baseSortedIndexBy(array, value, iteratee, retHighest) {
			value = iteratee(value);

			var low = 0,
				high = array == null ? 0 : array.length,
				valIsNaN = value !== value,
				valIsNull = value === null,
				valIsSymbol = isSymbol(value),
				valIsUndefined = value === undefined;

			while (low < high) {
				var mid = nativeFloor((low + high) / 2),
					computed = iteratee(array[mid]),
					othIsDefined = computed !== undefined,
					othIsNull = computed === null,
					othIsReflexive = computed === computed,
					othIsSymbol = isSymbol(computed);

				if (valIsNaN) {
					var setLow = retHighest || othIsReflexive;
				} else if (valIsUndefined) {
					setLow = othIsReflexive && (retHighest || othIsDefined);
				} else if (valIsNull) {
					setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
				} else if (valIsSymbol) {
					setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
				} else if (othIsNull || othIsSymbol) {
					setLow = false;
				} else {
					setLow = retHighest ? (computed <= value) : (computed < value);
				}
				if (setLow) {
					low = mid + 1;
				} else {
					high = mid;
				}
			}
			return nativeMin(high, MAX_ARRAY_INDEX);
		}

		/**
		 * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
		 * support for iteratee shorthands.
		 *
		 * @private
		 * @param {Array} array The array to inspect.
		 * @param {Function} [iteratee] The iteratee invoked per element.
		 * @returns {Array} Returns the new duplicate free array.
		 */
		function baseSortedUniq(array, iteratee) {
			var index = -1,
				length = array.length,
				resIndex = 0,
				result = [];

			while (++index < length) {
				var value = array[index],
					computed = iteratee ? iteratee(value) : value;

				if (!index || !eq(computed, seen)) {
					var seen = computed;
					result[resIndex++] = value === 0 ? 0 : value;
				}
			}
			return result;
		}

		/**
		 * The base implementation of `_.toNumber` which doesn't ensure correct
		 * conversions of binary, hexadecimal, or octal string values.
		 *
		 * @private
		 * @param {*} value The value to process.
		 * @returns {number} Returns the number.
		 */
		function baseToNumber(value) {
			if (typeof value == 'number') {
				return value;
			}
			if (isSymbol(value)) {
				return NAN;
			}
			return +value;
		}

		/**
		 * The base implementation of `_.toString` which doesn't convert nullish
		 * values to empty strings.
		 *
		 * @private
		 * @param {*} value The value to process.
		 * @returns {string} Returns the string.
		 */
		function baseToString(value) {
			// Exit early for strings to avoid a performance hit in some environments.
			if (typeof value == 'string') {
				return value;
			}
			if (isArray(value)) {
				// Recursively convert values (susceptible to call stack limits).
				return arrayMap(value, baseToString) + '';
			}
			if (isSymbol(value)) {
				return symbolToString ? symbolToString.call(value) : '';
			}
			var result = (value + '');
			return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
		}

		/**
		 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
		 *
		 * @private
		 * @param {Array} array The array to inspect.
		 * @param {Function} [iteratee] The iteratee invoked per element.
		 * @param {Function} [comparator] The comparator invoked per element.
		 * @returns {Array} Returns the new duplicate free array.
		 */
		function baseUniq(array, iteratee, comparator) {
			var index = -1,
				includes = arrayIncludes,
				length = array.length,
				isCommon = true,
				result = [],
				seen = result;

			if (comparator) {
				isCommon = false;
				includes = arrayIncludesWith;
			}
			else if (length >= LARGE_ARRAY_SIZE) {
				var set = iteratee ? null : createSet(array);
				if (set) {
					return setToArray(set);
				}
				isCommon = false;
				includes = cacheHas;
				seen = new SetCache;
			}
			else {
				seen = iteratee ? [] : result;
			}
			outer:
				while (++index < length) {
					var value = array[index],
						computed = iteratee ? iteratee(value) : value;

					value = (comparator || value !== 0) ? value : 0;
					if (isCommon && computed === computed) {
						var seenIndex = seen.length;
						while (seenIndex--) {
							if (seen[seenIndex] === computed) {
								continue outer;
							}
						}
						if (iteratee) {
							seen.push(computed);
						}
						result.push(value);
					}
					else if (!includes(seen, computed, comparator)) {
						if (seen !== result) {
							seen.push(computed);
						}
						result.push(value);
					}
				}
			return result;
		}

		/**
		 * The base implementation of `_.unset`.
		 *
		 * @private
		 * @param {Object} object The object to modify.
		 * @param {Array|string} path The property path to unset.
		 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
		 */
		function baseUnset(object, path) {
			path = castPath(path, object);
			object = parent(object, path);
			return object == null || delete object[toKey(last(path))];
		}

		/**
		 * The base implementation of `_.update`.
		 *
		 * @private
		 * @param {Object} object The object to modify.
		 * @param {Array|string} path The path of the property to update.
		 * @param {Function} updater The function to produce the updated value.
		 * @param {Function} [customizer] The function to customize path creation.
		 * @returns {Object} Returns `object`.
		 */
		function baseUpdate(object, path, updater, customizer) {
			return baseSet(object, path, updater(baseGet(object, path)), customizer);
		}

		/**
		 * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
		 * without support for iteratee shorthands.
		 *
		 * @private
		 * @param {Array} array The array to query.
		 * @param {Function} predicate The function invoked per iteration.
		 * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
		 * @param {boolean} [fromRight] Specify iterating from right to left.
		 * @returns {Array} Returns the slice of `array`.
		 */
		function baseWhile(array, predicate, isDrop, fromRight) {
			var length = array.length,
				index = fromRight ? length : -1;

			while ((fromRight ? index-- : ++index < length) &&
			  predicate(array[index], index, array)) { }

			return isDrop
			  ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
			  : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
		}

		/**
		 * The base implementation of `wrapperValue` which returns the result of
		 * performing a sequence of actions on the unwrapped `value`, where each
		 * successive action is supplied the return value of the previous.
		 *
		 * @private
		 * @param {*} value The unwrapped value.
		 * @param {Array} actions Actions to perform to resolve the unwrapped value.
		 * @returns {*} Returns the resolved value.
		 */
		function baseWrapperValue(value, actions) {
			var result = value;
			if (result instanceof LazyWrapper) {
				result = result.value();
			}
			return arrayReduce(actions, function (result, action) {
				return action.func.apply(action.thisArg, arrayPush([result], action.args));
			}, result);
		}

		/**
		 * The base implementation of methods like `_.xor`, without support for
		 * iteratee shorthands, that accepts an array of arrays to inspect.
		 *
		 * @private
		 * @param {Array} arrays The arrays to inspect.
		 * @param {Function} [iteratee] The iteratee invoked per element.
		 * @param {Function} [comparator] The comparator invoked per element.
		 * @returns {Array} Returns the new array of values.
		 */
		function baseXor(arrays, iteratee, comparator) {
			var length = arrays.length;
			if (length < 2) {
				return length ? baseUniq(arrays[0]) : [];
			}
			var index = -1,
				result = Array(length);

			while (++index < length) {
				var array = arrays[index],
					othIndex = -1;

				while (++othIndex < length) {
					if (othIndex != index) {
						result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
					}
				}
			}
			return baseUniq(baseFlatten(result, 1), iteratee, comparator);
		}

		/**
		 * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
		 *
		 * @private
		 * @param {Array} props The property identifiers.
		 * @param {Array} values The property values.
		 * @param {Function} assignFunc The function to assign values.
		 * @returns {Object} Returns the new object.
		 */
		function baseZipObject(props, values, assignFunc) {
			var index = -1,
				length = props.length,
				valsLength = values.length,
				result = {};

			while (++index < length) {
				var value = index < valsLength ? values[index] : undefined;
				assignFunc(result, props[index], value);
			}
			return result;
		}

		/**
		 * Casts `value` to an empty array if it's not an array like object.
		 *
		 * @private
		 * @param {*} value The value to inspect.
		 * @returns {Array|Object} Returns the cast array-like object.
		 */
		function castArrayLikeObject(value) {
			return isArrayLikeObject(value) ? value : [];
		}

		/**
		 * Casts `value` to `identity` if it's not a function.
		 *
		 * @private
		 * @param {*} value The value to inspect.
		 * @returns {Function} Returns cast function.
		 */
		function castFunction(value) {
			return typeof value == 'function' ? value : identity;
		}

		/**
		 * Casts `value` to a path array if it's not one.
		 *
		 * @private
		 * @param {*} value The value to inspect.
		 * @param {Object} [object] The object to query keys on.
		 * @returns {Array} Returns the cast property path array.
		 */
		function castPath(value, object) {
			if (isArray(value)) {
				return value;
			}
			return isKey(value, object) ? [value] : stringToPath(toString(value));
		}

		/**
		 * A `baseRest` alias which can be replaced with `identity` by module
		 * replacement plugins.
		 *
		 * @private
		 * @type {Function}
		 * @param {Function} func The function to apply a rest parameter to.
		 * @returns {Function} Returns the new function.
		 */
		var castRest = baseRest;

		/**
		 * Casts `array` to a slice if it's needed.
		 *
		 * @private
		 * @param {Array} array The array to inspect.
		 * @param {number} start The start position.
		 * @param {number} [end=array.length] The end position.
		 * @returns {Array} Returns the cast slice.
		 */
		function castSlice(array, start, end) {
			var length = array.length;
			end = end === undefined ? length : end;
			return (!start && end >= length) ? array : baseSlice(array, start, end);
		}

		/**
		 * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
		 *
		 * @private
		 * @param {number|Object} id The timer id or timeout object of the timer to clear.
		 */
		var clearTimeout = ctxClearTimeout || function (id) {
			return root.clearTimeout(id);
		};

		/**
		 * Creates a clone of  `buffer`.
		 *
		 * @private
		 * @param {Buffer} buffer The buffer to clone.
		 * @param {boolean} [isDeep] Specify a deep clone.
		 * @returns {Buffer} Returns the cloned buffer.
		 */
		function cloneBuffer(buffer, isDeep) {
			if (isDeep) {
				return buffer.slice();
			}
			var length = buffer.length,
				result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

			buffer.copy(result);
			return result;
		}

		/**
		 * Creates a clone of `arrayBuffer`.
		 *
		 * @private
		 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
		 * @returns {ArrayBuffer} Returns the cloned array buffer.
		 */
		function cloneArrayBuffer(arrayBuffer) {
			var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
			new Uint8Array(result).set(new Uint8Array(arrayBuffer));
			return result;
		}

		/**
		 * Creates a clone of `dataView`.
		 *
		 * @private
		 * @param {Object} dataView The data view to clone.
		 * @param {boolean} [isDeep] Specify a deep clone.
		 * @returns {Object} Returns the cloned data view.
		 */
		function cloneDataView(dataView, isDeep) {
			var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
			return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
		}

		/**
		 * Creates a clone of `map`.
		 *
		 * @private
		 * @param {Object} map The map to clone.
		 * @param {Function} cloneFunc The function to clone values.
		 * @param {boolean} [isDeep] Specify a deep clone.
		 * @returns {Object} Returns the cloned map.
		 */
		function cloneMap(map, isDeep, cloneFunc) {
			var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
			return arrayReduce(array, addMapEntry, new map.constructor);
		}

		/**
		 * Creates a clone of `regexp`.
		 *
		 * @private
		 * @param {Object} regexp The regexp to clone.
		 * @returns {Object} Returns the cloned regexp.
		 */
		function cloneRegExp(regexp) {
			var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
			result.lastIndex = regexp.lastIndex;
			return result;
		}

		/**
		 * Creates a clone of `set`.
		 *
		 * @private
		 * @param {Object} set The set to clone.
		 * @param {Function} cloneFunc The function to clone values.
		 * @param {boolean} [isDeep] Specify a deep clone.
		 * @returns {Object} Returns the cloned set.
		 */
		function cloneSet(set, isDeep, cloneFunc) {
			var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
			return arrayReduce(array, addSetEntry, new set.constructor);
		}

		/**
		 * Creates a clone of the `symbol` object.
		 *
		 * @private
		 * @param {Object} symbol The symbol object to clone.
		 * @returns {Object} Returns the cloned symbol object.
		 */
		function cloneSymbol(symbol) {
			return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
		}

		/**
		 * Creates a clone of `typedArray`.
		 *
		 * @private
		 * @param {Object} typedArray The typed array to clone.
		 * @param {boolean} [isDeep] Specify a deep clone.
		 * @returns {Object} Returns the cloned typed array.
		 */
		function cloneTypedArray(typedArray, isDeep) {
			var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
			return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
		}

		/**
		 * Compares values to sort them in ascending order.
		 *
		 * @private
		 * @param {*} value The value to compare.
		 * @param {*} other The other value to compare.
		 * @returns {number} Returns the sort order indicator for `value`.
		 */
		function compareAscending(value, other) {
			if (value !== other) {
				var valIsDefined = value !== undefined,
					valIsNull = value === null,
					valIsReflexive = value === value,
					valIsSymbol = isSymbol(value);

				var othIsDefined = other !== undefined,
					othIsNull = other === null,
					othIsReflexive = other === other,
					othIsSymbol = isSymbol(other);

				if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
					(valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
					(valIsNull && othIsDefined && othIsReflexive) ||
					(!valIsDefined && othIsReflexive) ||
					!valIsReflexive) {
					return 1;
				}
				if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
					(othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
					(othIsNull && valIsDefined && valIsReflexive) ||
					(!othIsDefined && valIsReflexive) ||
					!othIsReflexive) {
					return -1;
				}
			}
			return 0;
		}

		/**
		 * Used by `_.orderBy` to compare multiple properties of a value to another
		 * and stable sort them.
		 *
		 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
		 * specify an order of "desc" for descending or "asc" for ascending sort order
		 * of corresponding values.
		 *
		 * @private
		 * @param {Object} object The object to compare.
		 * @param {Object} other The other object to compare.
		 * @param {boolean[]|string[]} orders The order to sort by for each property.
		 * @returns {number} Returns the sort order indicator for `object`.
		 */
		function compareMultiple(object, other, orders) {
			var index = -1,
				objCriteria = object.criteria,
				othCriteria = other.criteria,
				length = objCriteria.length,
				ordersLength = orders.length;

			while (++index < length) {
				var result = compareAscending(objCriteria[index], othCriteria[index]);
				if (result) {
					if (index >= ordersLength) {
						return result;
					}
					var order = orders[index];
					return result * (order == 'desc' ? -1 : 1);
				}
			}
			// Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
			// that causes it, under certain circumstances, to provide the same value for
			// `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
			// for more details.
			//
			// This also ensures a stable sort in V8 and other engines.
			// See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
			return object.index - other.index;
		}

		/**
		 * Creates an array that is the composition of partially applied arguments,
		 * placeholders, and provided arguments into a single array of arguments.
		 *
		 * @private
		 * @param {Array} args The provided arguments.
		 * @param {Array} partials The arguments to prepend to those provided.
		 * @param {Array} holders The `partials` placeholder indexes.
		 * @params {boolean} [isCurried] Specify composing for a curried function.
		 * @returns {Array} Returns the new array of composed arguments.
		 */
		function composeArgs(args, partials, holders, isCurried) {
			var argsIndex = -1,
				argsLength = args.length,
				holdersLength = holders.length,
				leftIndex = -1,
				leftLength = partials.length,
				rangeLength = nativeMax(argsLength - holdersLength, 0),
				result = Array(leftLength + rangeLength),
				isUncurried = !isCurried;

			while (++leftIndex < leftLength) {
				result[leftIndex] = partials[leftIndex];
			}
			while (++argsIndex < holdersLength) {
				if (isUncurried || argsIndex < argsLength) {
					result[holders[argsIndex]] = args[argsIndex];
				}
			}
			while (rangeLength--) {
				result[leftIndex++] = args[argsIndex++];
			}
			return result;
		}

		/**
		 * This function is like `composeArgs` except that the arguments composition
		 * is tailored for `_.partialRight`.
		 *
		 * @private
		 * @param {Array} args The provided arguments.
		 * @param {Array} partials The arguments to append to those provided.
		 * @param {Array} holders The `partials` placeholder indexes.
		 * @params {boolean} [isCurried] Specify composing for a curried function.
		 * @returns {Array} Returns the new array of composed arguments.
		 */
		function composeArgsRight(args, partials, holders, isCurried) {
			var argsIndex = -1,
				argsLength = args.length,
				holdersIndex = -1,
				holdersLength = holders.length,
				rightIndex = -1,
				rightLength = partials.length,
				rangeLength = nativeMax(argsLength - holdersLength, 0),
				result = Array(rangeLength + rightLength),
				isUncurried = !isCurried;

			while (++argsIndex < rangeLength) {
				result[argsIndex] = args[argsIndex];
			}
			var offset = argsIndex;
			while (++rightIndex < rightLength) {
				result[offset + rightIndex] = partials[rightIndex];
			}
			while (++holdersIndex < holdersLength) {
				if (isUncurried || argsIndex < argsLength) {
					result[offset + holders[holdersIndex]] = args[argsIndex++];
				}
			}
			return result;
		}

		/**
		 * Copies the values of `source` to `array`.
		 *
		 * @private
		 * @param {Array} source The array to copy values from.
		 * @param {Array} [array=[]] The array to copy values to.
		 * @returns {Array} Returns `array`.
		 */
		function copyArray(source, array) {
			var index = -1,
				length = source.length;

			array || (array = Array(length));
			while (++index < length) {
				array[index] = source[index];
			}
			return array;
		}

		/**
		 * Copies properties of `source` to `object`.
		 *
		 * @private
		 * @param {Object} source The object to copy properties from.
		 * @param {Array} props The property identifiers to copy.
		 * @param {Object} [object={}] The object to copy properties to.
		 * @param {Function} [customizer] The function to customize copied values.
		 * @returns {Object} Returns `object`.
		 */
		function copyObject(source, props, object, customizer) {
			var isNew = !object;
			object || (object = {});

			var index = -1,
				length = props.length;

			while (++index < length) {
				var key = props[index];

				var newValue = customizer
				  ? customizer(object[key], source[key], key, object, source)
				  : undefined;

				if (newValue === undefined) {
					newValue = source[key];
				}
				if (isNew) {
					baseAssignValue(object, key, newValue);
				} else {
					assignValue(object, key, newValue);
				}
			}
			return object;
		}

		/**
		 * Copies own symbols of `source` to `object`.
		 *
		 * @private
		 * @param {Object} source The object to copy symbols from.
		 * @param {Object} [object={}] The object to copy symbols to.
		 * @returns {Object} Returns `object`.
		 */
		function copySymbols(source, object) {
			return copyObject(source, getSymbols(source), object);
		}

		/**
		 * Copies own and inherited symbols of `source` to `object`.
		 *
		 * @private
		 * @param {Object} source The object to copy symbols from.
		 * @param {Object} [object={}] The object to copy symbols to.
		 * @returns {Object} Returns `object`.
		 */
		function copySymbolsIn(source, object) {
			return copyObject(source, getSymbolsIn(source), object);
		}

		/**
		 * Creates a function like `_.groupBy`.
		 *
		 * @private
		 * @param {Function} setter The function to set accumulator values.
		 * @param {Function} [initializer] The accumulator object initializer.
		 * @returns {Function} Returns the new aggregator function.
		 */
		function createAggregator(setter, initializer) {
			return function (collection, iteratee) {
				var func = isArray(collection) ? arrayAggregator : baseAggregator,
					accumulator = initializer ? initializer() : {};

				return func(collection, setter, getIteratee(iteratee, 2), accumulator);
			};
		}

		/**
		 * Creates a function like `_.assign`.
		 *
		 * @private
		 * @param {Function} assigner The function to assign values.
		 * @returns {Function} Returns the new assigner function.
		 */
		function createAssigner(assigner) {
			return baseRest(function (object, sources) {
				var index = -1,
					length = sources.length,
					customizer = length > 1 ? sources[length - 1] : undefined,
					guard = length > 2 ? sources[2] : undefined;

				customizer = (assigner.length > 3 && typeof customizer == 'function')
				  ? (length--, customizer)
				  : undefined;

				if (guard && isIterateeCall(sources[0], sources[1], guard)) {
					customizer = length < 3 ? undefined : customizer;
					length = 1;
				}
				object = Object(object);
				while (++index < length) {
					var source = sources[index];
					if (source) {
						assigner(object, source, index, customizer);
					}
				}
				return object;
			});
		}

		/**
		 * Creates a `baseEach` or `baseEachRight` function.
		 *
		 * @private
		 * @param {Function} eachFunc The function to iterate over a collection.
		 * @param {boolean} [fromRight] Specify iterating from right to left.
		 * @returns {Function} Returns the new base function.
		 */
		function createBaseEach(eachFunc, fromRight) {
			return function (collection, iteratee) {
				if (collection == null) {
					return collection;
				}
				if (!isArrayLike(collection)) {
					return eachFunc(collection, iteratee);
				}
				var length = collection.length,
					index = fromRight ? length : -1,
					iterable = Object(collection);

				while ((fromRight ? index-- : ++index < length)) {
					if (iteratee(iterable[index], index, iterable) === false) {
						break;
					}
				}
				return collection;
			};
		}

		/**
		 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
		 *
		 * @private
		 * @param {boolean} [fromRight] Specify iterating from right to left.
		 * @returns {Function} Returns the new base function.
		 */
		function createBaseFor(fromRight) {
			return function (object, iteratee, keysFunc) {
				var index = -1,
					iterable = Object(object),
					props = keysFunc(object),
					length = props.length;

				while (length--) {
					var key = props[fromRight ? length : ++index];
					if (iteratee(iterable[key], key, iterable) === false) {
						break;
					}
				}
				return object;
			};
		}

		/**
		 * Creates a function that wraps `func` to invoke it with the optional `this`
		 * binding of `thisArg`.
		 *
		 * @private
		 * @param {Function} func The function to wrap.
		 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		 * @param {*} [thisArg] The `this` binding of `func`.
		 * @returns {Function} Returns the new wrapped function.
		 */
		function createBind(func, bitmask, thisArg) {
			var isBind = bitmask & WRAP_BIND_FLAG,
				Ctor = createCtor(func);

			function wrapper() {
				var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
				return fn.apply(isBind ? thisArg : this, arguments);
			}
			return wrapper;
		}

		/**
		 * Creates a function like `_.lowerFirst`.
		 *
		 * @private
		 * @param {string} methodName The name of the `String` case method to use.
		 * @returns {Function} Returns the new case function.
		 */
		function createCaseFirst(methodName) {
			return function (string) {
				string = toString(string);

				var strSymbols = hasUnicode(string)
				  ? stringToArray(string)
				  : undefined;

				var chr = strSymbols
				  ? strSymbols[0]
				  : string.charAt(0);

				var trailing = strSymbols
				  ? castSlice(strSymbols, 1).join('')
				  : string.slice(1);

				return chr[methodName]() + trailing;
			};
		}

		/**
		 * Creates a function like `_.camelCase`.
		 *
		 * @private
		 * @param {Function} callback The function to combine each word.
		 * @returns {Function} Returns the new compounder function.
		 */
		function createCompounder(callback) {
			return function (string) {
				return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
			};
		}

		/**
		 * Creates a function that produces an instance of `Ctor` regardless of
		 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
		 *
		 * @private
		 * @param {Function} Ctor The constructor to wrap.
		 * @returns {Function} Returns the new wrapped function.
		 */
		function createCtor(Ctor) {
			return function () {
				// Use a `switch` statement to work with class constructors. See
				// http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
				// for more details.
				var args = arguments;
				switch (args.length) {
					case 0: return new Ctor;
					case 1: return new Ctor(args[0]);
					case 2: return new Ctor(args[0], args[1]);
					case 3: return new Ctor(args[0], args[1], args[2]);
					case 4: return new Ctor(args[0], args[1], args[2], args[3]);
					case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
					case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
					case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
				}
				var thisBinding = baseCreate(Ctor.prototype),
					result = Ctor.apply(thisBinding, args);

				// Mimic the constructor's `return` behavior.
				// See https://es5.github.io/#x13.2.2 for more details.
				return isObject(result) ? result : thisBinding;
			};
		}

		/**
		 * Creates a function that wraps `func` to enable currying.
		 *
		 * @private
		 * @param {Function} func The function to wrap.
		 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		 * @param {number} arity The arity of `func`.
		 * @returns {Function} Returns the new wrapped function.
		 */
		function createCurry(func, bitmask, arity) {
			var Ctor = createCtor(func);

			function wrapper() {
				var length = arguments.length,
					args = Array(length),
					index = length,
					placeholder = getHolder(wrapper);

				while (index--) {
					args[index] = arguments[index];
				}
				var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
				  ? []
				  : replaceHolders(args, placeholder);

				length -= holders.length;
				if (length < arity) {
					return createRecurry(
					  func, bitmask, createHybrid, wrapper.placeholder, undefined,
					  args, holders, undefined, undefined, arity - length);
				}
				var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
				return apply(fn, this, args);
			}
			return wrapper;
		}

		/**
		 * Creates a `_.find` or `_.findLast` function.
		 *
		 * @private
		 * @param {Function} findIndexFunc The function to find the collection index.
		 * @returns {Function} Returns the new find function.
		 */
		function createFind(findIndexFunc) {
			return function (collection, predicate, fromIndex) {
				var iterable = Object(collection);
				if (!isArrayLike(collection)) {
					var iteratee = getIteratee(predicate, 3);
					collection = keys(collection);
					predicate = function (key) { return iteratee(iterable[key], key, iterable); };
				}
				var index = findIndexFunc(collection, predicate, fromIndex);
				return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
			};
		}

		/**
		 * Creates a `_.flow` or `_.flowRight` function.
		 *
		 * @private
		 * @param {boolean} [fromRight] Specify iterating from right to left.
		 * @returns {Function} Returns the new flow function.
		 */
		function createFlow(fromRight) {
			return flatRest(function (funcs) {
				var length = funcs.length,
					index = length,
					prereq = LodashWrapper.prototype.thru;

				if (fromRight) {
					funcs.reverse();
				}
				while (index--) {
					var func = funcs[index];
					if (typeof func != 'function') {
						throw new TypeError(FUNC_ERROR_TEXT);
					}
					if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
						var wrapper = new LodashWrapper([], true);
					}
				}
				index = wrapper ? index : length;
				while (++index < length) {
					func = funcs[index];

					var funcName = getFuncName(func),
						data = funcName == 'wrapper' ? getData(func) : undefined;

					if (data && isLaziable(data[0]) &&
						  data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
						  !data[4].length && data[9] == 1
						) {
						wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
					} else {
						wrapper = (func.length == 1 && isLaziable(func))
						  ? wrapper[funcName]()
						  : wrapper.thru(func);
					}
				}
				return function () {
					var args = arguments,
						value = args[0];

					if (wrapper && args.length == 1 && isArray(value)) {
						return wrapper.plant(value).value();
					}
					var index = 0,
						result = length ? funcs[index].apply(this, args) : value;

					while (++index < length) {
						result = funcs[index].call(this, result);
					}
					return result;
				};
			});
		}

		/**
		 * Creates a function that wraps `func` to invoke it with optional `this`
		 * binding of `thisArg`, partial application, and currying.
		 *
		 * @private
		 * @param {Function|string} func The function or method name to wrap.
		 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		 * @param {*} [thisArg] The `this` binding of `func`.
		 * @param {Array} [partials] The arguments to prepend to those provided to
		 *  the new function.
		 * @param {Array} [holders] The `partials` placeholder indexes.
		 * @param {Array} [partialsRight] The arguments to append to those provided
		 *  to the new function.
		 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
		 * @param {Array} [argPos] The argument positions of the new function.
		 * @param {number} [ary] The arity cap of `func`.
		 * @param {number} [arity] The arity of `func`.
		 * @returns {Function} Returns the new wrapped function.
		 */
		function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
			var isAry = bitmask & WRAP_ARY_FLAG,
				isBind = bitmask & WRAP_BIND_FLAG,
				isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
				isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
				isFlip = bitmask & WRAP_FLIP_FLAG,
				Ctor = isBindKey ? undefined : createCtor(func);

			function wrapper() {
				var length = arguments.length,
					args = Array(length),
					index = length;

				while (index--) {
					args[index] = arguments[index];
				}
				if (isCurried) {
					var placeholder = getHolder(wrapper),
						holdersCount = countHolders(args, placeholder);
				}
				if (partials) {
					args = composeArgs(args, partials, holders, isCurried);
				}
				if (partialsRight) {
					args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
				}
				length -= holdersCount;
				if (isCurried && length < arity) {
					var newHolders = replaceHolders(args, placeholder);
					return createRecurry(
					  func, bitmask, createHybrid, wrapper.placeholder, thisArg,
					  args, newHolders, argPos, ary, arity - length
					);
				}
				var thisBinding = isBind ? thisArg : this,
					fn = isBindKey ? thisBinding[func] : func;

				length = args.length;
				if (argPos) {
					args = reorder(args, argPos);
				} else if (isFlip && length > 1) {
					args.reverse();
				}
				if (isAry && ary < length) {
					args.length = ary;
				}
				if (this && this !== root && this instanceof wrapper) {
					fn = Ctor || createCtor(fn);
				}
				return fn.apply(thisBinding, args);
			}
			return wrapper;
		}

		/**
		 * Creates a function like `_.invertBy`.
		 *
		 * @private
		 * @param {Function} setter The function to set accumulator values.
		 * @param {Function} toIteratee The function to resolve iteratees.
		 * @returns {Function} Returns the new inverter function.
		 */
		function createInverter(setter, toIteratee) {
			return function (object, iteratee) {
				return baseInverter(object, setter, toIteratee(iteratee), {});
			};
		}

		/**
		 * Creates a function that performs a mathematical operation on two values.
		 *
		 * @private
		 * @param {Function} operator The function to perform the operation.
		 * @param {number} [defaultValue] The value used for `undefined` arguments.
		 * @returns {Function} Returns the new mathematical operation function.
		 */
		function createMathOperation(operator, defaultValue) {
			return function (value, other) {
				var result;
				if (value === undefined && other === undefined) {
					return defaultValue;
				}
				if (value !== undefined) {
					result = value;
				}
				if (other !== undefined) {
					if (result === undefined) {
						return other;
					}
					if (typeof value == 'string' || typeof other == 'string') {
						value = baseToString(value);
						other = baseToString(other);
					} else {
						value = baseToNumber(value);
						other = baseToNumber(other);
					}
					result = operator(value, other);
				}
				return result;
			};
		}

		/**
		 * Creates a function like `_.over`.
		 *
		 * @private
		 * @param {Function} arrayFunc The function to iterate over iteratees.
		 * @returns {Function} Returns the new over function.
		 */
		function createOver(arrayFunc) {
			return flatRest(function (iteratees) {
				iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
				return baseRest(function (args) {
					var thisArg = this;
					return arrayFunc(iteratees, function (iteratee) {
						return apply(iteratee, thisArg, args);
					});
				});
			});
		}

		/**
		 * Creates the padding for `string` based on `length`. The `chars` string
		 * is truncated if the number of characters exceeds `length`.
		 *
		 * @private
		 * @param {number} length The padding length.
		 * @param {string} [chars=' '] The string used as padding.
		 * @returns {string} Returns the padding for `string`.
		 */
		function createPadding(length, chars) {
			chars = chars === undefined ? ' ' : baseToString(chars);

			var charsLength = chars.length;
			if (charsLength < 2) {
				return charsLength ? baseRepeat(chars, length) : chars;
			}
			var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
			return hasUnicode(chars)
			  ? castSlice(stringToArray(result), 0, length).join('')
			  : result.slice(0, length);
		}

		/**
		 * Creates a function that wraps `func` to invoke it with the `this` binding
		 * of `thisArg` and `partials` prepended to the arguments it receives.
		 *
		 * @private
		 * @param {Function} func The function to wrap.
		 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		 * @param {*} thisArg The `this` binding of `func`.
		 * @param {Array} partials The arguments to prepend to those provided to
		 *  the new function.
		 * @returns {Function} Returns the new wrapped function.
		 */
		function createPartial(func, bitmask, thisArg, partials) {
			var isBind = bitmask & WRAP_BIND_FLAG,
				Ctor = createCtor(func);

			function wrapper() {
				var argsIndex = -1,
					argsLength = arguments.length,
					leftIndex = -1,
					leftLength = partials.length,
					args = Array(leftLength + argsLength),
					fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

				while (++leftIndex < leftLength) {
					args[leftIndex] = partials[leftIndex];
				}
				while (argsLength--) {
					args[leftIndex++] = arguments[++argsIndex];
				}
				return apply(fn, isBind ? thisArg : this, args);
			}
			return wrapper;
		}

		/**
		 * Creates a `_.range` or `_.rangeRight` function.
		 *
		 * @private
		 * @param {boolean} [fromRight] Specify iterating from right to left.
		 * @returns {Function} Returns the new range function.
		 */
		function createRange(fromRight) {
			return function (start, end, step) {
				if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
					end = step = undefined;
				}
				// Ensure the sign of `-0` is preserved.
				start = toFinite(start);
				if (end === undefined) {
					end = start;
					start = 0;
				} else {
					end = toFinite(end);
				}
				step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
				return baseRange(start, end, step, fromRight);
			};
		}

		/**
		 * Creates a function that performs a relational operation on two values.
		 *
		 * @private
		 * @param {Function} operator The function to perform the operation.
		 * @returns {Function} Returns the new relational operation function.
		 */
		function createRelationalOperation(operator) {
			return function (value, other) {
				if (!(typeof value == 'string' && typeof other == 'string')) {
					value = toNumber(value);
					other = toNumber(other);
				}
				return operator(value, other);
			};
		}

		/**
		 * Creates a function that wraps `func` to continue currying.
		 *
		 * @private
		 * @param {Function} func The function to wrap.
		 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		 * @param {Function} wrapFunc The function to create the `func` wrapper.
		 * @param {*} placeholder The placeholder value.
		 * @param {*} [thisArg] The `this` binding of `func`.
		 * @param {Array} [partials] The arguments to prepend to those provided to
		 *  the new function.
		 * @param {Array} [holders] The `partials` placeholder indexes.
		 * @param {Array} [argPos] The argument positions of the new function.
		 * @param {number} [ary] The arity cap of `func`.
		 * @param {number} [arity] The arity of `func`.
		 * @returns {Function} Returns the new wrapped function.
		 */
		function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
			var isCurry = bitmask & WRAP_CURRY_FLAG,
				newHolders = isCurry ? holders : undefined,
				newHoldersRight = isCurry ? undefined : holders,
				newPartials = isCurry ? partials : undefined,
				newPartialsRight = isCurry ? undefined : partials;

			bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
			bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

			if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
				bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
			}
			var newData = [
			  func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
			  newHoldersRight, argPos, ary, arity
			];

			var result = wrapFunc.apply(undefined, newData);
			if (isLaziable(func)) {
				setData(result, newData);
			}
			result.placeholder = placeholder;
			return setWrapToString(result, func, bitmask);
		}

		/**
		 * Creates a function like `_.round`.
		 *
		 * @private
		 * @param {string} methodName The name of the `Math` method to use when rounding.
		 * @returns {Function} Returns the new round function.
		 */
		function createRound(methodName) {
			var func = Math[methodName];
			return function (number, precision) {
				number = toNumber(number);
				precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
				if (precision) {
					// Shift with exponential notation to avoid floating-point issues.
					// See [MDN](https://mdn.io/round#Examples) for more details.
					var pair = (toString(number) + 'e').split('e'),
						value = func(pair[0] + 'e' + (+pair[1] + precision));

					pair = (toString(value) + 'e').split('e');
					return +(pair[0] + 'e' + (+pair[1] - precision));
				}
				return func(number);
			};
		}

		/**
		 * Creates a set object of `values`.
		 *
		 * @private
		 * @param {Array} values The values to add to the set.
		 * @returns {Object} Returns the new set.
		 */
		var createSet = !(Set && (1 / setToArray(new Set([, -0]))[1]) == INFINITY) ? noop : function (values) {
			return new Set(values);
		};

		/**
		 * Creates a `_.toPairs` or `_.toPairsIn` function.
		 *
		 * @private
		 * @param {Function} keysFunc The function to get the keys of a given object.
		 * @returns {Function} Returns the new pairs function.
		 */
		function createToPairs(keysFunc) {
			return function (object) {
				var tag = getTag(object);
				if (tag == mapTag) {
					return mapToArray(object);
				}
				if (tag == setTag) {
					return setToPairs(object);
				}
				return baseToPairs(object, keysFunc(object));
			};
		}

		/**
		 * Creates a function that either curries or invokes `func` with optional
		 * `this` binding and partially applied arguments.
		 *
		 * @private
		 * @param {Function|string} func The function or method name to wrap.
		 * @param {number} bitmask The bitmask flags.
		 *    1 - `_.bind`
		 *    2 - `_.bindKey`
		 *    4 - `_.curry` or `_.curryRight` of a bound function
		 *    8 - `_.curry`
		 *   16 - `_.curryRight`
		 *   32 - `_.partial`
		 *   64 - `_.partialRight`
		 *  128 - `_.rearg`
		 *  256 - `_.ary`
		 *  512 - `_.flip`
		 * @param {*} [thisArg] The `this` binding of `func`.
		 * @param {Array} [partials] The arguments to be partially applied.
		 * @param {Array} [holders] The `partials` placeholder indexes.
		 * @param {Array} [argPos] The argument positions of the new function.
		 * @param {number} [ary] The arity cap of `func`.
		 * @param {number} [arity] The arity of `func`.
		 * @returns {Function} Returns the new wrapped function.
		 */
		function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
			var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
			if (!isBindKey && typeof func != 'function') {
				throw new TypeError(FUNC_ERROR_TEXT);
			}
			var length = partials ? partials.length : 0;
			if (!length) {
				bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
				partials = holders = undefined;
			}
			ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
			arity = arity === undefined ? arity : toInteger(arity);
			length -= holders ? holders.length : 0;

			if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
				var partialsRight = partials,
					holdersRight = holders;

				partials = holders = undefined;
			}
			var data = isBindKey ? undefined : getData(func);

			var newData = [
			  func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
			  argPos, ary, arity
			];

			if (data) {
				mergeData(newData, data);
			}
			func = newData[0];
			bitmask = newData[1];
			thisArg = newData[2];
			partials = newData[3];
			holders = newData[4];
			arity = newData[9] = newData[9] === undefined
			  ? (isBindKey ? 0 : func.length)
			  : nativeMax(newData[9] - length, 0);

			if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
				bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
			}
			if (!bitmask || bitmask == WRAP_BIND_FLAG) {
				var result = createBind(func, bitmask, thisArg);
			} else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
				result = createCurry(func, bitmask, arity);
			} else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
				result = createPartial(func, bitmask, thisArg, partials);
			} else {
				result = createHybrid.apply(undefined, newData);
			}
			var setter = data ? baseSetData : setData;
			return setWrapToString(setter(result, newData), func, bitmask);
		}

		/**
		 * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
		 * of source objects to the destination object for all destination properties
		 * that resolve to `undefined`.
		 *
		 * @private
		 * @param {*} objValue The destination value.
		 * @param {*} srcValue The source value.
		 * @param {string} key The key of the property to assign.
		 * @param {Object} object The parent object of `objValue`.
		 * @returns {*} Returns the value to assign.
		 */
		function customDefaultsAssignIn(objValue, srcValue, key, object) {
			if (objValue === undefined ||
				(eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
				return srcValue;
			}
			return objValue;
		}

		/**
		 * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
		 * objects into destination objects that are passed thru.
		 *
		 * @private
		 * @param {*} objValue The destination value.
		 * @param {*} srcValue The source value.
		 * @param {string} key The key of the property to merge.
		 * @param {Object} object The parent object of `objValue`.
		 * @param {Object} source The parent object of `srcValue`.
		 * @param {Object} [stack] Tracks traversed source values and their merged
		 *  counterparts.
		 * @returns {*} Returns the value to assign.
		 */
		function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
			if (isObject(objValue) && isObject(srcValue)) {
				// Recursively merge objects and arrays (susceptible to call stack limits).
				stack.set(srcValue, objValue);
				baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
				stack['delete'](srcValue);
			}
			return objValue;
		}

		/**
		 * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
		 * objects.
		 *
		 * @private
		 * @param {*} value The value to inspect.
		 * @param {string} key The key of the property to inspect.
		 * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
		 */
		function customOmitClone(value) {
			return isPlainObject(value) ? undefined : value;
		}

		/**
		 * A specialized version of `baseIsEqualDeep` for arrays with support for
		 * partial deep comparisons.
		 *
		 * @private
		 * @param {Array} array The array to compare.
		 * @param {Array} other The other array to compare.
		 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		 * @param {Function} customizer The function to customize comparisons.
		 * @param {Function} equalFunc The function to determine equivalents of values.
		 * @param {Object} stack Tracks traversed `array` and `other` objects.
		 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
		 */
		function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
			var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
				arrLength = array.length,
				othLength = other.length;

			if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
				return false;
			}
			// Assume cyclic values are equal.
			var stacked = stack.get(array);
			if (stacked && stack.get(other)) {
				return stacked == other;
			}
			var index = -1,
				result = true,
				seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

			stack.set(array, other);
			stack.set(other, array);

			// Ignore non-index properties.
			while (++index < arrLength) {
				var arrValue = array[index],
					othValue = other[index];

				if (customizer) {
					var compared = isPartial
					  ? customizer(othValue, arrValue, index, other, array, stack)
					  : customizer(arrValue, othValue, index, array, other, stack);
				}
				if (compared !== undefined) {
					if (compared) {
						continue;
					}
					result = false;
					break;
				}
				// Recursively compare arrays (susceptible to call stack limits).
				if (seen) {
					if (!arraySome(other, function (othValue, othIndex) {
						  if (!cacheHas(seen, othIndex) &&
							  (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
							return seen.push(othIndex);
					}
					})) {
						result = false;
						break;
					}
				} else if (!(
					  arrValue === othValue ||
						equalFunc(arrValue, othValue, bitmask, customizer, stack)
					)) {
					result = false;
					break;
				}
			}
			stack['delete'](array);
			stack['delete'](other);
			return result;
		}

		/**
		 * A specialized version of `baseIsEqualDeep` for comparing objects of
		 * the same `toStringTag`.
		 *
		 * **Note:** This function only supports comparing values with tags of
		 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
		 *
		 * @private
		 * @param {Object} object The object to compare.
		 * @param {Object} other The other object to compare.
		 * @param {string} tag The `toStringTag` of the objects to compare.
		 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		 * @param {Function} customizer The function to customize comparisons.
		 * @param {Function} equalFunc The function to determine equivalents of values.
		 * @param {Object} stack Tracks traversed `object` and `other` objects.
		 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		 */
		function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
			switch (tag) {
				case dataViewTag:
					if ((object.byteLength != other.byteLength) ||
						(object.byteOffset != other.byteOffset)) {
						return false;
					}
					object = object.buffer;
					other = other.buffer;

				case arrayBufferTag:
					if ((object.byteLength != other.byteLength) ||
						!equalFunc(new Uint8Array(object), new Uint8Array(other))) {
						return false;
					}
					return true;

				case boolTag:
				case dateTag:
				case numberTag:
					// Coerce booleans to `1` or `0` and dates to milliseconds.
					// Invalid dates are coerced to `NaN`.
					return eq(+object, +other);

				case errorTag:
					return object.name == other.name && object.message == other.message;

				case regexpTag:
				case stringTag:
					// Coerce regexes to strings and treat strings, primitives and objects,
					// as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
					// for more details.
					return object == (other + '');

				case mapTag:
					var convert = mapToArray;

				case setTag:
					var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
					convert || (convert = setToArray);

					if (object.size != other.size && !isPartial) {
						return false;
					}
					// Assume cyclic values are equal.
					var stacked = stack.get(object);
					if (stacked) {
						return stacked == other;
					}
					bitmask |= COMPARE_UNORDERED_FLAG;

					// Recursively compare objects (susceptible to call stack limits).
					stack.set(object, other);
					var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
					stack['delete'](object);
					return result;

				case symbolTag:
					if (symbolValueOf) {
						return symbolValueOf.call(object) == symbolValueOf.call(other);
					}
			}
			return false;
		}

		/**
		 * A specialized version of `baseIsEqualDeep` for objects with support for
		 * partial deep comparisons.
		 *
		 * @private
		 * @param {Object} object The object to compare.
		 * @param {Object} other The other object to compare.
		 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		 * @param {Function} customizer The function to customize comparisons.
		 * @param {Function} equalFunc The function to determine equivalents of values.
		 * @param {Object} stack Tracks traversed `object` and `other` objects.
		 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		 */
		function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
			var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
				objProps = getAllKeys(object),
				objLength = objProps.length,
				othProps = getAllKeys(other),
				othLength = othProps.length;

			if (objLength != othLength && !isPartial) {
				return false;
			}
			var index = objLength;
			while (index--) {
				var key = objProps[index];
				if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
					return false;
				}
			}
			// Assume cyclic values are equal.
			var stacked = stack.get(object);
			if (stacked && stack.get(other)) {
				return stacked == other;
			}
			var result = true;
			stack.set(object, other);
			stack.set(other, object);

			var skipCtor = isPartial;
			while (++index < objLength) {
				key = objProps[index];
				var objValue = object[key],
					othValue = other[key];

				if (customizer) {
					var compared = isPartial
					  ? customizer(othValue, objValue, key, other, object, stack)
					  : customizer(objValue, othValue, key, object, other, stack);
				}
				// Recursively compare objects (susceptible to call stack limits).
				if (!(compared === undefined
					  ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
					  : compared
					)) {
					result = false;
					break;
				}
				skipCtor || (skipCtor = key == 'constructor');
			}
			if (result && !skipCtor) {
				var objCtor = object.constructor,
					othCtor = other.constructor;

				// Non `Object` object instances with different constructors are not equal.
				if (objCtor != othCtor &&
					('constructor' in object && 'constructor' in other) &&
					!(typeof objCtor == 'function' && objCtor instanceof objCtor &&
					  typeof othCtor == 'function' && othCtor instanceof othCtor)) {
					result = false;
				}
			}
			stack['delete'](object);
			stack['delete'](other);
			return result;
		}

		/**
		 * A specialized version of `baseRest` which flattens the rest array.
		 *
		 * @private
		 * @param {Function} func The function to apply a rest parameter to.
		 * @returns {Function} Returns the new function.
		 */
		function flatRest(func) {
			return setToString(overRest(func, undefined, flatten), func + '');
		}

		/**
		 * Creates an array of own enumerable property names and symbols of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names and symbols.
		 */
		function getAllKeys(object) {
			return baseGetAllKeys(object, keys, getSymbols);
		}

		/**
		 * Creates an array of own and inherited enumerable property names and
		 * symbols of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names and symbols.
		 */
		function getAllKeysIn(object) {
			return baseGetAllKeys(object, keysIn, getSymbolsIn);
		}

		/**
		 * Gets metadata for `func`.
		 *
		 * @private
		 * @param {Function} func The function to query.
		 * @returns {*} Returns the metadata for `func`.
		 */
		var getData = !metaMap ? noop : function (func) {
			return metaMap.get(func);
		};

		/**
		 * Gets the name of `func`.
		 *
		 * @private
		 * @param {Function} func The function to query.
		 * @returns {string} Returns the function name.
		 */
		function getFuncName(func) {
			var result = (func.name + ''),
				array = realNames[result],
				length = hasOwnProperty.call(realNames, result) ? array.length : 0;

			while (length--) {
				var data = array[length],
					otherFunc = data.func;
				if (otherFunc == null || otherFunc == func) {
					return data.name;
				}
			}
			return result;
		}

		/**
		 * Gets the argument placeholder value for `func`.
		 *
		 * @private
		 * @param {Function} func The function to inspect.
		 * @returns {*} Returns the placeholder value.
		 */
		function getHolder(func) {
			var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
			return object.placeholder;
		}

		/**
		 * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
		 * this function returns the custom method, otherwise it returns `baseIteratee`.
		 * If arguments are provided, the chosen function is invoked with them and
		 * its result is returned.
		 *
		 * @private
		 * @param {*} [value] The value to convert to an iteratee.
		 * @param {number} [arity] The arity of the created iteratee.
		 * @returns {Function} Returns the chosen function or its result.
		 */
		function getIteratee() {
			var result = lodash.iteratee || iteratee;
			result = result === iteratee ? baseIteratee : result;
			return arguments.length ? result(arguments[0], arguments[1]) : result;
		}

		/**
		 * Gets the data for `map`.
		 *
		 * @private
		 * @param {Object} map The map to query.
		 * @param {string} key The reference key.
		 * @returns {*} Returns the map data.
		 */
		function getMapData(map, key) {
			var data = map.__data__;
			return isKeyable(key)
			  ? data[typeof key == 'string' ? 'string' : 'hash']
			  : data.map;
		}

		/**
		 * Gets the property names, values, and compare flags of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the match data of `object`.
		 */
		function getMatchData(object) {
			var result = keys(object),
				length = result.length;

			while (length--) {
				var key = result[length],
					value = object[key];

				result[length] = [key, value, isStrictComparable(value)];
			}
			return result;
		}

		/**
		 * Gets the native function at `key` of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @param {string} key The key of the method to get.
		 * @returns {*} Returns the function if it's native, else `undefined`.
		 */
		function getNative(object, key) {
			var value = getValue(object, key);
			return baseIsNative(value) ? value : undefined;
		}

		/**
		 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @returns {string} Returns the raw `toStringTag`.
		 */
		function getRawTag(value) {
			var isOwn = hasOwnProperty.call(value, symToStringTag),
				tag = value[symToStringTag];

			try {
				value[symToStringTag] = undefined;
				var unmasked = true;
			} catch (e) { }

			var result = nativeObjectToString.call(value);
			if (unmasked) {
				if (isOwn) {
					value[symToStringTag] = tag;
				} else {
					delete value[symToStringTag];
				}
			}
			return result;
		}

		/**
		 * Creates an array of the own enumerable symbols of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of symbols.
		 */
		var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
			if (object == null) {
				return [];
			}
			object = Object(object);
			return arrayFilter(nativeGetSymbols(object), function (symbol) {
				return propertyIsEnumerable.call(object, symbol);
			});
		};

		/**
		 * Creates an array of the own and inherited enumerable symbols of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of symbols.
		 */
		var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
			var result = [];
			while (object) {
				arrayPush(result, getSymbols(object));
				object = getPrototype(object);
			}
			return result;
		};

		/**
		 * Gets the `toStringTag` of `value`.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @returns {string} Returns the `toStringTag`.
		 */
		var getTag = baseGetTag;

		// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
		if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
			(Map && getTag(new Map) != mapTag) ||
			(Promise && getTag(Promise.resolve()) != promiseTag) ||
			(Set && getTag(new Set) != setTag) ||
			(WeakMap && getTag(new WeakMap) != weakMapTag)) {
			getTag = function (value) {
				var result = baseGetTag(value),
					Ctor = result == objectTag ? value.constructor : undefined,
					ctorString = Ctor ? toSource(Ctor) : '';

				if (ctorString) {
					switch (ctorString) {
						case dataViewCtorString: return dataViewTag;
						case mapCtorString: return mapTag;
						case promiseCtorString: return promiseTag;
						case setCtorString: return setTag;
						case weakMapCtorString: return weakMapTag;
					}
				}
				return result;
			};
		}

		/**
		 * Gets the view, applying any `transforms` to the `start` and `end` positions.
		 *
		 * @private
		 * @param {number} start The start of the view.
		 * @param {number} end The end of the view.
		 * @param {Array} transforms The transformations to apply to the view.
		 * @returns {Object} Returns an object containing the `start` and `end`
		 *  positions of the view.
		 */
		function getView(start, end, transforms) {
			var index = -1,
				length = transforms.length;

			while (++index < length) {
				var data = transforms[index],
					size = data.size;

				switch (data.type) {
					case 'drop': start += size; break;
					case 'dropRight': end -= size; break;
					case 'take': end = nativeMin(end, start + size); break;
					case 'takeRight': start = nativeMax(start, end - size); break;
				}
			}
			return { 'start': start, 'end': end };
		}

		/**
		 * Extracts wrapper details from the `source` body comment.
		 *
		 * @private
		 * @param {string} source The source to inspect.
		 * @returns {Array} Returns the wrapper details.
		 */
		function getWrapDetails(source) {
			var match = source.match(reWrapDetails);
			return match ? match[1].split(reSplitDetails) : [];
		}

		/**
		 * Checks if `path` exists on `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @param {Array|string} path The path to check.
		 * @param {Function} hasFunc The function to check properties.
		 * @returns {boolean} Returns `true` if `path` exists, else `false`.
		 */
		function hasPath(object, path, hasFunc) {
			path = castPath(path, object);

			var index = -1,
				length = path.length,
				result = false;

			while (++index < length) {
				var key = toKey(path[index]);
				if (!(result = object != null && hasFunc(object, key))) {
					break;
				}
				object = object[key];
			}
			if (result || ++index != length) {
				return result;
			}
			length = object == null ? 0 : object.length;
			return !!length && isLength(length) && isIndex(key, length) &&
			  (isArray(object) || isArguments(object));
		}

		/**
		 * Initializes an array clone.
		 *
		 * @private
		 * @param {Array} array The array to clone.
		 * @returns {Array} Returns the initialized clone.
		 */
		function initCloneArray(array) {
			var length = array.length,
				result = array.constructor(length);

			// Add properties assigned by `RegExp#exec`.
			if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
				result.index = array.index;
				result.input = array.input;
			}
			return result;
		}

		/**
		 * Initializes an object clone.
		 *
		 * @private
		 * @param {Object} object The object to clone.
		 * @returns {Object} Returns the initialized clone.
		 */
		function initCloneObject(object) {
			return (typeof object.constructor == 'function' && !isPrototype(object))
			  ? baseCreate(getPrototype(object))
			  : {};
		}

		/**
		 * Initializes an object clone based on its `toStringTag`.
		 *
		 * **Note:** This function only supports cloning values with tags of
		 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
		 *
		 * @private
		 * @param {Object} object The object to clone.
		 * @param {string} tag The `toStringTag` of the object to clone.
		 * @param {Function} cloneFunc The function to clone values.
		 * @param {boolean} [isDeep] Specify a deep clone.
		 * @returns {Object} Returns the initialized clone.
		 */
		function initCloneByTag(object, tag, cloneFunc, isDeep) {
			var Ctor = object.constructor;
			switch (tag) {
				case arrayBufferTag:
					return cloneArrayBuffer(object);

				case boolTag:
				case dateTag:
					return new Ctor(+object);

				case dataViewTag:
					return cloneDataView(object, isDeep);

				case float32Tag: case float64Tag:
				case int8Tag: case int16Tag: case int32Tag:
				case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
					return cloneTypedArray(object, isDeep);

				case mapTag:
					return cloneMap(object, isDeep, cloneFunc);

				case numberTag:
				case stringTag:
					return new Ctor(object);

				case regexpTag:
					return cloneRegExp(object);

				case setTag:
					return cloneSet(object, isDeep, cloneFunc);

				case symbolTag:
					return cloneSymbol(object);
			}
		}

		/**
		 * Inserts wrapper `details` in a comment at the top of the `source` body.
		 *
		 * @private
		 * @param {string} source The source to modify.
		 * @returns {Array} details The details to insert.
		 * @returns {string} Returns the modified source.
		 */
		function insertWrapDetails(source, details) {
			var length = details.length;
			if (!length) {
				return source;
			}
			var lastIndex = length - 1;
			details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
			details = details.join(length > 2 ? ', ' : ' ');
			return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
		}

		/**
		 * Checks if `value` is a flattenable `arguments` object or array.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
		 */
		function isFlattenable(value) {
			return isArray(value) || isArguments(value) ||
			  !!(spreadableSymbol && value && value[spreadableSymbol]);
		}

		/**
		 * Checks if `value` is a valid array-like index.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
		 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
		 */
		function isIndex(value, length) {
			length = length == null ? MAX_SAFE_INTEGER : length;
			return !!length &&
			  (typeof value == 'number' || reIsUint.test(value)) &&
			  (value > -1 && value % 1 == 0 && value < length);
		}

		/**
		 * Checks if the given arguments are from an iteratee call.
		 *
		 * @private
		 * @param {*} value The potential iteratee value argument.
		 * @param {*} index The potential iteratee index or key argument.
		 * @param {*} object The potential iteratee object argument.
		 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
		 *  else `false`.
		 */
		function isIterateeCall(value, index, object) {
			if (!isObject(object)) {
				return false;
			}
			var type = typeof index;
			if (type == 'number'
				  ? (isArrayLike(object) && isIndex(index, object.length))
				  : (type == 'string' && index in object)
				) {
				return eq(object[index], value);
			}
			return false;
		}

		/**
		 * Checks if `value` is a property name and not a property path.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @param {Object} [object] The object to query keys on.
		 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
		 */
		function isKey(value, object) {
			if (isArray(value)) {
				return false;
			}
			var type = typeof value;
			if (type == 'number' || type == 'symbol' || type == 'boolean' ||
				value == null || isSymbol(value)) {
				return true;
			}
			return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
			  (object != null && value in Object(object));
		}

		/**
		 * Checks if `value` is suitable for use as unique object key.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
		 */
		function isKeyable(value) {
			var type = typeof value;
			return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
			  ? (value !== '__proto__')
			  : (value === null);
		}

		/**
		 * Checks if `func` has a lazy counterpart.
		 *
		 * @private
		 * @param {Function} func The function to check.
		 * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
		 *  else `false`.
		 */
		function isLaziable(func) {
			var funcName = getFuncName(func),
				other = lodash[funcName];

			if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
				return false;
			}
			if (func === other) {
				return true;
			}
			var data = getData(other);
			return !!data && func === data[0];
		}

		/**
		 * Checks if `func` has its source masked.
		 *
		 * @private
		 * @param {Function} func The function to check.
		 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
		 */
		function isMasked(func) {
			return !!maskSrcKey && (maskSrcKey in func);
		}

		/**
		 * Checks if `func` is capable of being masked.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
		 */
		var isMaskable = coreJsData ? isFunction : stubFalse;

		/**
		 * Checks if `value` is likely a prototype object.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
		 */
		function isPrototype(value) {
			var Ctor = value && value.constructor,
				proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

			return value === proto;
		}

		/**
		 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` if suitable for strict
		 *  equality comparisons, else `false`.
		 */
		function isStrictComparable(value) {
			return value === value && !isObject(value);
		}

		/**
		 * A specialized version of `matchesProperty` for source values suitable
		 * for strict equality comparisons, i.e. `===`.
		 *
		 * @private
		 * @param {string} key The key of the property to get.
		 * @param {*} srcValue The value to match.
		 * @returns {Function} Returns the new spec function.
		 */
		function matchesStrictComparable(key, srcValue) {
			return function (object) {
				if (object == null) {
					return false;
				}
				return object[key] === srcValue &&
				  (srcValue !== undefined || (key in Object(object)));
			};
		}

		/**
		 * A specialized version of `_.memoize` which clears the memoized function's
		 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
		 *
		 * @private
		 * @param {Function} func The function to have its output memoized.
		 * @returns {Function} Returns the new memoized function.
		 */
		function memoizeCapped(func) {
			var result = memoize(func, function (key) {
				if (cache.size === MAX_MEMOIZE_SIZE) {
					cache.clear();
				}
				return key;
			});

			var cache = result.cache;
			return result;
		}

		/**
		 * Merges the function metadata of `source` into `data`.
		 *
		 * Merging metadata reduces the number of wrappers used to invoke a function.
		 * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
		 * may be applied regardless of execution order. Methods like `_.ary` and
		 * `_.rearg` modify function arguments, making the order in which they are
		 * executed important, preventing the merging of metadata. However, we make
		 * an exception for a safe combined case where curried functions have `_.ary`
		 * and or `_.rearg` applied.
		 *
		 * @private
		 * @param {Array} data The destination metadata.
		 * @param {Array} source The source metadata.
		 * @returns {Array} Returns `data`.
		 */
		function mergeData(data, source) {
			var bitmask = data[1],
				srcBitmask = source[1],
				newBitmask = bitmask | srcBitmask,
				isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

			var isCombo =
			  ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
			  ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
			  ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

			// Exit early if metadata can't be merged.
			if (!(isCommon || isCombo)) {
				return data;
			}
			// Use source `thisArg` if available.
			if (srcBitmask & WRAP_BIND_FLAG) {
				data[2] = source[2];
				// Set when currying a bound function.
				newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
			}
			// Compose partial arguments.
			var value = source[3];
			if (value) {
				var partials = data[3];
				data[3] = partials ? composeArgs(partials, value, source[4]) : value;
				data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
			}
			// Compose partial right arguments.
			value = source[5];
			if (value) {
				partials = data[5];
				data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
				data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
			}
			// Use source `argPos` if available.
			value = source[7];
			if (value) {
				data[7] = value;
			}
			// Use source `ary` if it's smaller.
			if (srcBitmask & WRAP_ARY_FLAG) {
				data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
			}
			// Use source `arity` if one is not provided.
			if (data[9] == null) {
				data[9] = source[9];
			}
			// Use source `func` and merge bitmasks.
			data[0] = source[0];
			data[1] = newBitmask;

			return data;
		}

		/**
		 * This function is like
		 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
		 * except that it includes inherited enumerable properties.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 */
		function nativeKeysIn(object) {
			var result = [];
			if (object != null) {
				for (var key in Object(object)) {
					result.push(key);
				}
			}
			return result;
		}

		/**
		 * Converts `value` to a string using `Object.prototype.toString`.
		 *
		 * @private
		 * @param {*} value The value to convert.
		 * @returns {string} Returns the converted string.
		 */
		function objectToString(value) {
			return nativeObjectToString.call(value);
		}

		/**
		 * A specialized version of `baseRest` which transforms the rest array.
		 *
		 * @private
		 * @param {Function} func The function to apply a rest parameter to.
		 * @param {number} [start=func.length-1] The start position of the rest parameter.
		 * @param {Function} transform The rest array transform.
		 * @returns {Function} Returns the new function.
		 */
		function overRest(func, start, transform) {
			start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
			return function () {
				var args = arguments,
					index = -1,
					length = nativeMax(args.length - start, 0),
					array = Array(length);

				while (++index < length) {
					array[index] = args[start + index];
				}
				index = -1;
				var otherArgs = Array(start + 1);
				while (++index < start) {
					otherArgs[index] = args[index];
				}
				otherArgs[start] = transform(array);
				return apply(func, this, otherArgs);
			};
		}

		/**
		 * Gets the parent value at `path` of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @param {Array} path The path to get the parent value of.
		 * @returns {*} Returns the parent value.
		 */
		function parent(object, path) {
			return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
		}

		/**
		 * Reorder `array` according to the specified indexes where the element at
		 * the first index is assigned as the first element, the element at
		 * the second index is assigned as the second element, and so on.
		 *
		 * @private
		 * @param {Array} array The array to reorder.
		 * @param {Array} indexes The arranged array indexes.
		 * @returns {Array} Returns `array`.
		 */
		function reorder(array, indexes) {
			var arrLength = array.length,
				length = nativeMin(indexes.length, arrLength),
				oldArray = copyArray(array);

			while (length--) {
				var index = indexes[length];
				array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
			}
			return array;
		}

		/**
		 * Sets metadata for `func`.
		 *
		 * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
		 * period of time, it will trip its breaker and transition to an identity
		 * function to avoid garbage collection pauses in V8. See
		 * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
		 * for more details.
		 *
		 * @private
		 * @param {Function} func The function to associate metadata with.
		 * @param {*} data The metadata.
		 * @returns {Function} Returns `func`.
		 */
		var setData = shortOut(baseSetData);

		/**
		 * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
		 *
		 * @private
		 * @param {Function} func The function to delay.
		 * @param {number} wait The number of milliseconds to delay invocation.
		 * @returns {number|Object} Returns the timer id or timeout object.
		 */
		var setTimeout = ctxSetTimeout || function (func, wait) {
			return root.setTimeout(func, wait);
		};

		/**
		 * Sets the `toString` method of `func` to return `string`.
		 *
		 * @private
		 * @param {Function} func The function to modify.
		 * @param {Function} string The `toString` result.
		 * @returns {Function} Returns `func`.
		 */
		var setToString = shortOut(baseSetToString);

		/**
		 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
		 * with wrapper details in a comment at the top of the source body.
		 *
		 * @private
		 * @param {Function} wrapper The function to modify.
		 * @param {Function} reference The reference function.
		 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		 * @returns {Function} Returns `wrapper`.
		 */
		function setWrapToString(wrapper, reference, bitmask) {
			var source = (reference + '');
			return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
		}

		/**
		 * Creates a function that'll short out and invoke `identity` instead
		 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
		 * milliseconds.
		 *
		 * @private
		 * @param {Function} func The function to restrict.
		 * @returns {Function} Returns the new shortable function.
		 */
		function shortOut(func) {
			var count = 0,
				lastCalled = 0;

			return function () {
				var stamp = nativeNow(),
					remaining = HOT_SPAN - (stamp - lastCalled);

				lastCalled = stamp;
				if (remaining > 0) {
					if (++count >= HOT_COUNT) {
						return arguments[0];
					}
				} else {
					count = 0;
				}
				return func.apply(undefined, arguments);
			};
		}

		/**
		 * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
		 *
		 * @private
		 * @param {Array} array The array to shuffle.
		 * @param {number} [size=array.length] The size of `array`.
		 * @returns {Array} Returns `array`.
		 */
		function shuffleSelf(array, size) {
			var index = -1,
				length = array.length,
				lastIndex = length - 1;

			size = size === undefined ? length : size;
			while (++index < size) {
				var rand = baseRandom(index, lastIndex),
					value = array[rand];

				array[rand] = array[index];
				array[index] = value;
			}
			array.length = size;
			return array;
		}

		/**
		 * Converts `string` to a property path array.
		 *
		 * @private
		 * @param {string} string The string to convert.
		 * @returns {Array} Returns the property path array.
		 */
		var stringToPath = memoizeCapped(function (string) {
			var result = [];
			if (reLeadingDot.test(string)) {
				result.push('');
			}
			string.replace(rePropName, function (match, number, quote, string) {
				result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
			});
			return result;
		});

		/**
		 * Converts `value` to a string key if it's not a string or symbol.
		 *
		 * @private
		 * @param {*} value The value to inspect.
		 * @returns {string|symbol} Returns the key.
		 */
		function toKey(value) {
			if (typeof value == 'string' || isSymbol(value)) {
				return value;
			}
			var result = (value + '');
			return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
		}

		/**
		 * Converts `func` to its source code.
		 *
		 * @private
		 * @param {Function} func The function to convert.
		 * @returns {string} Returns the source code.
		 */
		function toSource(func) {
			if (func != null) {
				try {
					return funcToString.call(func);
				} catch (e) { }
				try {
					return (func + '');
				} catch (e) { }
			}
			return '';
		}

		/**
		 * Updates wrapper `details` based on `bitmask` flags.
		 *
		 * @private
		 * @returns {Array} details The details to modify.
		 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		 * @returns {Array} Returns `details`.
		 */
		function updateWrapDetails(details, bitmask) {
			arrayEach(wrapFlags, function (pair) {
				var value = '_.' + pair[0];
				if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
					details.push(value);
				}
			});
			return details.sort();
		}

		/**
		 * Creates a clone of `wrapper`.
		 *
		 * @private
		 * @param {Object} wrapper The wrapper to clone.
		 * @returns {Object} Returns the cloned wrapper.
		 */
		function wrapperClone(wrapper) {
			if (wrapper instanceof LazyWrapper) {
				return wrapper.clone();
			}
			var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
			result.__actions__ = copyArray(wrapper.__actions__);
			result.__index__ = wrapper.__index__;
			result.__values__ = wrapper.__values__;
			return result;
		}

		/*------------------------------------------------------------------------*/

		/**
		 * Creates an array of elements split into groups the length of `size`.
		 * If `array` can't be split evenly, the final chunk will be the remaining
		 * elements.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Array
		 * @param {Array} array The array to process.
		 * @param {number} [size=1] The length of each chunk
		 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		 * @returns {Array} Returns the new array of chunks.
		 * @example
		 *
		 * _.chunk(['a', 'b', 'c', 'd'], 2);
		 * // => [['a', 'b'], ['c', 'd']]
		 *
		 * _.chunk(['a', 'b', 'c', 'd'], 3);
		 * // => [['a', 'b', 'c'], ['d']]
		 */
		function chunk(array, size, guard) {
			if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
				size = 1;
			} else {
				size = nativeMax(toInteger(size), 0);
			}
			var length = array == null ? 0 : array.length;
			if (!length || size < 1) {
				return [];
			}
			var index = 0,
				resIndex = 0,
				result = Array(nativeCeil(length / size));

			while (index < length) {
				result[resIndex++] = baseSlice(array, index, (index += size));
			}
			return result;
		}

		/**
		 * Creates an array with all falsey values removed. The values `false`, `null`,
		 * `0`, `""`, `undefined`, and `NaN` are falsey.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Array
		 * @param {Array} array The array to compact.
		 * @returns {Array} Returns the new array of filtered values.
		 * @example
		 *
		 * _.compact([0, 1, false, 2, '', 3]);
		 * // => [1, 2, 3]
		 */
		function compact(array) {
			var index = -1,
				length = array == null ? 0 : array.length,
				resIndex = 0,
				result = [];

			while (++index < length) {
				var value = array[index];
				if (value) {
					result[resIndex++] = value;
				}
			}
			return result;
		}

		/**
		 * Creates a new array concatenating `array` with any additional arrays
		 * and/or values.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Array
		 * @param {Array} array The array to concatenate.
		 * @param {...*} [values] The values to concatenate.
		 * @returns {Array} Returns the new concatenated array.
		 * @example
		 *
		 * var array = [1];
		 * var other = _.concat(array, 2, [3], [[4]]);
		 *
		 * console.log(other);
		 * // => [1, 2, 3, [4]]
		 *
		 * console.log(array);
		 * // => [1]
		 */
		function concat() {
			var length = arguments.length;
			if (!length) {
				return [];
			}
			var args = Array(length - 1),
				array = arguments[0],
				index = length;

			while (index--) {
				args[index - 1] = arguments[index];
			}
			return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
		}

		/**
		 * Creates an array of `array` values not included in the other given arrays
		 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		 * for equality comparisons. The order and references of result values are
		 * determined by the first array.
		 *
		 * **Note:** Unlike `_.pullAll`, this method returns a new array.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Array
		 * @param {Array} array The array to inspect.
		 * @param {...Array} [values] The values to exclude.
		 * @returns {Array} Returns the new array of filtered values.
		 * @see _.without, _.xor
		 * @example
		 *
		 * _.difference([2, 1], [2, 3]);
		 * // => [1]
		 */
		var difference = baseRest(function (array, values) {
			return isArrayLikeObject(array)
			  ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
			  : [];
		});

		/**
		 * This method is like `_.difference` except that it accepts `iteratee` which
		 * is invoked for each element of `array` and `values` to generate the criterion
		 * by which they're compared. The order and references of result values are
		 * determined by the first array. The iteratee is invoked with one argument:
		 * (value).
		 *
		 * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Array
		 * @param {Array} array The array to inspect.
		 * @param {...Array} [values] The values to exclude.
		 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		 * @returns {Array} Returns the new array of filtered values.
		 * @example
		 *
		 * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
		 * // => [1.2]
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
		 * // => [{ 'x': 2 }]
		 */
		var differenceBy = baseRest(function (array, values) {
			var iteratee = last(values);
			if (isArrayLikeObject(iteratee)) {
				iteratee = undefined;
			}
			return isArrayLikeObject(array)
			  ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
			  : [];
		});

		/**
		 * This method is like `_.difference` except that it accepts `comparator`
		 * which is invoked to compare elements of `array` to `values`. The order and
		 * references of result values are determined by the first array. The comparator
		 * is invoked with two arguments: (arrVal, othVal).
		 *
		 * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Array
		 * @param {Array} array The array to inspect.
		 * @param {...Array} [values] The values to exclude.
		 * @param {Function} [comparator] The comparator invoked per element.
		 * @returns {Array} Returns the new array of filtered values.
		 * @example
		 *
		 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
		 *
		 * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
		 * // => [{ 'x': 2, 'y': 1 }]
		 */
		var differenceWith = baseRest(function (array, values) {
			var comparator = last(values);
			if (isArrayLikeObject(comparator)) {
				comparator = undefined;
			}
			return isArrayLikeObject(array)
			  ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
			  : [];
		});

		/**
		 * Creates a slice of `array` with `n` elements dropped from the beginning.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.5.0
		 * @category Array
		 * @param {Array} array The array to query.
		 * @param {number} [n=1] The number of elements to drop.
		 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		 * @returns {Array} Returns the slice of `array`.
		 * @example
		 *
		 * _.drop([1, 2, 3]);
		 * // => [2, 3]
		 *
		 * _.drop([1, 2, 3], 2);
		 * // => [3]
		 *
		 * _.drop([1, 2, 3], 5);
		 * // => []
		 *
		 * _.drop([1, 2, 3], 0);
		 * // => [1, 2, 3]
		 */
		function drop(array, n, guard) {
			var length = array == null ? 0 : array.length;
			if (!length) {
				return [];
			}
			n = (guard || n === undefined) ? 1 : toInteger(n);
			return baseSlice(array, n < 0 ? 0 : n, length);
		}

		/**
		 * Creates a slice of `array` with `n` elements dropped from the end.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Array
		 * @param {Array} array The array to query.
		 * @param {number} [n=1] The number of elements to drop.
		 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		 * @returns {Array} Returns the slice of `array`.
		 * @example
		 *
		 * _.dropRight([1, 2, 3]);
		 * // => [1, 2]
		 *
		 * _.dropRight([1, 2, 3], 2);
		 * // => [1]
		 *
		 * _.dropRight([1, 2, 3], 5);
		 * // => []
		 *
		 * _.dropRight([1, 2, 3], 0);
		 * // => [1, 2, 3]
		 */
		function dropRight(array, n, guard) {
			var length = array == null ? 0 : array.length;
			if (!length) {
				return [];
			}
			n = (guard || n === undefined) ? 1 : toInteger(n);
			n = length - n;
			return baseSlice(array, 0, n < 0 ? 0 : n);
		}

		/**
		 * Creates a slice of `array` excluding elements dropped from the end.
		 * Elements are dropped until `predicate` returns falsey. The predicate is
		 * invoked with three arguments: (value, index, array).
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Array
		 * @param {Array} array The array to query.
		 * @param {Function} [predicate=_.identity] The function invoked per iteration.
		 * @returns {Array} Returns the slice of `array`.
		 * @example
		 *
		 * var users = [
		 *   { 'user': 'barney',  'active': true },
		 *   { 'user': 'fred',    'active': false },
		 *   { 'user': 'pebbles', 'active': false }
		 * ];
		 *
		 * _.dropRightWhile(users, function(o) { return !o.active; });
		 * // => objects for ['barney']
		 *
		 * // The `_.matches` iteratee shorthand.
		 * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
		 * // => objects for ['barney', 'fred']
		 *
		 * // The `_.matchesProperty` iteratee shorthand.
		 * _.dropRightWhile(users, ['active', false]);
		 * // => objects for ['barney']
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.dropRightWhile(users, 'active');
		 * // => objects for ['barney', 'fred', 'pebbles']
		 */
		function dropRightWhile(array, predicate) {
			return (array && array.length)
			  ? baseWhile(array, getIteratee(predicate, 3), true, true)
			  : [];
		}

		/**
		 * Creates a slice of `array` excluding elements dropped from the beginning.
		 * Elements are dropped until `predicate` returns falsey. The predicate is
		 * invoked with three arguments: (value, index, array).
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Array
		 * @param {Array} array The array to query.
		 * @param {Function} [predicate=_.identity] The function invoked per iteration.
		 * @returns {Array} Returns the slice of `array`.
		 * @example
		 *
		 * var users = [
		 *   { 'user': 'barney',  'active': false },
		 *   { 'user': 'fred',    'active': false },
		 *   { 'user': 'pebbles', 'active': true }
		 * ];
		 *
		 * _.dropWhile(users, function(o) { return !o.active; });
		 * // => objects for ['pebbles']
		 *
		 * // The `_.matches` iteratee shorthand.
		 * _.dropWhile(users, { 'user': 'barney', 'active': false });
		 * // => objects for ['fred', 'pebbles']
		 *
		 * // The `_.matchesProperty` iteratee shorthand.
		 * _.dropWhile(users, ['active', false]);
		 * // => objects for ['pebbles']
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.dropWhile(users, 'active');
		 * // => objects for ['barney', 'fred', 'pebbles']
		 */
		function dropWhile(array, predicate) {
			return (array && array.length)
			  ? baseWhile(array, getIteratee(predicate, 3), true)
			  : [];
		}

		/**
		 * Fills elements of `array` with `value` from `start` up to, but not
		 * including, `end`.
		 *
		 * **Note:** This method mutates `array`.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.2.0
		 * @category Array
		 * @param {Array} array The array to fill.
		 * @param {*} value The value to fill `array` with.
		 * @param {number} [start=0] The start position.
		 * @param {number} [end=array.length] The end position.
		 * @returns {Array} Returns `array`.
		 * @example
		 *
		 * var array = [1, 2, 3];
		 *
		 * _.fill(array, 'a');
		 * console.log(array);
		 * // => ['a', 'a', 'a']
		 *
		 * _.fill(Array(3), 2);
		 * // => [2, 2, 2]
		 *
		 * _.fill([4, 6, 8, 10], '*', 1, 3);
		 * // => [4, '*', '*', 10]
		 */
		function fill(array, value, start, end) {
			var length = array == null ? 0 : array.length;
			if (!length) {
				return [];
			}
			if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
				start = 0;
				end = length;
			}
			return baseFill(array, value, start, end);
		}

		/**
		 * This method is like `_.find` except that it returns the index of the first
		 * element `predicate` returns truthy for instead of the element itself.
		 *
		 * @static
		 * @memberOf _
		 * @since 1.1.0
		 * @category Array
		 * @param {Array} array The array to inspect.
		 * @param {Function} [predicate=_.identity] The function invoked per iteration.
		 * @param {number} [fromIndex=0] The index to search from.
		 * @returns {number} Returns the index of the found element, else `-1`.
		 * @example
		 *
		 * var users = [
		 *   { 'user': 'barney',  'active': false },
		 *   { 'user': 'fred',    'active': false },
		 *   { 'user': 'pebbles', 'active': true }
		 * ];
		 *
		 * _.findIndex(users, function(o) { return o.user == 'barney'; });
		 * // => 0
		 *
		 * // The `_.matches` iteratee shorthand.
		 * _.findIndex(users, { 'user': 'fred', 'active': false });
		 * // => 1
		 *
		 * // The `_.matchesProperty` iteratee shorthand.
		 * _.findIndex(users, ['active', false]);
		 * // => 0
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.findIndex(users, 'active');
		 * // => 2
		 */
		function findIndex(array, predicate, fromIndex) {
			var length = array == null ? 0 : array.length;
			if (!length) {
				return -1;
			}
			var index = fromIndex == null ? 0 : toInteger(fromIndex);
			if (index < 0) {
				index = nativeMax(length + index, 0);
			}
			return baseFindIndex(array, getIteratee(predicate, 3), index);
		}

		/**
		 * This method is like `_.findIndex` except that it iterates over elements
		 * of `collection` from right to left.
		 *
		 * @static
		 * @memberOf _
		 * @since 2.0.0
		 * @category Array
		 * @param {Array} array The array to inspect.
		 * @param {Function} [predicate=_.identity] The function invoked per iteration.
		 * @param {number} [fromIndex=array.length-1] The index to search from.
		 * @returns {number} Returns the index of the found element, else `-1`.
		 * @example
		 *
		 * var users = [
		 *   { 'user': 'barney',  'active': true },
		 *   { 'user': 'fred',    'active': false },
		 *   { 'user': 'pebbles', 'active': false }
		 * ];
		 *
		 * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
		 * // => 2
		 *
		 * // The `_.matches` iteratee shorthand.
		 * _.findLastIndex(users, { 'user': 'barney', 'active': true });
		 * // => 0
		 *
		 * // The `_.matchesProperty` iteratee shorthand.
		 * _.findLastIndex(users, ['active', false]);
		 * // => 2
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.findLastIndex(users, 'active');
		 * // => 0
		 */
		function findLastIndex(array, predicate, fromIndex) {
			var length = array == null ? 0 : array.length;
			if (!length) {
				return -1;
			}
			var index = length - 1;
			if (fromIndex !== undefined) {
				index = toInteger(fromIndex);
				index = fromIndex < 0
				  ? nativeMax(length + index, 0)
				  : nativeMin(index, length - 1);
			}
			return baseFindIndex(array, getIteratee(predicate, 3), index, true);
		}

		/**
		 * Flattens `array` a single level deep.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Array
		 * @param {Array} array The array to flatten.
		 * @returns {Array} Returns the new flattened array.
		 * @example
		 *
		 * _.flatten([1, [2, [3, [4]], 5]]);
		 * // => [1, 2, [3, [4]], 5]
		 */
		function flatten(array) {
			var length = array == null ? 0 : array.length;
			return length ? baseFlatten(array, 1) : [];
		}

		/**
		 * Recursively flattens `array`.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Array
		 * @param {Array} array The array to flatten.
		 * @returns {Array} Returns the new flattened array.
		 * @example
		 *
		 * _.flattenDeep([1, [2, [3, [4]], 5]]);
		 * // => [1, 2, 3, 4, 5]
		 */
		function flattenDeep(array) {
			var length = array == null ? 0 : array.length;
			return length ? baseFlatten(array, INFINITY) : [];
		}

		/**
		 * Recursively flatten `array` up to `depth` times.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.4.0
		 * @category Array
		 * @param {Array} array The array to flatten.
		 * @param {number} [depth=1] The maximum recursion depth.
		 * @returns {Array} Returns the new flattened array.
		 * @example
		 *
		 * var array = [1, [2, [3, [4]], 5]];
		 *
		 * _.flattenDepth(array, 1);
		 * // => [1, 2, [3, [4]], 5]
		 *
		 * _.flattenDepth(array, 2);
		 * // => [1, 2, 3, [4], 5]
		 */
		function flattenDepth(array, depth) {
			var length = array == null ? 0 : array.length;
			if (!length) {
				return [];
			}
			depth = depth === undefined ? 1 : toInteger(depth);
			return baseFlatten(array, depth);
		}

		/**
		 * The inverse of `_.toPairs`; this method returns an object composed
		 * from key-value `pairs`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Array
		 * @param {Array} pairs The key-value pairs.
		 * @returns {Object} Returns the new object.
		 * @example
		 *
		 * _.fromPairs([['a', 1], ['b', 2]]);
		 * // => { 'a': 1, 'b': 2 }
		 */
		function fromPairs(pairs) {
			var index = -1,
				length = pairs == null ? 0 : pairs.length,
				result = {};

			while (++index < length) {
				var pair = pairs[index];
				result[pair[0]] = pair[1];
			}
			return result;
		}

		/**
		 * Gets the first element of `array`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @alias first
		 * @category Array
		 * @param {Array} array The array to query.
		 * @returns {*} Returns the first element of `array`.
		 * @example
		 *
		 * _.head([1, 2, 3]);
		 * // => 1
		 *
		 * _.head([]);
		 * // => undefined
		 */
		function head(array) {
			return (array && array.length) ? array[0] : undefined;
		}

		/**
		 * Gets the index at which the first occurrence of `value` is found in `array`
		 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		 * for equality comparisons. If `fromIndex` is negative, it's used as the
		 * offset from the end of `array`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Array
		 * @param {Array} array The array to inspect.
		 * @param {*} value The value to search for.
		 * @param {number} [fromIndex=0] The index to search from.
		 * @returns {number} Returns the index of the matched value, else `-1`.
		 * @example
		 *
		 * _.indexOf([1, 2, 1, 2], 2);
		 * // => 1
		 *
		 * // Search from the `fromIndex`.
		 * _.indexOf([1, 2, 1, 2], 2, 2);
		 * // => 3
		 */
		function indexOf(array, value, fromIndex) {
			var length = array == null ? 0 : array.length;
			if (!length) {
				return -1;
			}
			var index = fromIndex == null ? 0 : toInteger(fromIndex);
			if (index < 0) {
				index = nativeMax(length + index, 0);
			}
			return baseIndexOf(array, value, index);
		}

		/**
		 * Gets all but the last element of `array`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Array
		 * @param {Array} array The array to query.
		 * @returns {Array} Returns the slice of `array`.
		 * @example
		 *
		 * _.initial([1, 2, 3]);
		 * // => [1, 2]
		 */
		function initial(array) {
			var length = array == null ? 0 : array.length;
			return length ? baseSlice(array, 0, -1) : [];
		}

		/**
		 * Creates an array of unique values that are included in all given arrays
		 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		 * for equality comparisons. The order and references of result values are
		 * determined by the first array.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Array
		 * @param {...Array} [arrays] The arrays to inspect.
		 * @returns {Array} Returns the new array of intersecting values.
		 * @example
		 *
		 * _.intersection([2, 1], [2, 3]);
		 * // => [2]
		 */
		var intersection = baseRest(function (arrays) {
			var mapped = arrayMap(arrays, castArrayLikeObject);
			return (mapped.length && mapped[0] === arrays[0])
			  ? baseIntersection(mapped)
			  : [];
		});

		/**
		 * This method is like `_.intersection` except that it accepts `iteratee`
		 * which is invoked for each element of each `arrays` to generate the criterion
		 * by which they're compared. The order and references of result values are
		 * determined by the first array. The iteratee is invoked with one argument:
		 * (value).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Array
		 * @param {...Array} [arrays] The arrays to inspect.
		 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		 * @returns {Array} Returns the new array of intersecting values.
		 * @example
		 *
		 * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
		 * // => [2.1]
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
		 * // => [{ 'x': 1 }]
		 */
		var intersectionBy = baseRest(function (arrays) {
			var iteratee = last(arrays),
				mapped = arrayMap(arrays, castArrayLikeObject);

			if (iteratee === last(mapped)) {
				iteratee = undefined;
			} else {
				mapped.pop();
			}
			return (mapped.length && mapped[0] === arrays[0])
			  ? baseIntersection(mapped, getIteratee(iteratee, 2))
			  : [];
		});

		/**
		 * This method is like `_.intersection` except that it accepts `comparator`
		 * which is invoked to compare elements of `arrays`. The order and references
		 * of result values are determined by the first array. The comparator is
		 * invoked with two arguments: (arrVal, othVal).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Array
		 * @param {...Array} [arrays] The arrays to inspect.
		 * @param {Function} [comparator] The comparator invoked per element.
		 * @returns {Array} Returns the new array of intersecting values.
		 * @example
		 *
		 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
		 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
		 *
		 * _.intersectionWith(objects, others, _.isEqual);
		 * // => [{ 'x': 1, 'y': 2 }]
		 */
		var intersectionWith = baseRest(function (arrays) {
			var comparator = last(arrays),
				mapped = arrayMap(arrays, castArrayLikeObject);

			comparator = typeof comparator == 'function' ? comparator : undefined;
			if (comparator) {
				mapped.pop();
			}
			return (mapped.length && mapped[0] === arrays[0])
			  ? baseIntersection(mapped, undefined, comparator)
			  : [];
		});

		/**
		 * Converts all elements in `array` into a string separated by `separator`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Array
		 * @param {Array} array The array to convert.
		 * @param {string} [separator=','] The element separator.
		 * @returns {string} Returns the joined string.
		 * @example
		 *
		 * _.join(['a', 'b', 'c'], '~');
		 * // => 'a~b~c'
		 */
		function join(array, separator) {
			return array == null ? '' : nativeJoin.call(array, separator);
		}

		/**
		 * Gets the last element of `array`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Array
		 * @param {Array} array The array to query.
		 * @returns {*} Returns the last element of `array`.
		 * @example
		 *
		 * _.last([1, 2, 3]);
		 * // => 3
		 */
		function last(array) {
			var length = array == null ? 0 : array.length;
			return length ? array[length - 1] : undefined;
		}

		/**
		 * This method is like `_.indexOf` except that it iterates over elements of
		 * `array` from right to left.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Array
		 * @param {Array} array The array to inspect.
		 * @param {*} value The value to search for.
		 * @param {number} [fromIndex=array.length-1] The index to search from.
		 * @returns {number} Returns the index of the matched value, else `-1`.
		 * @example
		 *
		 * _.lastIndexOf([1, 2, 1, 2], 2);
		 * // => 3
		 *
		 * // Search from the `fromIndex`.
		 * _.lastIndexOf([1, 2, 1, 2], 2, 2);
		 * // => 1
		 */
		function lastIndexOf(array, value, fromIndex) {
			var length = array == null ? 0 : array.length;
			if (!length) {
				return -1;
			}
			var index = length;
			if (fromIndex !== undefined) {
				index = toInteger(fromIndex);
				index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
			}
			return value === value
			  ? strictLastIndexOf(array, value, index)
			  : baseFindIndex(array, baseIsNaN, index, true);
		}

		/**
		 * Gets the element at index `n` of `array`. If `n` is negative, the nth
		 * element from the end is returned.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.11.0
		 * @category Array
		 * @param {Array} array The array to query.
		 * @param {number} [n=0] The index of the element to return.
		 * @returns {*} Returns the nth element of `array`.
		 * @example
		 *
		 * var array = ['a', 'b', 'c', 'd'];
		 *
		 * _.nth(array, 1);
		 * // => 'b'
		 *
		 * _.nth(array, -2);
		 * // => 'c';
		 */
		function nth(array, n) {
			return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
		}

		/**
		 * Removes all given values from `array` using
		 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		 * for equality comparisons.
		 *
		 * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
		 * to remove elements from an array by predicate.
		 *
		 * @static
		 * @memberOf _
		 * @since 2.0.0
		 * @category Array
		 * @param {Array} array The array to modify.
		 * @param {...*} [values] The values to remove.
		 * @returns {Array} Returns `array`.
		 * @example
		 *
		 * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
		 *
		 * _.pull(array, 'a', 'c');
		 * console.log(array);
		 * // => ['b', 'b']
		 */
		var pull = baseRest(pullAll);

		/**
		 * This method is like `_.pull` except that it accepts an array of values to remove.
		 *
		 * **Note:** Unlike `_.difference`, this method mutates `array`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Array
		 * @param {Array} array The array to modify.
		 * @param {Array} values The values to remove.
		 * @returns {Array} Returns `array`.
		 * @example
		 *
		 * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
		 *
		 * _.pullAll(array, ['a', 'c']);
		 * console.log(array);
		 * // => ['b', 'b']
		 */
		function pullAll(array, values) {
			return (array && array.length && values && values.length)
			  ? basePullAll(array, values)
			  : array;
		}

		/**
		 * This method is like `_.pullAll` except that it accepts `iteratee` which is
		 * invoked for each element of `array` and `values` to generate the criterion
		 * by which they're compared. The iteratee is invoked with one argument: (value).
		 *
		 * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Array
		 * @param {Array} array The array to modify.
		 * @param {Array} values The values to remove.
		 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		 * @returns {Array} Returns `array`.
		 * @example
		 *
		 * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
		 *
		 * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
		 * console.log(array);
		 * // => [{ 'x': 2 }]
		 */
		function pullAllBy(array, values, iteratee) {
			return (array && array.length && values && values.length)
			  ? basePullAll(array, values, getIteratee(iteratee, 2))
			  : array;
		}

		/**
		 * This method is like `_.pullAll` except that it accepts `comparator` which
		 * is invoked to compare elements of `array` to `values`. The comparator is
		 * invoked with two arguments: (arrVal, othVal).
		 *
		 * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.6.0
		 * @category Array
		 * @param {Array} array The array to modify.
		 * @param {Array} values The values to remove.
		 * @param {Function} [comparator] The comparator invoked per element.
		 * @returns {Array} Returns `array`.
		 * @example
		 *
		 * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
		 *
		 * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
		 * console.log(array);
		 * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
		 */
		function pullAllWith(array, values, comparator) {
			return (array && array.length && values && values.length)
			  ? basePullAll(array, values, undefined, comparator)
			  : array;
		}

		/**
		 * Removes elements from `array` corresponding to `indexes` and returns an
		 * array of removed elements.
		 *
		 * **Note:** Unlike `_.at`, this method mutates `array`.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Array
		 * @param {Array} array The array to modify.
		 * @param {...(number|number[])} [indexes] The indexes of elements to remove.
		 * @returns {Array} Returns the new array of removed elements.
		 * @example
		 *
		 * var array = ['a', 'b', 'c', 'd'];
		 * var pulled = _.pullAt(array, [1, 3]);
		 *
		 * console.log(array);
		 * // => ['a', 'c']
		 *
		 * console.log(pulled);
		 * // => ['b', 'd']
		 */
		var pullAt = flatRest(function (array, indexes) {
			var length = array == null ? 0 : array.length,
				result = baseAt(array, indexes);

			basePullAt(array, arrayMap(indexes, function (index) {
				return isIndex(index, length) ? +index : index;
			}).sort(compareAscending));

			return result;
		});

		/**
		 * Removes all elements from `array` that `predicate` returns truthy for
		 * and returns an array of the removed elements. The predicate is invoked
		 * with three arguments: (value, index, array).
		 *
		 * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
		 * to pull elements from an array by value.
		 *
		 * @static
		 * @memberOf _
		 * @since 2.0.0
		 * @category Array
		 * @param {Array} array The array to modify.
		 * @param {Function} [predicate=_.identity] The function invoked per iteration.
		 * @returns {Array} Returns the new array of removed elements.
		 * @example
		 *
		 * var array = [1, 2, 3, 4];
		 * var evens = _.remove(array, function(n) {
		 *   return n % 2 == 0;
		 * });
		 *
		 * console.log(array);
		 * // => [1, 3]
		 *
		 * console.log(evens);
		 * // => [2, 4]
		 */
		function remove(array, predicate) {
			var result = [];
			if (!(array && array.length)) {
				return result;
			}
			var index = -1,
				indexes = [],
				length = array.length;

			predicate = getIteratee(predicate, 3);
			while (++index < length) {
				var value = array[index];
				if (predicate(value, index, array)) {
					result.push(value);
					indexes.push(index);
				}
			}
			basePullAt(array, indexes);
			return result;
		}

		/**
		 * Reverses `array` so that the first element becomes the last, the second
		 * element becomes the second to last, and so on.
		 *
		 * **Note:** This method mutates `array` and is based on
		 * [`Array#reverse`](https://mdn.io/Array/reverse).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Array
		 * @param {Array} array The array to modify.
		 * @returns {Array} Returns `array`.
		 * @example
		 *
		 * var array = [1, 2, 3];
		 *
		 * _.reverse(array);
		 * // => [3, 2, 1]
		 *
		 * console.log(array);
		 * // => [3, 2, 1]
		 */
		function reverse(array) {
			return array == null ? array : nativeReverse.call(array);
		}

		/**
		 * Creates a slice of `array` from `start` up to, but not including, `end`.
		 *
		 * **Note:** This method is used instead of
		 * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
		 * returned.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Array
		 * @param {Array} array The array to slice.
		 * @param {number} [start=0] The start position.
		 * @param {number} [end=array.length] The end position.
		 * @returns {Array} Returns the slice of `array`.
		 */
		function slice(array, start, end) {
			var length = array == null ? 0 : array.length;
			if (!length) {
				return [];
			}
			if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
				start = 0;
				end = length;
			}
			else {
				start = start == null ? 0 : toInteger(start);
				end = end === undefined ? length : toInteger(end);
			}
			return baseSlice(array, start, end);
		}

		/**
		 * Uses a binary search to determine the lowest index at which `value`
		 * should be inserted into `array` in order to maintain its sort order.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Array
		 * @param {Array} array The sorted array to inspect.
		 * @param {*} value The value to evaluate.
		 * @returns {number} Returns the index at which `value` should be inserted
		 *  into `array`.
		 * @example
		 *
		 * _.sortedIndex([30, 50], 40);
		 * // => 1
		 */
		function sortedIndex(array, value) {
			return baseSortedIndex(array, value);
		}

		/**
		 * This method is like `_.sortedIndex` except that it accepts `iteratee`
		 * which is invoked for `value` and each element of `array` to compute their
		 * sort ranking. The iteratee is invoked with one argument: (value).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Array
		 * @param {Array} array The sorted array to inspect.
		 * @param {*} value The value to evaluate.
		 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		 * @returns {number} Returns the index at which `value` should be inserted
		 *  into `array`.
		 * @example
		 *
		 * var objects = [{ 'x': 4 }, { 'x': 5 }];
		 *
		 * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
		 * // => 0
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
		 * // => 0
		 */
		function sortedIndexBy(array, value, iteratee) {
			return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
		}

		/**
		 * This method is like `_.indexOf` except that it performs a binary
		 * search on a sorted `array`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Array
		 * @param {Array} array The array to inspect.
		 * @param {*} value The value to search for.
		 * @returns {number} Returns the index of the matched value, else `-1`.
		 * @example
		 *
		 * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
		 * // => 1
		 */
		function sortedIndexOf(array, value) {
			var length = array == null ? 0 : array.length;
			if (length) {
				var index = baseSortedIndex(array, value);
				if (index < length && eq(array[index], value)) {
					return index;
				}
			}
			return -1;
		}

		/**
		 * This method is like `_.sortedIndex` except that it returns the highest
		 * index at which `value` should be inserted into `array` in order to
		 * maintain its sort order.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Array
		 * @param {Array} array The sorted array to inspect.
		 * @param {*} value The value to evaluate.
		 * @returns {number} Returns the index at which `value` should be inserted
		 *  into `array`.
		 * @example
		 *
		 * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
		 * // => 4
		 */
		function sortedLastIndex(array, value) {
			return baseSortedIndex(array, value, true);
		}

		/**
		 * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
		 * which is invoked for `value` and each element of `array` to compute their
		 * sort ranking. The iteratee is invoked with one argument: (value).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Array
		 * @param {Array} array The sorted array to inspect.
		 * @param {*} value The value to evaluate.
		 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		 * @returns {number} Returns the index at which `value` should be inserted
		 *  into `array`.
		 * @example
		 *
		 * var objects = [{ 'x': 4 }, { 'x': 5 }];
		 *
		 * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
		 * // => 1
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
		 * // => 1
		 */
		function sortedLastIndexBy(array, value, iteratee) {
			return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
		}

		/**
		 * This method is like `_.lastIndexOf` except that it performs a binary
		 * search on a sorted `array`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Array
		 * @param {Array} array The array to inspect.
		 * @param {*} value The value to search for.
		 * @returns {number} Returns the index of the matched value, else `-1`.
		 * @example
		 *
		 * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
		 * // => 3
		 */
		function sortedLastIndexOf(array, value) {
			var length = array == null ? 0 : array.length;
			if (length) {
				var index = baseSortedIndex(array, value, true) - 1;
				if (eq(array[index], value)) {
					return index;
				}
			}
			return -1;
		}

		/**
		 * This method is like `_.uniq` except that it's designed and optimized
		 * for sorted arrays.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Array
		 * @param {Array} array The array to inspect.
		 * @returns {Array} Returns the new duplicate free array.
		 * @example
		 *
		 * _.sortedUniq([1, 1, 2]);
		 * // => [1, 2]
		 */
		function sortedUniq(array) {
			return (array && array.length)
			  ? baseSortedUniq(array)
			  : [];
		}

		/**
		 * This method is like `_.uniqBy` except that it's designed and optimized
		 * for sorted arrays.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Array
		 * @param {Array} array The array to inspect.
		 * @param {Function} [iteratee] The iteratee invoked per element.
		 * @returns {Array} Returns the new duplicate free array.
		 * @example
		 *
		 * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
		 * // => [1.1, 2.3]
		 */
		function sortedUniqBy(array, iteratee) {
			return (array && array.length)
			  ? baseSortedUniq(array, getIteratee(iteratee, 2))
			  : [];
		}

		/**
		 * Gets all but the first element of `array`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Array
		 * @param {Array} array The array to query.
		 * @returns {Array} Returns the slice of `array`.
		 * @example
		 *
		 * _.tail([1, 2, 3]);
		 * // => [2, 3]
		 */
		function tail(array) {
			var length = array == null ? 0 : array.length;
			return length ? baseSlice(array, 1, length) : [];
		}

		/**
		 * Creates a slice of `array` with `n` elements taken from the beginning.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Array
		 * @param {Array} array The array to query.
		 * @param {number} [n=1] The number of elements to take.
		 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		 * @returns {Array} Returns the slice of `array`.
		 * @example
		 *
		 * _.take([1, 2, 3]);
		 * // => [1]
		 *
		 * _.take([1, 2, 3], 2);
		 * // => [1, 2]
		 *
		 * _.take([1, 2, 3], 5);
		 * // => [1, 2, 3]
		 *
		 * _.take([1, 2, 3], 0);
		 * // => []
		 */
		function take(array, n, guard) {
			if (!(array && array.length)) {
				return [];
			}
			n = (guard || n === undefined) ? 1 : toInteger(n);
			return baseSlice(array, 0, n < 0 ? 0 : n);
		}

		/**
		 * Creates a slice of `array` with `n` elements taken from the end.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Array
		 * @param {Array} array The array to query.
		 * @param {number} [n=1] The number of elements to take.
		 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		 * @returns {Array} Returns the slice of `array`.
		 * @example
		 *
		 * _.takeRight([1, 2, 3]);
		 * // => [3]
		 *
		 * _.takeRight([1, 2, 3], 2);
		 * // => [2, 3]
		 *
		 * _.takeRight([1, 2, 3], 5);
		 * // => [1, 2, 3]
		 *
		 * _.takeRight([1, 2, 3], 0);
		 * // => []
		 */
		function takeRight(array, n, guard) {
			var length = array == null ? 0 : array.length;
			if (!length) {
				return [];
			}
			n = (guard || n === undefined) ? 1 : toInteger(n);
			n = length - n;
			return baseSlice(array, n < 0 ? 0 : n, length);
		}

		/**
		 * Creates a slice of `array` with elements taken from the end. Elements are
		 * taken until `predicate` returns falsey. The predicate is invoked with
		 * three arguments: (value, index, array).
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Array
		 * @param {Array} array The array to query.
		 * @param {Function} [predicate=_.identity] The function invoked per iteration.
		 * @returns {Array} Returns the slice of `array`.
		 * @example
		 *
		 * var users = [
		 *   { 'user': 'barney',  'active': true },
		 *   { 'user': 'fred',    'active': false },
		 *   { 'user': 'pebbles', 'active': false }
		 * ];
		 *
		 * _.takeRightWhile(users, function(o) { return !o.active; });
		 * // => objects for ['fred', 'pebbles']
		 *
		 * // The `_.matches` iteratee shorthand.
		 * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
		 * // => objects for ['pebbles']
		 *
		 * // The `_.matchesProperty` iteratee shorthand.
		 * _.takeRightWhile(users, ['active', false]);
		 * // => objects for ['fred', 'pebbles']
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.takeRightWhile(users, 'active');
		 * // => []
		 */
		function takeRightWhile(array, predicate) {
			return (array && array.length)
			  ? baseWhile(array, getIteratee(predicate, 3), false, true)
			  : [];
		}

		/**
		 * Creates a slice of `array` with elements taken from the beginning. Elements
		 * are taken until `predicate` returns falsey. The predicate is invoked with
		 * three arguments: (value, index, array).
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Array
		 * @param {Array} array The array to query.
		 * @param {Function} [predicate=_.identity] The function invoked per iteration.
		 * @returns {Array} Returns the slice of `array`.
		 * @example
		 *
		 * var users = [
		 *   { 'user': 'barney',  'active': false },
		 *   { 'user': 'fred',    'active': false },
		 *   { 'user': 'pebbles', 'active': true }
		 * ];
		 *
		 * _.takeWhile(users, function(o) { return !o.active; });
		 * // => objects for ['barney', 'fred']
		 *
		 * // The `_.matches` iteratee shorthand.
		 * _.takeWhile(users, { 'user': 'barney', 'active': false });
		 * // => objects for ['barney']
		 *
		 * // The `_.matchesProperty` iteratee shorthand.
		 * _.takeWhile(users, ['active', false]);
		 * // => objects for ['barney', 'fred']
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.takeWhile(users, 'active');
		 * // => []
		 */
		function takeWhile(array, predicate) {
			return (array && array.length)
			  ? baseWhile(array, getIteratee(predicate, 3))
			  : [];
		}

		/**
		 * Creates an array of unique values, in order, from all given arrays using
		 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		 * for equality comparisons.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Array
		 * @param {...Array} [arrays] The arrays to inspect.
		 * @returns {Array} Returns the new array of combined values.
		 * @example
		 *
		 * _.union([2], [1, 2]);
		 * // => [2, 1]
		 */
		var union = baseRest(function (arrays) {
			return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
		});

		/**
		 * This method is like `_.union` except that it accepts `iteratee` which is
		 * invoked for each element of each `arrays` to generate the criterion by
		 * which uniqueness is computed. Result values are chosen from the first
		 * array in which the value occurs. The iteratee is invoked with one argument:
		 * (value).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Array
		 * @param {...Array} [arrays] The arrays to inspect.
		 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		 * @returns {Array} Returns the new array of combined values.
		 * @example
		 *
		 * _.unionBy([2.1], [1.2, 2.3], Math.floor);
		 * // => [2.1, 1.2]
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
		 * // => [{ 'x': 1 }, { 'x': 2 }]
		 */
		var unionBy = baseRest(function (arrays) {
			var iteratee = last(arrays);
			if (isArrayLikeObject(iteratee)) {
				iteratee = undefined;
			}
			return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
		});

		/**
		 * This method is like `_.union` except that it accepts `comparator` which
		 * is invoked to compare elements of `arrays`. Result values are chosen from
		 * the first array in which the value occurs. The comparator is invoked
		 * with two arguments: (arrVal, othVal).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Array
		 * @param {...Array} [arrays] The arrays to inspect.
		 * @param {Function} [comparator] The comparator invoked per element.
		 * @returns {Array} Returns the new array of combined values.
		 * @example
		 *
		 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
		 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
		 *
		 * _.unionWith(objects, others, _.isEqual);
		 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
		 */
		var unionWith = baseRest(function (arrays) {
			var comparator = last(arrays);
			comparator = typeof comparator == 'function' ? comparator : undefined;
			return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
		});

		/**
		 * Creates a duplicate-free version of an array, using
		 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		 * for equality comparisons, in which only the first occurrence of each element
		 * is kept. The order of result values is determined by the order they occur
		 * in the array.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Array
		 * @param {Array} array The array to inspect.
		 * @returns {Array} Returns the new duplicate free array.
		 * @example
		 *
		 * _.uniq([2, 1, 2]);
		 * // => [2, 1]
		 */
		function uniq(array) {
			return (array && array.length) ? baseUniq(array) : [];
		}

		/**
		 * This method is like `_.uniq` except that it accepts `iteratee` which is
		 * invoked for each element in `array` to generate the criterion by which
		 * uniqueness is computed. The order of result values is determined by the
		 * order they occur in the array. The iteratee is invoked with one argument:
		 * (value).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Array
		 * @param {Array} array The array to inspect.
		 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		 * @returns {Array} Returns the new duplicate free array.
		 * @example
		 *
		 * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
		 * // => [2.1, 1.2]
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
		 * // => [{ 'x': 1 }, { 'x': 2 }]
		 */
		function uniqBy(array, iteratee) {
			return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
		}

		/**
		 * This method is like `_.uniq` except that it accepts `comparator` which
		 * is invoked to compare elements of `array`. The order of result values is
		 * determined by the order they occur in the array.The comparator is invoked
		 * with two arguments: (arrVal, othVal).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Array
		 * @param {Array} array The array to inspect.
		 * @param {Function} [comparator] The comparator invoked per element.
		 * @returns {Array} Returns the new duplicate free array.
		 * @example
		 *
		 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
		 *
		 * _.uniqWith(objects, _.isEqual);
		 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
		 */
		function uniqWith(array, comparator) {
			comparator = typeof comparator == 'function' ? comparator : undefined;
			return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
		}

		/**
		 * This method is like `_.zip` except that it accepts an array of grouped
		 * elements and creates an array regrouping the elements to their pre-zip
		 * configuration.
		 *
		 * @static
		 * @memberOf _
		 * @since 1.2.0
		 * @category Array
		 * @param {Array} array The array of grouped elements to process.
		 * @returns {Array} Returns the new array of regrouped elements.
		 * @example
		 *
		 * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
		 * // => [['a', 1, true], ['b', 2, false]]
		 *
		 * _.unzip(zipped);
		 * // => [['a', 'b'], [1, 2], [true, false]]
		 */
		function unzip(array) {
			if (!(array && array.length)) {
				return [];
			}
			var length = 0;
			array = arrayFilter(array, function (group) {
				if (isArrayLikeObject(group)) {
					length = nativeMax(group.length, length);
					return true;
				}
			});
			return baseTimes(length, function (index) {
				return arrayMap(array, baseProperty(index));
			});
		}

		/**
		 * This method is like `_.unzip` except that it accepts `iteratee` to specify
		 * how regrouped values should be combined. The iteratee is invoked with the
		 * elements of each group: (...group).
		 *
		 * @static
		 * @memberOf _
		 * @since 3.8.0
		 * @category Array
		 * @param {Array} array The array of grouped elements to process.
		 * @param {Function} [iteratee=_.identity] The function to combine
		 *  regrouped values.
		 * @returns {Array} Returns the new array of regrouped elements.
		 * @example
		 *
		 * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
		 * // => [[1, 10, 100], [2, 20, 200]]
		 *
		 * _.unzipWith(zipped, _.add);
		 * // => [3, 30, 300]
		 */
		function unzipWith(array, iteratee) {
			if (!(array && array.length)) {
				return [];
			}
			var result = unzip(array);
			if (iteratee == null) {
				return result;
			}
			return arrayMap(result, function (group) {
				return apply(iteratee, undefined, group);
			});
		}

		/**
		 * Creates an array excluding all given values using
		 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		 * for equality comparisons.
		 *
		 * **Note:** Unlike `_.pull`, this method returns a new array.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Array
		 * @param {Array} array The array to inspect.
		 * @param {...*} [values] The values to exclude.
		 * @returns {Array} Returns the new array of filtered values.
		 * @see _.difference, _.xor
		 * @example
		 *
		 * _.without([2, 1, 2, 3], 1, 2);
		 * // => [3]
		 */
		var without = baseRest(function (array, values) {
			return isArrayLikeObject(array)
			  ? baseDifference(array, values)
			  : [];
		});

		/**
		 * Creates an array of unique values that is the
		 * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
		 * of the given arrays. The order of result values is determined by the order
		 * they occur in the arrays.
		 *
		 * @static
		 * @memberOf _
		 * @since 2.4.0
		 * @category Array
		 * @param {...Array} [arrays] The arrays to inspect.
		 * @returns {Array} Returns the new array of filtered values.
		 * @see _.difference, _.without
		 * @example
		 *
		 * _.xor([2, 1], [2, 3]);
		 * // => [1, 3]
		 */
		var xor = baseRest(function (arrays) {
			return baseXor(arrayFilter(arrays, isArrayLikeObject));
		});

		/**
		 * This method is like `_.xor` except that it accepts `iteratee` which is
		 * invoked for each element of each `arrays` to generate the criterion by
		 * which by which they're compared. The order of result values is determined
		 * by the order they occur in the arrays. The iteratee is invoked with one
		 * argument: (value).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Array
		 * @param {...Array} [arrays] The arrays to inspect.
		 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		 * @returns {Array} Returns the new array of filtered values.
		 * @example
		 *
		 * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
		 * // => [1.2, 3.4]
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
		 * // => [{ 'x': 2 }]
		 */
		var xorBy = baseRest(function (arrays) {
			var iteratee = last(arrays);
			if (isArrayLikeObject(iteratee)) {
				iteratee = undefined;
			}
			return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
		});

		/**
		 * This method is like `_.xor` except that it accepts `comparator` which is
		 * invoked to compare elements of `arrays`. The order of result values is
		 * determined by the order they occur in the arrays. The comparator is invoked
		 * with two arguments: (arrVal, othVal).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Array
		 * @param {...Array} [arrays] The arrays to inspect.
		 * @param {Function} [comparator] The comparator invoked per element.
		 * @returns {Array} Returns the new array of filtered values.
		 * @example
		 *
		 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
		 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
		 *
		 * _.xorWith(objects, others, _.isEqual);
		 * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
		 */
		var xorWith = baseRest(function (arrays) {
			var comparator = last(arrays);
			comparator = typeof comparator == 'function' ? comparator : undefined;
			return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
		});

		/**
		 * Creates an array of grouped elements, the first of which contains the
		 * first elements of the given arrays, the second of which contains the
		 * second elements of the given arrays, and so on.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Array
		 * @param {...Array} [arrays] The arrays to process.
		 * @returns {Array} Returns the new array of grouped elements.
		 * @example
		 *
		 * _.zip(['a', 'b'], [1, 2], [true, false]);
		 * // => [['a', 1, true], ['b', 2, false]]
		 */
		var zip = baseRest(unzip);

		/**
		 * This method is like `_.fromPairs` except that it accepts two arrays,
		 * one of property identifiers and one of corresponding values.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.4.0
		 * @category Array
		 * @param {Array} [props=[]] The property identifiers.
		 * @param {Array} [values=[]] The property values.
		 * @returns {Object} Returns the new object.
		 * @example
		 *
		 * _.zipObject(['a', 'b'], [1, 2]);
		 * // => { 'a': 1, 'b': 2 }
		 */
		function zipObject(props, values) {
			return baseZipObject(props || [], values || [], assignValue);
		}

		/**
		 * This method is like `_.zipObject` except that it supports property paths.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.1.0
		 * @category Array
		 * @param {Array} [props=[]] The property identifiers.
		 * @param {Array} [values=[]] The property values.
		 * @returns {Object} Returns the new object.
		 * @example
		 *
		 * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
		 * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
		 */
		function zipObjectDeep(props, values) {
			return baseZipObject(props || [], values || [], baseSet);
		}

		/**
		 * This method is like `_.zip` except that it accepts `iteratee` to specify
		 * how grouped values should be combined. The iteratee is invoked with the
		 * elements of each group: (...group).
		 *
		 * @static
		 * @memberOf _
		 * @since 3.8.0
		 * @category Array
		 * @param {...Array} [arrays] The arrays to process.
		 * @param {Function} [iteratee=_.identity] The function to combine
		 *  grouped values.
		 * @returns {Array} Returns the new array of grouped elements.
		 * @example
		 *
		 * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
		 *   return a + b + c;
		 * });
		 * // => [111, 222]
		 */
		var zipWith = baseRest(function (arrays) {
			var length = arrays.length,
				iteratee = length > 1 ? arrays[length - 1] : undefined;

			iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
			return unzipWith(arrays, iteratee);
		});

		/*------------------------------------------------------------------------*/

		/**
		 * Creates a `lodash` wrapper instance that wraps `value` with explicit method
		 * chain sequences enabled. The result of such sequences must be unwrapped
		 * with `_#value`.
		 *
		 * @static
		 * @memberOf _
		 * @since 1.3.0
		 * @category Seq
		 * @param {*} value The value to wrap.
		 * @returns {Object} Returns the new `lodash` wrapper instance.
		 * @example
		 *
		 * var users = [
		 *   { 'user': 'barney',  'age': 36 },
		 *   { 'user': 'fred',    'age': 40 },
		 *   { 'user': 'pebbles', 'age': 1 }
		 * ];
		 *
		 * var youngest = _
		 *   .chain(users)
		 *   .sortBy('age')
		 *   .map(function(o) {
		 *     return o.user + ' is ' + o.age;
		 *   })
		 *   .head()
		 *   .value();
		 * // => 'pebbles is 1'
		 */
		function chain(value) {
			var result = lodash(value);
			result.__chain__ = true;
			return result;
		}

		/**
		 * This method invokes `interceptor` and returns `value`. The interceptor
		 * is invoked with one argument; (value). The purpose of this method is to
		 * "tap into" a method chain sequence in order to modify intermediate results.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Seq
		 * @param {*} value The value to provide to `interceptor`.
		 * @param {Function} interceptor The function to invoke.
		 * @returns {*} Returns `value`.
		 * @example
		 *
		 * _([1, 2, 3])
		 *  .tap(function(array) {
		 *    // Mutate input array.
		 *    array.pop();
		 *  })
		 *  .reverse()
		 *  .value();
		 * // => [2, 1]
		 */
		function tap(value, interceptor) {
			interceptor(value);
			return value;
		}

		/**
		 * This method is like `_.tap` except that it returns the result of `interceptor`.
		 * The purpose of this method is to "pass thru" values replacing intermediate
		 * results in a method chain sequence.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Seq
		 * @param {*} value The value to provide to `interceptor`.
		 * @param {Function} interceptor The function to invoke.
		 * @returns {*} Returns the result of `interceptor`.
		 * @example
		 *
		 * _('  abc  ')
		 *  .chain()
		 *  .trim()
		 *  .thru(function(value) {
		 *    return [value];
		 *  })
		 *  .value();
		 * // => ['abc']
		 */
		function thru(value, interceptor) {
			return interceptor(value);
		}

		/**
		 * This method is the wrapper version of `_.at`.
		 *
		 * @name at
		 * @memberOf _
		 * @since 1.0.0
		 * @category Seq
		 * @param {...(string|string[])} [paths] The property paths to pick.
		 * @returns {Object} Returns the new `lodash` wrapper instance.
		 * @example
		 *
		 * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
		 *
		 * _(object).at(['a[0].b.c', 'a[1]']).value();
		 * // => [3, 4]
		 */
		var wrapperAt = flatRest(function (paths) {
			var length = paths.length,
				start = length ? paths[0] : 0,
				value = this.__wrapped__,
				interceptor = function (object) { return baseAt(object, paths); };

			if (length > 1 || this.__actions__.length ||
				!(value instanceof LazyWrapper) || !isIndex(start)) {
				return this.thru(interceptor);
			}
			value = value.slice(start, +start + (length ? 1 : 0));
			value.__actions__.push({
				'func': thru,
				'args': [interceptor],
				'thisArg': undefined
			});
			return new LodashWrapper(value, this.__chain__).thru(function (array) {
				if (length && !array.length) {
					array.push(undefined);
				}
				return array;
			});
		});

		/**
		 * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
		 *
		 * @name chain
		 * @memberOf _
		 * @since 0.1.0
		 * @category Seq
		 * @returns {Object} Returns the new `lodash` wrapper instance.
		 * @example
		 *
		 * var users = [
		 *   { 'user': 'barney', 'age': 36 },
		 *   { 'user': 'fred',   'age': 40 }
		 * ];
		 *
		 * // A sequence without explicit chaining.
		 * _(users).head();
		 * // => { 'user': 'barney', 'age': 36 }
		 *
		 * // A sequence with explicit chaining.
		 * _(users)
		 *   .chain()
		 *   .head()
		 *   .pick('user')
		 *   .value();
		 * // => { 'user': 'barney' }
		 */
		function wrapperChain() {
			return chain(this);
		}

		/**
		 * Executes the chain sequence and returns the wrapped result.
		 *
		 * @name commit
		 * @memberOf _
		 * @since 3.2.0
		 * @category Seq
		 * @returns {Object} Returns the new `lodash` wrapper instance.
		 * @example
		 *
		 * var array = [1, 2];
		 * var wrapped = _(array).push(3);
		 *
		 * console.log(array);
		 * // => [1, 2]
		 *
		 * wrapped = wrapped.commit();
		 * console.log(array);
		 * // => [1, 2, 3]
		 *
		 * wrapped.last();
		 * // => 3
		 *
		 * console.log(array);
		 * // => [1, 2, 3]
		 */
		function wrapperCommit() {
			return new LodashWrapper(this.value(), this.__chain__);
		}

		/**
		 * Gets the next value on a wrapped object following the
		 * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
		 *
		 * @name next
		 * @memberOf _
		 * @since 4.0.0
		 * @category Seq
		 * @returns {Object} Returns the next iterator value.
		 * @example
		 *
		 * var wrapped = _([1, 2]);
		 *
		 * wrapped.next();
		 * // => { 'done': false, 'value': 1 }
		 *
		 * wrapped.next();
		 * // => { 'done': false, 'value': 2 }
		 *
		 * wrapped.next();
		 * // => { 'done': true, 'value': undefined }
		 */
		function wrapperNext() {
			if (this.__values__ === undefined) {
				this.__values__ = toArray(this.value());
			}
			var done = this.__index__ >= this.__values__.length,
				value = done ? undefined : this.__values__[this.__index__++];

			return { 'done': done, 'value': value };
		}

		/**
		 * Enables the wrapper to be iterable.
		 *
		 * @name Symbol.iterator
		 * @memberOf _
		 * @since 4.0.0
		 * @category Seq
		 * @returns {Object} Returns the wrapper object.
		 * @example
		 *
		 * var wrapped = _([1, 2]);
		 *
		 * wrapped[Symbol.iterator]() === wrapped;
		 * // => true
		 *
		 * Array.from(wrapped);
		 * // => [1, 2]
		 */
		function wrapperToIterator() {
			return this;
		}

		/**
		 * Creates a clone of the chain sequence planting `value` as the wrapped value.
		 *
		 * @name plant
		 * @memberOf _
		 * @since 3.2.0
		 * @category Seq
		 * @param {*} value The value to plant.
		 * @returns {Object} Returns the new `lodash` wrapper instance.
		 * @example
		 *
		 * function square(n) {
		 *   return n * n;
		 * }
		 *
		 * var wrapped = _([1, 2]).map(square);
		 * var other = wrapped.plant([3, 4]);
		 *
		 * other.value();
		 * // => [9, 16]
		 *
		 * wrapped.value();
		 * // => [1, 4]
		 */
		function wrapperPlant(value) {
			var result,
				parent = this;

			while (parent instanceof baseLodash) {
				var clone = wrapperClone(parent);
				clone.__index__ = 0;
				clone.__values__ = undefined;
				if (result) {
					previous.__wrapped__ = clone;
				} else {
					result = clone;
				}
				var previous = clone;
				parent = parent.__wrapped__;
			}
			previous.__wrapped__ = value;
			return result;
		}

		/**
		 * This method is the wrapper version of `_.reverse`.
		 *
		 * **Note:** This method mutates the wrapped array.
		 *
		 * @name reverse
		 * @memberOf _
		 * @since 0.1.0
		 * @category Seq
		 * @returns {Object} Returns the new `lodash` wrapper instance.
		 * @example
		 *
		 * var array = [1, 2, 3];
		 *
		 * _(array).reverse().value()
		 * // => [3, 2, 1]
		 *
		 * console.log(array);
		 * // => [3, 2, 1]
		 */
		function wrapperReverse() {
			var value = this.__wrapped__;
			if (value instanceof LazyWrapper) {
				var wrapped = value;
				if (this.__actions__.length) {
					wrapped = new LazyWrapper(this);
				}
				wrapped = wrapped.reverse();
				wrapped.__actions__.push({
					'func': thru,
					'args': [reverse],
					'thisArg': undefined
				});
				return new LodashWrapper(wrapped, this.__chain__);
			}
			return this.thru(reverse);
		}

		/**
		 * Executes the chain sequence to resolve the unwrapped value.
		 *
		 * @name value
		 * @memberOf _
		 * @since 0.1.0
		 * @alias toJSON, valueOf
		 * @category Seq
		 * @returns {*} Returns the resolved unwrapped value.
		 * @example
		 *
		 * _([1, 2, 3]).value();
		 * // => [1, 2, 3]
		 */
		function wrapperValue() {
			return baseWrapperValue(this.__wrapped__, this.__actions__);
		}

		/*------------------------------------------------------------------------*/

		/**
		 * Creates an object composed of keys generated from the results of running
		 * each element of `collection` thru `iteratee`. The corresponding value of
		 * each key is the number of times the key was returned by `iteratee`. The
		 * iteratee is invoked with one argument: (value).
		 *
		 * @static
		 * @memberOf _
		 * @since 0.5.0
		 * @category Collection
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
		 * @returns {Object} Returns the composed aggregate object.
		 * @example
		 *
		 * _.countBy([6.1, 4.2, 6.3], Math.floor);
		 * // => { '4': 1, '6': 2 }
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.countBy(['one', 'two', 'three'], 'length');
		 * // => { '3': 2, '5': 1 }
		 */
		var countBy = createAggregator(function (result, value, key) {
			if (hasOwnProperty.call(result, key)) {
				++result[key];
			} else {
				baseAssignValue(result, key, 1);
			}
		});

		/**
		 * Checks if `predicate` returns truthy for **all** elements of `collection`.
		 * Iteration is stopped once `predicate` returns falsey. The predicate is
		 * invoked with three arguments: (value, index|key, collection).
		 *
		 * **Note:** This method returns `true` for
		 * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
		 * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
		 * elements of empty collections.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Collection
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} [predicate=_.identity] The function invoked per iteration.
		 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		 * @returns {boolean} Returns `true` if all elements pass the predicate check,
		 *  else `false`.
		 * @example
		 *
		 * _.every([true, 1, null, 'yes'], Boolean);
		 * // => false
		 *
		 * var users = [
		 *   { 'user': 'barney', 'age': 36, 'active': false },
		 *   { 'user': 'fred',   'age': 40, 'active': false }
		 * ];
		 *
		 * // The `_.matches` iteratee shorthand.
		 * _.every(users, { 'user': 'barney', 'active': false });
		 * // => false
		 *
		 * // The `_.matchesProperty` iteratee shorthand.
		 * _.every(users, ['active', false]);
		 * // => true
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.every(users, 'active');
		 * // => false
		 */
		function every(collection, predicate, guard) {
			var func = isArray(collection) ? arrayEvery : baseEvery;
			if (guard && isIterateeCall(collection, predicate, guard)) {
				predicate = undefined;
			}
			return func(collection, getIteratee(predicate, 3));
		}

		/**
		 * Iterates over elements of `collection`, returning an array of all elements
		 * `predicate` returns truthy for. The predicate is invoked with three
		 * arguments: (value, index|key, collection).
		 *
		 * **Note:** Unlike `_.remove`, this method returns a new array.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Collection
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} [predicate=_.identity] The function invoked per iteration.
		 * @returns {Array} Returns the new filtered array.
		 * @see _.reject
		 * @example
		 *
		 * var users = [
		 *   { 'user': 'barney', 'age': 36, 'active': true },
		 *   { 'user': 'fred',   'age': 40, 'active': false }
		 * ];
		 *
		 * _.filter(users, function(o) { return !o.active; });
		 * // => objects for ['fred']
		 *
		 * // The `_.matches` iteratee shorthand.
		 * _.filter(users, { 'age': 36, 'active': true });
		 * // => objects for ['barney']
		 *
		 * // The `_.matchesProperty` iteratee shorthand.
		 * _.filter(users, ['active', false]);
		 * // => objects for ['fred']
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.filter(users, 'active');
		 * // => objects for ['barney']
		 */
		function filter(collection, predicate) {
			var func = isArray(collection) ? arrayFilter : baseFilter;
			return func(collection, getIteratee(predicate, 3));
		}

		/**
		 * Iterates over elements of `collection`, returning the first element
		 * `predicate` returns truthy for. The predicate is invoked with three
		 * arguments: (value, index|key, collection).
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Collection
		 * @param {Array|Object} collection The collection to inspect.
		 * @param {Function} [predicate=_.identity] The function invoked per iteration.
		 * @param {number} [fromIndex=0] The index to search from.
		 * @returns {*} Returns the matched element, else `undefined`.
		 * @example
		 *
		 * var users = [
		 *   { 'user': 'barney',  'age': 36, 'active': true },
		 *   { 'user': 'fred',    'age': 40, 'active': false },
		 *   { 'user': 'pebbles', 'age': 1,  'active': true }
		 * ];
		 *
		 * _.find(users, function(o) { return o.age < 40; });
		 * // => object for 'barney'
		 *
		 * // The `_.matches` iteratee shorthand.
		 * _.find(users, { 'age': 1, 'active': true });
		 * // => object for 'pebbles'
		 *
		 * // The `_.matchesProperty` iteratee shorthand.
		 * _.find(users, ['active', false]);
		 * // => object for 'fred'
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.find(users, 'active');
		 * // => object for 'barney'
		 */
		var find = createFind(findIndex);

		/**
		 * This method is like `_.find` except that it iterates over elements of
		 * `collection` from right to left.
		 *
		 * @static
		 * @memberOf _
		 * @since 2.0.0
		 * @category Collection
		 * @param {Array|Object} collection The collection to inspect.
		 * @param {Function} [predicate=_.identity] The function invoked per iteration.
		 * @param {number} [fromIndex=collection.length-1] The index to search from.
		 * @returns {*} Returns the matched element, else `undefined`.
		 * @example
		 *
		 * _.findLast([1, 2, 3, 4], function(n) {
		 *   return n % 2 == 1;
		 * });
		 * // => 3
		 */
		var findLast = createFind(findLastIndex);

		/**
		 * Creates a flattened array of values by running each element in `collection`
		 * thru `iteratee` and flattening the mapped results. The iteratee is invoked
		 * with three arguments: (value, index|key, collection).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Collection
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		 * @returns {Array} Returns the new flattened array.
		 * @example
		 *
		 * function duplicate(n) {
		 *   return [n, n];
		 * }
		 *
		 * _.flatMap([1, 2], duplicate);
		 * // => [1, 1, 2, 2]
		 */
		function flatMap(collection, iteratee) {
			return baseFlatten(map(collection, iteratee), 1);
		}

		/**
		 * This method is like `_.flatMap` except that it recursively flattens the
		 * mapped results.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.7.0
		 * @category Collection
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		 * @returns {Array} Returns the new flattened array.
		 * @example
		 *
		 * function duplicate(n) {
		 *   return [[[n, n]]];
		 * }
		 *
		 * _.flatMapDeep([1, 2], duplicate);
		 * // => [1, 1, 2, 2]
		 */
		function flatMapDeep(collection, iteratee) {
			return baseFlatten(map(collection, iteratee), INFINITY);
		}

		/**
		 * This method is like `_.flatMap` except that it recursively flattens the
		 * mapped results up to `depth` times.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.7.0
		 * @category Collection
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		 * @param {number} [depth=1] The maximum recursion depth.
		 * @returns {Array} Returns the new flattened array.
		 * @example
		 *
		 * function duplicate(n) {
		 *   return [[[n, n]]];
		 * }
		 *
		 * _.flatMapDepth([1, 2], duplicate, 2);
		 * // => [[1, 1], [2, 2]]
		 */
		function flatMapDepth(collection, iteratee, depth) {
			depth = depth === undefined ? 1 : toInteger(depth);
			return baseFlatten(map(collection, iteratee), depth);
		}

		/**
		 * Iterates over elements of `collection` and invokes `iteratee` for each element.
		 * The iteratee is invoked with three arguments: (value, index|key, collection).
		 * Iteratee functions may exit iteration early by explicitly returning `false`.
		 *
		 * **Note:** As with other "Collections" methods, objects with a "length"
		 * property are iterated like arrays. To avoid this behavior use `_.forIn`
		 * or `_.forOwn` for object iteration.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @alias each
		 * @category Collection
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		 * @returns {Array|Object} Returns `collection`.
		 * @see _.forEachRight
		 * @example
		 *
		 * _.forEach([1, 2], function(value) {
		 *   console.log(value);
		 * });
		 * // => Logs `1` then `2`.
		 *
		 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
		 *   console.log(key);
		 * });
		 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
		 */
		function forEach(collection, iteratee) {
			var func = isArray(collection) ? arrayEach : baseEach;
			return func(collection, getIteratee(iteratee, 3));
		}

		/**
		 * This method is like `_.forEach` except that it iterates over elements of
		 * `collection` from right to left.
		 *
		 * @static
		 * @memberOf _
		 * @since 2.0.0
		 * @alias eachRight
		 * @category Collection
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		 * @returns {Array|Object} Returns `collection`.
		 * @see _.forEach
		 * @example
		 *
		 * _.forEachRight([1, 2], function(value) {
		 *   console.log(value);
		 * });
		 * // => Logs `2` then `1`.
		 */
		function forEachRight(collection, iteratee) {
			var func = isArray(collection) ? arrayEachRight : baseEachRight;
			return func(collection, getIteratee(iteratee, 3));
		}

		/**
		 * Creates an object composed of keys generated from the results of running
		 * each element of `collection` thru `iteratee`. The order of grouped values
		 * is determined by the order they occur in `collection`. The corresponding
		 * value of each key is an array of elements responsible for generating the
		 * key. The iteratee is invoked with one argument: (value).
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Collection
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
		 * @returns {Object} Returns the composed aggregate object.
		 * @example
		 *
		 * _.groupBy([6.1, 4.2, 6.3], Math.floor);
		 * // => { '4': [4.2], '6': [6.1, 6.3] }
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.groupBy(['one', 'two', 'three'], 'length');
		 * // => { '3': ['one', 'two'], '5': ['three'] }
		 */
		var groupBy = createAggregator(function (result, value, key) {
			if (hasOwnProperty.call(result, key)) {
				result[key].push(value);
			} else {
				baseAssignValue(result, key, [value]);
			}
		});

		/**
		 * Checks if `value` is in `collection`. If `collection` is a string, it's
		 * checked for a substring of `value`, otherwise
		 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		 * is used for equality comparisons. If `fromIndex` is negative, it's used as
		 * the offset from the end of `collection`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Collection
		 * @param {Array|Object|string} collection The collection to inspect.
		 * @param {*} value The value to search for.
		 * @param {number} [fromIndex=0] The index to search from.
		 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
		 * @returns {boolean} Returns `true` if `value` is found, else `false`.
		 * @example
		 *
		 * _.includes([1, 2, 3], 1);
		 * // => true
		 *
		 * _.includes([1, 2, 3], 1, 2);
		 * // => false
		 *
		 * _.includes({ 'a': 1, 'b': 2 }, 1);
		 * // => true
		 *
		 * _.includes('abcd', 'bc');
		 * // => true
		 */
		function includes(collection, value, fromIndex, guard) {
			collection = isArrayLike(collection) ? collection : values(collection);
			fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

			var length = collection.length;
			if (fromIndex < 0) {
				fromIndex = nativeMax(length + fromIndex, 0);
			}
			return isString(collection)
			  ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
			  : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
		}

		/**
		 * Invokes the method at `path` of each element in `collection`, returning
		 * an array of the results of each invoked method. Any additional arguments
		 * are provided to each invoked method. If `path` is a function, it's invoked
		 * for, and `this` bound to, each element in `collection`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Collection
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Array|Function|string} path The path of the method to invoke or
		 *  the function invoked per iteration.
		 * @param {...*} [args] The arguments to invoke each method with.
		 * @returns {Array} Returns the array of results.
		 * @example
		 *
		 * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
		 * // => [[1, 5, 7], [1, 2, 3]]
		 *
		 * _.invokeMap([123, 456], String.prototype.split, '');
		 * // => [['1', '2', '3'], ['4', '5', '6']]
		 */
		var invokeMap = baseRest(function (collection, path, args) {
			var index = -1,
				isFunc = typeof path == 'function',
				result = isArrayLike(collection) ? Array(collection.length) : [];

			baseEach(collection, function (value) {
				result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
			});
			return result;
		});

		/**
		 * Creates an object composed of keys generated from the results of running
		 * each element of `collection` thru `iteratee`. The corresponding value of
		 * each key is the last element responsible for generating the key. The
		 * iteratee is invoked with one argument: (value).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Collection
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
		 * @returns {Object} Returns the composed aggregate object.
		 * @example
		 *
		 * var array = [
		 *   { 'dir': 'left', 'code': 97 },
		 *   { 'dir': 'right', 'code': 100 }
		 * ];
		 *
		 * _.keyBy(array, function(o) {
		 *   return String.fromCharCode(o.code);
		 * });
		 * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
		 *
		 * _.keyBy(array, 'dir');
		 * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
		 */
		var keyBy = createAggregator(function (result, value, key) {
			baseAssignValue(result, key, value);
		});

		/**
		 * Creates an array of values by running each element in `collection` thru
		 * `iteratee`. The iteratee is invoked with three arguments:
		 * (value, index|key, collection).
		 *
		 * Many lodash methods are guarded to work as iteratees for methods like
		 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
		 *
		 * The guarded methods are:
		 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
		 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
		 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
		 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Collection
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		 * @returns {Array} Returns the new mapped array.
		 * @example
		 *
		 * function square(n) {
		 *   return n * n;
		 * }
		 *
		 * _.map([4, 8], square);
		 * // => [16, 64]
		 *
		 * _.map({ 'a': 4, 'b': 8 }, square);
		 * // => [16, 64] (iteration order is not guaranteed)
		 *
		 * var users = [
		 *   { 'user': 'barney' },
		 *   { 'user': 'fred' }
		 * ];
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.map(users, 'user');
		 * // => ['barney', 'fred']
		 */
		function map(collection, iteratee) {
			var func = isArray(collection) ? arrayMap : baseMap;
			return func(collection, getIteratee(iteratee, 3));
		}

		/**
		 * This method is like `_.sortBy` except that it allows specifying the sort
		 * orders of the iteratees to sort by. If `orders` is unspecified, all values
		 * are sorted in ascending order. Otherwise, specify an order of "desc" for
		 * descending or "asc" for ascending sort order of corresponding values.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Collection
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
		 *  The iteratees to sort by.
		 * @param {string[]} [orders] The sort orders of `iteratees`.
		 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
		 * @returns {Array} Returns the new sorted array.
		 * @example
		 *
		 * var users = [
		 *   { 'user': 'fred',   'age': 48 },
		 *   { 'user': 'barney', 'age': 34 },
		 *   { 'user': 'fred',   'age': 40 },
		 *   { 'user': 'barney', 'age': 36 }
		 * ];
		 *
		 * // Sort by `user` in ascending order and by `age` in descending order.
		 * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
		 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
		 */
		function orderBy(collection, iteratees, orders, guard) {
			if (collection == null) {
				return [];
			}
			if (!isArray(iteratees)) {
				iteratees = iteratees == null ? [] : [iteratees];
			}
			orders = guard ? undefined : orders;
			if (!isArray(orders)) {
				orders = orders == null ? [] : [orders];
			}
			return baseOrderBy(collection, iteratees, orders);
		}

		/**
		 * Creates an array of elements split into two groups, the first of which
		 * contains elements `predicate` returns truthy for, the second of which
		 * contains elements `predicate` returns falsey for. The predicate is
		 * invoked with one argument: (value).
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Collection
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} [predicate=_.identity] The function invoked per iteration.
		 * @returns {Array} Returns the array of grouped elements.
		 * @example
		 *
		 * var users = [
		 *   { 'user': 'barney',  'age': 36, 'active': false },
		 *   { 'user': 'fred',    'age': 40, 'active': true },
		 *   { 'user': 'pebbles', 'age': 1,  'active': false }
		 * ];
		 *
		 * _.partition(users, function(o) { return o.active; });
		 * // => objects for [['fred'], ['barney', 'pebbles']]
		 *
		 * // The `_.matches` iteratee shorthand.
		 * _.partition(users, { 'age': 1, 'active': false });
		 * // => objects for [['pebbles'], ['barney', 'fred']]
		 *
		 * // The `_.matchesProperty` iteratee shorthand.
		 * _.partition(users, ['active', false]);
		 * // => objects for [['barney', 'pebbles'], ['fred']]
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.partition(users, 'active');
		 * // => objects for [['fred'], ['barney', 'pebbles']]
		 */
		var partition = createAggregator(function (result, value, key) {
			result[key ? 0 : 1].push(value);
		}, function () { return [[], []]; });

		/**
		 * Reduces `collection` to a value which is the accumulated result of running
		 * each element in `collection` thru `iteratee`, where each successive
		 * invocation is supplied the return value of the previous. If `accumulator`
		 * is not given, the first element of `collection` is used as the initial
		 * value. The iteratee is invoked with four arguments:
		 * (accumulator, value, index|key, collection).
		 *
		 * Many lodash methods are guarded to work as iteratees for methods like
		 * `_.reduce`, `_.reduceRight`, and `_.transform`.
		 *
		 * The guarded methods are:
		 * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
		 * and `sortBy`
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Collection
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		 * @param {*} [accumulator] The initial value.
		 * @returns {*} Returns the accumulated value.
		 * @see _.reduceRight
		 * @example
		 *
		 * _.reduce([1, 2], function(sum, n) {
		 *   return sum + n;
		 * }, 0);
		 * // => 3
		 *
		 * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
		 *   (result[value] || (result[value] = [])).push(key);
		 *   return result;
		 * }, {});
		 * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
		 */
		function reduce(collection, iteratee, accumulator) {
			var func = isArray(collection) ? arrayReduce : baseReduce,
				initAccum = arguments.length < 3;

			return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
		}

		/**
		 * This method is like `_.reduce` except that it iterates over elements of
		 * `collection` from right to left.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Collection
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		 * @param {*} [accumulator] The initial value.
		 * @returns {*} Returns the accumulated value.
		 * @see _.reduce
		 * @example
		 *
		 * var array = [[0, 1], [2, 3], [4, 5]];
		 *
		 * _.reduceRight(array, function(flattened, other) {
		 *   return flattened.concat(other);
		 * }, []);
		 * // => [4, 5, 2, 3, 0, 1]
		 */
		function reduceRight(collection, iteratee, accumulator) {
			var func = isArray(collection) ? arrayReduceRight : baseReduce,
				initAccum = arguments.length < 3;

			return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
		}

		/**
		 * The opposite of `_.filter`; this method returns the elements of `collection`
		 * that `predicate` does **not** return truthy for.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Collection
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} [predicate=_.identity] The function invoked per iteration.
		 * @returns {Array} Returns the new filtered array.
		 * @see _.filter
		 * @example
		 *
		 * var users = [
		 *   { 'user': 'barney', 'age': 36, 'active': false },
		 *   { 'user': 'fred',   'age': 40, 'active': true }
		 * ];
		 *
		 * _.reject(users, function(o) { return !o.active; });
		 * // => objects for ['fred']
		 *
		 * // The `_.matches` iteratee shorthand.
		 * _.reject(users, { 'age': 40, 'active': true });
		 * // => objects for ['barney']
		 *
		 * // The `_.matchesProperty` iteratee shorthand.
		 * _.reject(users, ['active', false]);
		 * // => objects for ['fred']
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.reject(users, 'active');
		 * // => objects for ['barney']
		 */
		function reject(collection, predicate) {
			var func = isArray(collection) ? arrayFilter : baseFilter;
			return func(collection, negate(getIteratee(predicate, 3)));
		}

		/**
		 * Gets a random element from `collection`.
		 *
		 * @static
		 * @memberOf _
		 * @since 2.0.0
		 * @category Collection
		 * @param {Array|Object} collection The collection to sample.
		 * @returns {*} Returns the random element.
		 * @example
		 *
		 * _.sample([1, 2, 3, 4]);
		 * // => 2
		 */
		function sample(collection) {
			var func = isArray(collection) ? arraySample : baseSample;
			return func(collection);
		}

		/**
		 * Gets `n` random elements at unique keys from `collection` up to the
		 * size of `collection`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Collection
		 * @param {Array|Object} collection The collection to sample.
		 * @param {number} [n=1] The number of elements to sample.
		 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		 * @returns {Array} Returns the random elements.
		 * @example
		 *
		 * _.sampleSize([1, 2, 3], 2);
		 * // => [3, 1]
		 *
		 * _.sampleSize([1, 2, 3], 4);
		 * // => [2, 3, 1]
		 */
		function sampleSize(collection, n, guard) {
			if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
				n = 1;
			} else {
				n = toInteger(n);
			}
			var func = isArray(collection) ? arraySampleSize : baseSampleSize;
			return func(collection, n);
		}

		/**
		 * Creates an array of shuffled values, using a version of the
		 * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Collection
		 * @param {Array|Object} collection The collection to shuffle.
		 * @returns {Array} Returns the new shuffled array.
		 * @example
		 *
		 * _.shuffle([1, 2, 3, 4]);
		 * // => [4, 1, 3, 2]
		 */
		function shuffle(collection) {
			var func = isArray(collection) ? arrayShuffle : baseShuffle;
			return func(collection);
		}

		/**
		 * Gets the size of `collection` by returning its length for array-like
		 * values or the number of own enumerable string keyed properties for objects.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Collection
		 * @param {Array|Object|string} collection The collection to inspect.
		 * @returns {number} Returns the collection size.
		 * @example
		 *
		 * _.size([1, 2, 3]);
		 * // => 3
		 *
		 * _.size({ 'a': 1, 'b': 2 });
		 * // => 2
		 *
		 * _.size('pebbles');
		 * // => 7
		 */
		function size(collection) {
			if (collection == null) {
				return 0;
			}
			if (isArrayLike(collection)) {
				return isString(collection) ? stringSize(collection) : collection.length;
			}
			var tag = getTag(collection);
			if (tag == mapTag || tag == setTag) {
				return collection.size;
			}
			return baseKeys(collection).length;
		}

		/**
		 * Checks if `predicate` returns truthy for **any** element of `collection`.
		 * Iteration is stopped once `predicate` returns truthy. The predicate is
		 * invoked with three arguments: (value, index|key, collection).
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Collection
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} [predicate=_.identity] The function invoked per iteration.
		 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		 * @returns {boolean} Returns `true` if any element passes the predicate check,
		 *  else `false`.
		 * @example
		 *
		 * _.some([null, 0, 'yes', false], Boolean);
		 * // => true
		 *
		 * var users = [
		 *   { 'user': 'barney', 'active': true },
		 *   { 'user': 'fred',   'active': false }
		 * ];
		 *
		 * // The `_.matches` iteratee shorthand.
		 * _.some(users, { 'user': 'barney', 'active': false });
		 * // => false
		 *
		 * // The `_.matchesProperty` iteratee shorthand.
		 * _.some(users, ['active', false]);
		 * // => true
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.some(users, 'active');
		 * // => true
		 */
		function some(collection, predicate, guard) {
			var func = isArray(collection) ? arraySome : baseSome;
			if (guard && isIterateeCall(collection, predicate, guard)) {
				predicate = undefined;
			}
			return func(collection, getIteratee(predicate, 3));
		}

		/**
		 * Creates an array of elements, sorted in ascending order by the results of
		 * running each element in a collection thru each iteratee. This method
		 * performs a stable sort, that is, it preserves the original sort order of
		 * equal elements. The iteratees are invoked with one argument: (value).
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Collection
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {...(Function|Function[])} [iteratees=[_.identity]]
		 *  The iteratees to sort by.
		 * @returns {Array} Returns the new sorted array.
		 * @example
		 *
		 * var users = [
		 *   { 'user': 'fred',   'age': 48 },
		 *   { 'user': 'barney', 'age': 36 },
		 *   { 'user': 'fred',   'age': 40 },
		 *   { 'user': 'barney', 'age': 34 }
		 * ];
		 *
		 * _.sortBy(users, [function(o) { return o.user; }]);
		 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
		 *
		 * _.sortBy(users, ['user', 'age']);
		 * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
		 */
		var sortBy = baseRest(function (collection, iteratees) {
			if (collection == null) {
				return [];
			}
			var length = iteratees.length;
			if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
				iteratees = [];
			} else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
				iteratees = [iteratees[0]];
			}
			return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
		});

		/*------------------------------------------------------------------------*/

		/**
		 * Gets the timestamp of the number of milliseconds that have elapsed since
		 * the Unix epoch (1 January 1970 00:00:00 UTC).
		 *
		 * @static
		 * @memberOf _
		 * @since 2.4.0
		 * @category Date
		 * @returns {number} Returns the timestamp.
		 * @example
		 *
		 * _.defer(function(stamp) {
		 *   console.log(_.now() - stamp);
		 * }, _.now());
		 * // => Logs the number of milliseconds it took for the deferred invocation.
		 */
		var now = ctxNow || function () {
			return root.Date.now();
		};

		/*------------------------------------------------------------------------*/

		/**
		 * The opposite of `_.before`; this method creates a function that invokes
		 * `func` once it's called `n` or more times.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Function
		 * @param {number} n The number of calls before `func` is invoked.
		 * @param {Function} func The function to restrict.
		 * @returns {Function} Returns the new restricted function.
		 * @example
		 *
		 * var saves = ['profile', 'settings'];
		 *
		 * var done = _.after(saves.length, function() {
		 *   console.log('done saving!');
		 * });
		 *
		 * _.forEach(saves, function(type) {
		 *   asyncSave({ 'type': type, 'complete': done });
		 * });
		 * // => Logs 'done saving!' after the two async saves have completed.
		 */
		function after(n, func) {
			if (typeof func != 'function') {
				throw new TypeError(FUNC_ERROR_TEXT);
			}
			n = toInteger(n);
			return function () {
				if (--n < 1) {
					return func.apply(this, arguments);
				}
			};
		}

		/**
		 * Creates a function that invokes `func`, with up to `n` arguments,
		 * ignoring any additional arguments.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Function
		 * @param {Function} func The function to cap arguments for.
		 * @param {number} [n=func.length] The arity cap.
		 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		 * @returns {Function} Returns the new capped function.
		 * @example
		 *
		 * _.map(['6', '8', '10'], _.ary(parseInt, 1));
		 * // => [6, 8, 10]
		 */
		function ary(func, n, guard) {
			n = guard ? undefined : n;
			n = (func && n == null) ? func.length : n;
			return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
		}

		/**
		 * Creates a function that invokes `func`, with the `this` binding and arguments
		 * of the created function, while it's called less than `n` times. Subsequent
		 * calls to the created function return the result of the last `func` invocation.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Function
		 * @param {number} n The number of calls at which `func` is no longer invoked.
		 * @param {Function} func The function to restrict.
		 * @returns {Function} Returns the new restricted function.
		 * @example
		 *
		 * jQuery(element).on('click', _.before(5, addContactToList));
		 * // => Allows adding up to 4 contacts to the list.
		 */
		function before(n, func) {
			var result;
			if (typeof func != 'function') {
				throw new TypeError(FUNC_ERROR_TEXT);
			}
			n = toInteger(n);
			return function () {
				if (--n > 0) {
					result = func.apply(this, arguments);
				}
				if (n <= 1) {
					func = undefined;
				}
				return result;
			};
		}

		/**
		 * Creates a function that invokes `func` with the `this` binding of `thisArg`
		 * and `partials` prepended to the arguments it receives.
		 *
		 * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
		 * may be used as a placeholder for partially applied arguments.
		 *
		 * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
		 * property of bound functions.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Function
		 * @param {Function} func The function to bind.
		 * @param {*} thisArg The `this` binding of `func`.
		 * @param {...*} [partials] The arguments to be partially applied.
		 * @returns {Function} Returns the new bound function.
		 * @example
		 *
		 * function greet(greeting, punctuation) {
		 *   return greeting + ' ' + this.user + punctuation;
		 * }
		 *
		 * var object = { 'user': 'fred' };
		 *
		 * var bound = _.bind(greet, object, 'hi');
		 * bound('!');
		 * // => 'hi fred!'
		 *
		 * // Bound with placeholders.
		 * var bound = _.bind(greet, object, _, '!');
		 * bound('hi');
		 * // => 'hi fred!'
		 */
		var bind = baseRest(function (func, thisArg, partials) {
			var bitmask = WRAP_BIND_FLAG;
			if (partials.length) {
				var holders = replaceHolders(partials, getHolder(bind));
				bitmask |= WRAP_PARTIAL_FLAG;
			}
			return createWrap(func, bitmask, thisArg, partials, holders);
		});

		/**
		 * Creates a function that invokes the method at `object[key]` with `partials`
		 * prepended to the arguments it receives.
		 *
		 * This method differs from `_.bind` by allowing bound functions to reference
		 * methods that may be redefined or don't yet exist. See
		 * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
		 * for more details.
		 *
		 * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
		 * builds, may be used as a placeholder for partially applied arguments.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.10.0
		 * @category Function
		 * @param {Object} object The object to invoke the method on.
		 * @param {string} key The key of the method.
		 * @param {...*} [partials] The arguments to be partially applied.
		 * @returns {Function} Returns the new bound function.
		 * @example
		 *
		 * var object = {
		 *   'user': 'fred',
		 *   'greet': function(greeting, punctuation) {
		 *     return greeting + ' ' + this.user + punctuation;
		 *   }
		 * };
		 *
		 * var bound = _.bindKey(object, 'greet', 'hi');
		 * bound('!');
		 * // => 'hi fred!'
		 *
		 * object.greet = function(greeting, punctuation) {
		 *   return greeting + 'ya ' + this.user + punctuation;
		 * };
		 *
		 * bound('!');
		 * // => 'hiya fred!'
		 *
		 * // Bound with placeholders.
		 * var bound = _.bindKey(object, 'greet', _, '!');
		 * bound('hi');
		 * // => 'hiya fred!'
		 */
		var bindKey = baseRest(function (object, key, partials) {
			var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
			if (partials.length) {
				var holders = replaceHolders(partials, getHolder(bindKey));
				bitmask |= WRAP_PARTIAL_FLAG;
			}
			return createWrap(key, bitmask, object, partials, holders);
		});

		/**
		 * Creates a function that accepts arguments of `func` and either invokes
		 * `func` returning its result, if at least `arity` number of arguments have
		 * been provided, or returns a function that accepts the remaining `func`
		 * arguments, and so on. The arity of `func` may be specified if `func.length`
		 * is not sufficient.
		 *
		 * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
		 * may be used as a placeholder for provided arguments.
		 *
		 * **Note:** This method doesn't set the "length" property of curried functions.
		 *
		 * @static
		 * @memberOf _
		 * @since 2.0.0
		 * @category Function
		 * @param {Function} func The function to curry.
		 * @param {number} [arity=func.length] The arity of `func`.
		 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		 * @returns {Function} Returns the new curried function.
		 * @example
		 *
		 * var abc = function(a, b, c) {
		 *   return [a, b, c];
		 * };
		 *
		 * var curried = _.curry(abc);
		 *
		 * curried(1)(2)(3);
		 * // => [1, 2, 3]
		 *
		 * curried(1, 2)(3);
		 * // => [1, 2, 3]
		 *
		 * curried(1, 2, 3);
		 * // => [1, 2, 3]
		 *
		 * // Curried with placeholders.
		 * curried(1)(_, 3)(2);
		 * // => [1, 2, 3]
		 */
		function curry(func, arity, guard) {
			arity = guard ? undefined : arity;
			var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
			result.placeholder = curry.placeholder;
			return result;
		}

		/**
		 * This method is like `_.curry` except that arguments are applied to `func`
		 * in the manner of `_.partialRight` instead of `_.partial`.
		 *
		 * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
		 * builds, may be used as a placeholder for provided arguments.
		 *
		 * **Note:** This method doesn't set the "length" property of curried functions.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Function
		 * @param {Function} func The function to curry.
		 * @param {number} [arity=func.length] The arity of `func`.
		 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		 * @returns {Function} Returns the new curried function.
		 * @example
		 *
		 * var abc = function(a, b, c) {
		 *   return [a, b, c];
		 * };
		 *
		 * var curried = _.curryRight(abc);
		 *
		 * curried(3)(2)(1);
		 * // => [1, 2, 3]
		 *
		 * curried(2, 3)(1);
		 * // => [1, 2, 3]
		 *
		 * curried(1, 2, 3);
		 * // => [1, 2, 3]
		 *
		 * // Curried with placeholders.
		 * curried(3)(1, _)(2);
		 * // => [1, 2, 3]
		 */
		function curryRight(func, arity, guard) {
			arity = guard ? undefined : arity;
			var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
			result.placeholder = curryRight.placeholder;
			return result;
		}

		/**
		 * Creates a debounced function that delays invoking `func` until after `wait`
		 * milliseconds have elapsed since the last time the debounced function was
		 * invoked. The debounced function comes with a `cancel` method to cancel
		 * delayed `func` invocations and a `flush` method to immediately invoke them.
		 * Provide `options` to indicate whether `func` should be invoked on the
		 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
		 * with the last arguments provided to the debounced function. Subsequent
		 * calls to the debounced function return the result of the last `func`
		 * invocation.
		 *
		 * **Note:** If `leading` and `trailing` options are `true`, `func` is
		 * invoked on the trailing edge of the timeout only if the debounced function
		 * is invoked more than once during the `wait` timeout.
		 *
		 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
		 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
		 *
		 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
		 * for details over the differences between `_.debounce` and `_.throttle`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Function
		 * @param {Function} func The function to debounce.
		 * @param {number} [wait=0] The number of milliseconds to delay.
		 * @param {Object} [options={}] The options object.
		 * @param {boolean} [options.leading=false]
		 *  Specify invoking on the leading edge of the timeout.
		 * @param {number} [options.maxWait]
		 *  The maximum time `func` is allowed to be delayed before it's invoked.
		 * @param {boolean} [options.trailing=true]
		 *  Specify invoking on the trailing edge of the timeout.
		 * @returns {Function} Returns the new debounced function.
		 * @example
		 *
		 * // Avoid costly calculations while the window size is in flux.
		 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
		 *
		 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
		 * jQuery(element).on('click', _.debounce(sendMail, 300, {
		 *   'leading': true,
		 *   'trailing': false
		 * }));
		 *
		 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
		 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
		 * var source = new EventSource('/stream');
		 * jQuery(source).on('message', debounced);
		 *
		 * // Cancel the trailing debounced invocation.
		 * jQuery(window).on('popstate', debounced.cancel);
		 */
		function debounce(func, wait, options) {
			var lastArgs,
				lastThis,
				maxWait,
				result,
				timerId,
				lastCallTime,
				lastInvokeTime = 0,
				leading = false,
				maxing = false,
				trailing = true;

			if (typeof func != 'function') {
				throw new TypeError(FUNC_ERROR_TEXT);
			}
			wait = toNumber(wait) || 0;
			if (isObject(options)) {
				leading = !!options.leading;
				maxing = 'maxWait' in options;
				maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
				trailing = 'trailing' in options ? !!options.trailing : trailing;
			}

			function invokeFunc(time) {
				var args = lastArgs,
					thisArg = lastThis;

				lastArgs = lastThis = undefined;
				lastInvokeTime = time;
				result = func.apply(thisArg, args);
				return result;
			}

			function leadingEdge(time) {
				// Reset any `maxWait` timer.
				lastInvokeTime = time;
				// Start the timer for the trailing edge.
				timerId = setTimeout(timerExpired, wait);
				// Invoke the leading edge.
				return leading ? invokeFunc(time) : result;
			}

			function remainingWait(time) {
				var timeSinceLastCall = time - lastCallTime,
					timeSinceLastInvoke = time - lastInvokeTime,
					result = wait - timeSinceLastCall;

				return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
			}

			function shouldInvoke(time) {
				var timeSinceLastCall = time - lastCallTime,
					timeSinceLastInvoke = time - lastInvokeTime;

				// Either this is the first call, activity has stopped and we're at the
				// trailing edge, the system time has gone backwards and we're treating
				// it as the trailing edge, or we've hit the `maxWait` limit.
				return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
				  (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
			}

			function timerExpired() {
				var time = now();
				if (shouldInvoke(time)) {
					return trailingEdge(time);
				}
				// Restart the timer.
				timerId = setTimeout(timerExpired, remainingWait(time));
			}

			function trailingEdge(time) {
				timerId = undefined;

				// Only invoke if we have `lastArgs` which means `func` has been
				// debounced at least once.
				if (trailing && lastArgs) {
					return invokeFunc(time);
				}
				lastArgs = lastThis = undefined;
				return result;
			}

			function cancel() {
				if (timerId !== undefined) {
					clearTimeout(timerId);
				}
				lastInvokeTime = 0;
				lastArgs = lastCallTime = lastThis = timerId = undefined;
			}

			function flush() {
				return timerId === undefined ? result : trailingEdge(now());
			}

			function debounced() {
				var time = now(),
					isInvoking = shouldInvoke(time);

				lastArgs = arguments;
				lastThis = this;
				lastCallTime = time;

				if (isInvoking) {
					if (timerId === undefined) {
						return leadingEdge(lastCallTime);
					}
					if (maxing) {
						// Handle invocations in a tight loop.
						timerId = setTimeout(timerExpired, wait);
						return invokeFunc(lastCallTime);
					}
				}
				if (timerId === undefined) {
					timerId = setTimeout(timerExpired, wait);
				}
				return result;
			}
			debounced.cancel = cancel;
			debounced.flush = flush;
			return debounced;
		}

		/**
		 * Defers invoking the `func` until the current call stack has cleared. Any
		 * additional arguments are provided to `func` when it's invoked.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Function
		 * @param {Function} func The function to defer.
		 * @param {...*} [args] The arguments to invoke `func` with.
		 * @returns {number} Returns the timer id.
		 * @example
		 *
		 * _.defer(function(text) {
		 *   console.log(text);
		 * }, 'deferred');
		 * // => Logs 'deferred' after one millisecond.
		 */
		var defer = baseRest(function (func, args) {
			return baseDelay(func, 1, args);
		});

		/**
		 * Invokes `func` after `wait` milliseconds. Any additional arguments are
		 * provided to `func` when it's invoked.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Function
		 * @param {Function} func The function to delay.
		 * @param {number} wait The number of milliseconds to delay invocation.
		 * @param {...*} [args] The arguments to invoke `func` with.
		 * @returns {number} Returns the timer id.
		 * @example
		 *
		 * _.delay(function(text) {
		 *   console.log(text);
		 * }, 1000, 'later');
		 * // => Logs 'later' after one second.
		 */
		var delay = baseRest(function (func, wait, args) {
			return baseDelay(func, toNumber(wait) || 0, args);
		});

		/**
		 * Creates a function that invokes `func` with arguments reversed.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Function
		 * @param {Function} func The function to flip arguments for.
		 * @returns {Function} Returns the new flipped function.
		 * @example
		 *
		 * var flipped = _.flip(function() {
		 *   return _.toArray(arguments);
		 * });
		 *
		 * flipped('a', 'b', 'c', 'd');
		 * // => ['d', 'c', 'b', 'a']
		 */
		function flip(func) {
			return createWrap(func, WRAP_FLIP_FLAG);
		}

		/**
		 * Creates a function that memoizes the result of `func`. If `resolver` is
		 * provided, it determines the cache key for storing the result based on the
		 * arguments provided to the memoized function. By default, the first argument
		 * provided to the memoized function is used as the map cache key. The `func`
		 * is invoked with the `this` binding of the memoized function.
		 *
		 * **Note:** The cache is exposed as the `cache` property on the memoized
		 * function. Its creation may be customized by replacing the `_.memoize.Cache`
		 * constructor with one whose instances implement the
		 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
		 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Function
		 * @param {Function} func The function to have its output memoized.
		 * @param {Function} [resolver] The function to resolve the cache key.
		 * @returns {Function} Returns the new memoized function.
		 * @example
		 *
		 * var object = { 'a': 1, 'b': 2 };
		 * var other = { 'c': 3, 'd': 4 };
		 *
		 * var values = _.memoize(_.values);
		 * values(object);
		 * // => [1, 2]
		 *
		 * values(other);
		 * // => [3, 4]
		 *
		 * object.a = 2;
		 * values(object);
		 * // => [1, 2]
		 *
		 * // Modify the result cache.
		 * values.cache.set(object, ['a', 'b']);
		 * values(object);
		 * // => ['a', 'b']
		 *
		 * // Replace `_.memoize.Cache`.
		 * _.memoize.Cache = WeakMap;
		 */
		function memoize(func, resolver) {
			if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
				throw new TypeError(FUNC_ERROR_TEXT);
			}
			var memoized = function () {
				var args = arguments,
					key = resolver ? resolver.apply(this, args) : args[0],
					cache = memoized.cache;

				if (cache.has(key)) {
					return cache.get(key);
				}
				var result = func.apply(this, args);
				memoized.cache = cache.set(key, result) || cache;
				return result;
			};
			memoized.cache = new (memoize.Cache || MapCache);
			return memoized;
		}

		// Expose `MapCache`.
		memoize.Cache = MapCache;

		/**
		 * Creates a function that negates the result of the predicate `func`. The
		 * `func` predicate is invoked with the `this` binding and arguments of the
		 * created function.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Function
		 * @param {Function} predicate The predicate to negate.
		 * @returns {Function} Returns the new negated function.
		 * @example
		 *
		 * function isEven(n) {
		 *   return n % 2 == 0;
		 * }
		 *
		 * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
		 * // => [1, 3, 5]
		 */
		function negate(predicate) {
			if (typeof predicate != 'function') {
				throw new TypeError(FUNC_ERROR_TEXT);
			}
			return function () {
				var args = arguments;
				switch (args.length) {
					case 0: return !predicate.call(this);
					case 1: return !predicate.call(this, args[0]);
					case 2: return !predicate.call(this, args[0], args[1]);
					case 3: return !predicate.call(this, args[0], args[1], args[2]);
				}
				return !predicate.apply(this, args);
			};
		}

		/**
		 * Creates a function that is restricted to invoking `func` once. Repeat calls
		 * to the function return the value of the first invocation. The `func` is
		 * invoked with the `this` binding and arguments of the created function.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Function
		 * @param {Function} func The function to restrict.
		 * @returns {Function} Returns the new restricted function.
		 * @example
		 *
		 * var initialize = _.once(createApplication);
		 * initialize();
		 * initialize();
		 * // => `createApplication` is invoked once
		 */
		function once(func) {
			return before(2, func);
		}

		/**
		 * Creates a function that invokes `func` with its arguments transformed.
		 *
		 * @static
		 * @since 4.0.0
		 * @memberOf _
		 * @category Function
		 * @param {Function} func The function to wrap.
		 * @param {...(Function|Function[])} [transforms=[_.identity]]
		 *  The argument transforms.
		 * @returns {Function} Returns the new function.
		 * @example
		 *
		 * function doubled(n) {
		 *   return n * 2;
		 * }
		 *
		 * function square(n) {
		 *   return n * n;
		 * }
		 *
		 * var func = _.overArgs(function(x, y) {
		 *   return [x, y];
		 * }, [square, doubled]);
		 *
		 * func(9, 3);
		 * // => [81, 6]
		 *
		 * func(10, 5);
		 * // => [100, 10]
		 */
		var overArgs = castRest(function (func, transforms) {
			transforms = (transforms.length == 1 && isArray(transforms[0]))
			  ? arrayMap(transforms[0], baseUnary(getIteratee()))
			  : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

			var funcsLength = transforms.length;
			return baseRest(function (args) {
				var index = -1,
					length = nativeMin(args.length, funcsLength);

				while (++index < length) {
					args[index] = transforms[index].call(this, args[index]);
				}
				return apply(func, this, args);
			});
		});

		/**
		 * Creates a function that invokes `func` with `partials` prepended to the
		 * arguments it receives. This method is like `_.bind` except it does **not**
		 * alter the `this` binding.
		 *
		 * The `_.partial.placeholder` value, which defaults to `_` in monolithic
		 * builds, may be used as a placeholder for partially applied arguments.
		 *
		 * **Note:** This method doesn't set the "length" property of partially
		 * applied functions.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.2.0
		 * @category Function
		 * @param {Function} func The function to partially apply arguments to.
		 * @param {...*} [partials] The arguments to be partially applied.
		 * @returns {Function} Returns the new partially applied function.
		 * @example
		 *
		 * function greet(greeting, name) {
		 *   return greeting + ' ' + name;
		 * }
		 *
		 * var sayHelloTo = _.partial(greet, 'hello');
		 * sayHelloTo('fred');
		 * // => 'hello fred'
		 *
		 * // Partially applied with placeholders.
		 * var greetFred = _.partial(greet, _, 'fred');
		 * greetFred('hi');
		 * // => 'hi fred'
		 */
		var partial = baseRest(function (func, partials) {
			var holders = replaceHolders(partials, getHolder(partial));
			return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
		});

		/**
		 * This method is like `_.partial` except that partially applied arguments
		 * are appended to the arguments it receives.
		 *
		 * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
		 * builds, may be used as a placeholder for partially applied arguments.
		 *
		 * **Note:** This method doesn't set the "length" property of partially
		 * applied functions.
		 *
		 * @static
		 * @memberOf _
		 * @since 1.0.0
		 * @category Function
		 * @param {Function} func The function to partially apply arguments to.
		 * @param {...*} [partials] The arguments to be partially applied.
		 * @returns {Function} Returns the new partially applied function.
		 * @example
		 *
		 * function greet(greeting, name) {
		 *   return greeting + ' ' + name;
		 * }
		 *
		 * var greetFred = _.partialRight(greet, 'fred');
		 * greetFred('hi');
		 * // => 'hi fred'
		 *
		 * // Partially applied with placeholders.
		 * var sayHelloTo = _.partialRight(greet, 'hello', _);
		 * sayHelloTo('fred');
		 * // => 'hello fred'
		 */
		var partialRight = baseRest(function (func, partials) {
			var holders = replaceHolders(partials, getHolder(partialRight));
			return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
		});

		/**
		 * Creates a function that invokes `func` with arguments arranged according
		 * to the specified `indexes` where the argument value at the first index is
		 * provided as the first argument, the argument value at the second index is
		 * provided as the second argument, and so on.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Function
		 * @param {Function} func The function to rearrange arguments for.
		 * @param {...(number|number[])} indexes The arranged argument indexes.
		 * @returns {Function} Returns the new function.
		 * @example
		 *
		 * var rearged = _.rearg(function(a, b, c) {
		 *   return [a, b, c];
		 * }, [2, 0, 1]);
		 *
		 * rearged('b', 'c', 'a')
		 * // => ['a', 'b', 'c']
		 */
		var rearg = flatRest(function (func, indexes) {
			return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
		});

		/**
		 * Creates a function that invokes `func` with the `this` binding of the
		 * created function and arguments from `start` and beyond provided as
		 * an array.
		 *
		 * **Note:** This method is based on the
		 * [rest parameter](https://mdn.io/rest_parameters).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Function
		 * @param {Function} func The function to apply a rest parameter to.
		 * @param {number} [start=func.length-1] The start position of the rest parameter.
		 * @returns {Function} Returns the new function.
		 * @example
		 *
		 * var say = _.rest(function(what, names) {
		 *   return what + ' ' + _.initial(names).join(', ') +
		 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
		 * });
		 *
		 * say('hello', 'fred', 'barney', 'pebbles');
		 * // => 'hello fred, barney, & pebbles'
		 */
		function rest(func, start) {
			if (typeof func != 'function') {
				throw new TypeError(FUNC_ERROR_TEXT);
			}
			start = start === undefined ? start : toInteger(start);
			return baseRest(func, start);
		}

		/**
		 * Creates a function that invokes `func` with the `this` binding of the
		 * create function and an array of arguments much like
		 * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
		 *
		 * **Note:** This method is based on the
		 * [spread operator](https://mdn.io/spread_operator).
		 *
		 * @static
		 * @memberOf _
		 * @since 3.2.0
		 * @category Function
		 * @param {Function} func The function to spread arguments over.
		 * @param {number} [start=0] The start position of the spread.
		 * @returns {Function} Returns the new function.
		 * @example
		 *
		 * var say = _.spread(function(who, what) {
		 *   return who + ' says ' + what;
		 * });
		 *
		 * say(['fred', 'hello']);
		 * // => 'fred says hello'
		 *
		 * var numbers = Promise.all([
		 *   Promise.resolve(40),
		 *   Promise.resolve(36)
		 * ]);
		 *
		 * numbers.then(_.spread(function(x, y) {
		 *   return x + y;
		 * }));
		 * // => a Promise of 76
		 */
		function spread(func, start) {
			if (typeof func != 'function') {
				throw new TypeError(FUNC_ERROR_TEXT);
			}
			start = start == null ? 0 : nativeMax(toInteger(start), 0);
			return baseRest(function (args) {
				var array = args[start],
					otherArgs = castSlice(args, 0, start);

				if (array) {
					arrayPush(otherArgs, array);
				}
				return apply(func, this, otherArgs);
			});
		}

		/**
		 * Creates a throttled function that only invokes `func` at most once per
		 * every `wait` milliseconds. The throttled function comes with a `cancel`
		 * method to cancel delayed `func` invocations and a `flush` method to
		 * immediately invoke them. Provide `options` to indicate whether `func`
		 * should be invoked on the leading and/or trailing edge of the `wait`
		 * timeout. The `func` is invoked with the last arguments provided to the
		 * throttled function. Subsequent calls to the throttled function return the
		 * result of the last `func` invocation.
		 *
		 * **Note:** If `leading` and `trailing` options are `true`, `func` is
		 * invoked on the trailing edge of the timeout only if the throttled function
		 * is invoked more than once during the `wait` timeout.
		 *
		 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
		 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
		 *
		 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
		 * for details over the differences between `_.throttle` and `_.debounce`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Function
		 * @param {Function} func The function to throttle.
		 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
		 * @param {Object} [options={}] The options object.
		 * @param {boolean} [options.leading=true]
		 *  Specify invoking on the leading edge of the timeout.
		 * @param {boolean} [options.trailing=true]
		 *  Specify invoking on the trailing edge of the timeout.
		 * @returns {Function} Returns the new throttled function.
		 * @example
		 *
		 * // Avoid excessively updating the position while scrolling.
		 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
		 *
		 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
		 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
		 * jQuery(element).on('click', throttled);
		 *
		 * // Cancel the trailing throttled invocation.
		 * jQuery(window).on('popstate', throttled.cancel);
		 */
		function throttle(func, wait, options) {
			var leading = true,
				trailing = true;

			if (typeof func != 'function') {
				throw new TypeError(FUNC_ERROR_TEXT);
			}
			if (isObject(options)) {
				leading = 'leading' in options ? !!options.leading : leading;
				trailing = 'trailing' in options ? !!options.trailing : trailing;
			}
			return debounce(func, wait, {
				'leading': leading,
				'maxWait': wait,
				'trailing': trailing
			});
		}

		/**
		 * Creates a function that accepts up to one argument, ignoring any
		 * additional arguments.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Function
		 * @param {Function} func The function to cap arguments for.
		 * @returns {Function} Returns the new capped function.
		 * @example
		 *
		 * _.map(['6', '8', '10'], _.unary(parseInt));
		 * // => [6, 8, 10]
		 */
		function unary(func) {
			return ary(func, 1);
		}

		/**
		 * Creates a function that provides `value` to `wrapper` as its first
		 * argument. Any additional arguments provided to the function are appended
		 * to those provided to the `wrapper`. The wrapper is invoked with the `this`
		 * binding of the created function.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Function
		 * @param {*} value The value to wrap.
		 * @param {Function} [wrapper=identity] The wrapper function.
		 * @returns {Function} Returns the new function.
		 * @example
		 *
		 * var p = _.wrap(_.escape, function(func, text) {
		 *   return '<p>' + func(text) + '</p>';
		 * });
		 *
		 * p('fred, barney, & pebbles');
		 * // => '<p>fred, barney, &amp; pebbles</p>'
		 */
		function wrap(value, wrapper) {
			return partial(castFunction(wrapper), value);
		}

		/*------------------------------------------------------------------------*/

		/**
		 * Casts `value` as an array if it's not one.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.4.0
		 * @category Lang
		 * @param {*} value The value to inspect.
		 * @returns {Array} Returns the cast array.
		 * @example
		 *
		 * _.castArray(1);
		 * // => [1]
		 *
		 * _.castArray({ 'a': 1 });
		 * // => [{ 'a': 1 }]
		 *
		 * _.castArray('abc');
		 * // => ['abc']
		 *
		 * _.castArray(null);
		 * // => [null]
		 *
		 * _.castArray(undefined);
		 * // => [undefined]
		 *
		 * _.castArray();
		 * // => []
		 *
		 * var array = [1, 2, 3];
		 * console.log(_.castArray(array) === array);
		 * // => true
		 */
		function castArray() {
			if (!arguments.length) {
				return [];
			}
			var value = arguments[0];
			return isArray(value) ? value : [value];
		}

		/**
		 * Creates a shallow clone of `value`.
		 *
		 * **Note:** This method is loosely based on the
		 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
		 * and supports cloning arrays, array buffers, booleans, date objects, maps,
		 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
		 * arrays. The own enumerable properties of `arguments` objects are cloned
		 * as plain objects. An empty object is returned for uncloneable values such
		 * as error objects, functions, DOM nodes, and WeakMaps.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to clone.
		 * @returns {*} Returns the cloned value.
		 * @see _.cloneDeep
		 * @example
		 *
		 * var objects = [{ 'a': 1 }, { 'b': 2 }];
		 *
		 * var shallow = _.clone(objects);
		 * console.log(shallow[0] === objects[0]);
		 * // => true
		 */
		function clone(value) {
			return baseClone(value, CLONE_SYMBOLS_FLAG);
		}

		/**
		 * This method is like `_.clone` except that it accepts `customizer` which
		 * is invoked to produce the cloned value. If `customizer` returns `undefined`,
		 * cloning is handled by the method instead. The `customizer` is invoked with
		 * up to four arguments; (value [, index|key, object, stack]).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to clone.
		 * @param {Function} [customizer] The function to customize cloning.
		 * @returns {*} Returns the cloned value.
		 * @see _.cloneDeepWith
		 * @example
		 *
		 * function customizer(value) {
		 *   if (_.isElement(value)) {
		 *     return value.cloneNode(false);
		 *   }
		 * }
		 *
		 * var el = _.cloneWith(document.body, customizer);
		 *
		 * console.log(el === document.body);
		 * // => false
		 * console.log(el.nodeName);
		 * // => 'BODY'
		 * console.log(el.childNodes.length);
		 * // => 0
		 */
		function cloneWith(value, customizer) {
			customizer = typeof customizer == 'function' ? customizer : undefined;
			return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
		}

		/**
		 * This method is like `_.clone` except that it recursively clones `value`.
		 *
		 * @static
		 * @memberOf _
		 * @since 1.0.0
		 * @category Lang
		 * @param {*} value The value to recursively clone.
		 * @returns {*} Returns the deep cloned value.
		 * @see _.clone
		 * @example
		 *
		 * var objects = [{ 'a': 1 }, { 'b': 2 }];
		 *
		 * var deep = _.cloneDeep(objects);
		 * console.log(deep[0] === objects[0]);
		 * // => false
		 */
		function cloneDeep(value) {
			return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
		}

		/**
		 * This method is like `_.cloneWith` except that it recursively clones `value`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to recursively clone.
		 * @param {Function} [customizer] The function to customize cloning.
		 * @returns {*} Returns the deep cloned value.
		 * @see _.cloneWith
		 * @example
		 *
		 * function customizer(value) {
		 *   if (_.isElement(value)) {
		 *     return value.cloneNode(true);
		 *   }
		 * }
		 *
		 * var el = _.cloneDeepWith(document.body, customizer);
		 *
		 * console.log(el === document.body);
		 * // => false
		 * console.log(el.nodeName);
		 * // => 'BODY'
		 * console.log(el.childNodes.length);
		 * // => 20
		 */
		function cloneDeepWith(value, customizer) {
			customizer = typeof customizer == 'function' ? customizer : undefined;
			return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
		}

		/**
		 * Checks if `object` conforms to `source` by invoking the predicate
		 * properties of `source` with the corresponding property values of `object`.
		 *
		 * **Note:** This method is equivalent to `_.conforms` when `source` is
		 * partially applied.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.14.0
		 * @category Lang
		 * @param {Object} object The object to inspect.
		 * @param {Object} source The object of property predicates to conform to.
		 * @returns {boolean} Returns `true` if `object` conforms, else `false`.
		 * @example
		 *
		 * var object = { 'a': 1, 'b': 2 };
		 *
		 * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
		 * // => true
		 *
		 * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
		 * // => false
		 */
		function conformsTo(object, source) {
			return source == null || baseConformsTo(object, source, keys(source));
		}

		/**
		 * Performs a
		 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		 * comparison between two values to determine if they are equivalent.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to compare.
		 * @param {*} other The other value to compare.
		 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		 * @example
		 *
		 * var object = { 'a': 1 };
		 * var other = { 'a': 1 };
		 *
		 * _.eq(object, object);
		 * // => true
		 *
		 * _.eq(object, other);
		 * // => false
		 *
		 * _.eq('a', 'a');
		 * // => true
		 *
		 * _.eq('a', Object('a'));
		 * // => false
		 *
		 * _.eq(NaN, NaN);
		 * // => true
		 */
		function eq(value, other) {
			return value === other || (value !== value && other !== other);
		}

		/**
		 * Checks if `value` is greater than `other`.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.9.0
		 * @category Lang
		 * @param {*} value The value to compare.
		 * @param {*} other The other value to compare.
		 * @returns {boolean} Returns `true` if `value` is greater than `other`,
		 *  else `false`.
		 * @see _.lt
		 * @example
		 *
		 * _.gt(3, 1);
		 * // => true
		 *
		 * _.gt(3, 3);
		 * // => false
		 *
		 * _.gt(1, 3);
		 * // => false
		 */
		var gt = createRelationalOperation(baseGt);

		/**
		 * Checks if `value` is greater than or equal to `other`.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.9.0
		 * @category Lang
		 * @param {*} value The value to compare.
		 * @param {*} other The other value to compare.
		 * @returns {boolean} Returns `true` if `value` is greater than or equal to
		 *  `other`, else `false`.
		 * @see _.lte
		 * @example
		 *
		 * _.gte(3, 1);
		 * // => true
		 *
		 * _.gte(3, 3);
		 * // => true
		 *
		 * _.gte(1, 3);
		 * // => false
		 */
		var gte = createRelationalOperation(function (value, other) {
			return value >= other;
		});

		/**
		 * Checks if `value` is likely an `arguments` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		 *  else `false`.
		 * @example
		 *
		 * _.isArguments(function() { return arguments; }());
		 * // => true
		 *
		 * _.isArguments([1, 2, 3]);
		 * // => false
		 */
		var isArguments = baseIsArguments(function () { return arguments; }()) ? baseIsArguments : function (value) {
			return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
			  !propertyIsEnumerable.call(value, 'callee');
		};

		/**
		 * Checks if `value` is classified as an `Array` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
		 * @example
		 *
		 * _.isArray([1, 2, 3]);
		 * // => true
		 *
		 * _.isArray(document.body.children);
		 * // => false
		 *
		 * _.isArray('abc');
		 * // => false
		 *
		 * _.isArray(_.noop);
		 * // => false
		 */
		var isArray = Array.isArray;

		/**
		 * Checks if `value` is classified as an `ArrayBuffer` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.3.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
		 * @example
		 *
		 * _.isArrayBuffer(new ArrayBuffer(2));
		 * // => true
		 *
		 * _.isArrayBuffer(new Array(2));
		 * // => false
		 */
		var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

		/**
		 * Checks if `value` is array-like. A value is considered array-like if it's
		 * not a function and has a `value.length` that's an integer greater than or
		 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
		 * @example
		 *
		 * _.isArrayLike([1, 2, 3]);
		 * // => true
		 *
		 * _.isArrayLike(document.body.children);
		 * // => true
		 *
		 * _.isArrayLike('abc');
		 * // => true
		 *
		 * _.isArrayLike(_.noop);
		 * // => false
		 */
		function isArrayLike(value) {
			return value != null && isLength(value.length) && !isFunction(value);
		}

		/**
		 * This method is like `_.isArrayLike` except that it also checks if `value`
		 * is an object.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an array-like object,
		 *  else `false`.
		 * @example
		 *
		 * _.isArrayLikeObject([1, 2, 3]);
		 * // => true
		 *
		 * _.isArrayLikeObject(document.body.children);
		 * // => true
		 *
		 * _.isArrayLikeObject('abc');
		 * // => false
		 *
		 * _.isArrayLikeObject(_.noop);
		 * // => false
		 */
		function isArrayLikeObject(value) {
			return isObjectLike(value) && isArrayLike(value);
		}

		/**
		 * Checks if `value` is classified as a boolean primitive or object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
		 * @example
		 *
		 * _.isBoolean(false);
		 * // => true
		 *
		 * _.isBoolean(null);
		 * // => false
		 */
		function isBoolean(value) {
			return value === true || value === false ||
			  (isObjectLike(value) && baseGetTag(value) == boolTag);
		}

		/**
		 * Checks if `value` is a buffer.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.3.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
		 * @example
		 *
		 * _.isBuffer(new Buffer(2));
		 * // => true
		 *
		 * _.isBuffer(new Uint8Array(2));
		 * // => false
		 */
		var isBuffer = nativeIsBuffer || stubFalse;

		/**
		 * Checks if `value` is classified as a `Date` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
		 * @example
		 *
		 * _.isDate(new Date);
		 * // => true
		 *
		 * _.isDate('Mon April 23 2012');
		 * // => false
		 */
		var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

		/**
		 * Checks if `value` is likely a DOM element.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
		 * @example
		 *
		 * _.isElement(document.body);
		 * // => true
		 *
		 * _.isElement('<body>');
		 * // => false
		 */
		function isElement(value) {
			return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
		}

		/**
		 * Checks if `value` is an empty object, collection, map, or set.
		 *
		 * Objects are considered empty if they have no own enumerable string keyed
		 * properties.
		 *
		 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
		 * jQuery-like collections are considered empty if they have a `length` of `0`.
		 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
		 * @example
		 *
		 * _.isEmpty(null);
		 * // => true
		 *
		 * _.isEmpty(true);
		 * // => true
		 *
		 * _.isEmpty(1);
		 * // => true
		 *
		 * _.isEmpty([1, 2, 3]);
		 * // => false
		 *
		 * _.isEmpty({ 'a': 1 });
		 * // => false
		 */
		function isEmpty(value) {
			if (value == null) {
				return true;
			}
			if (isArrayLike(value) &&
				(isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
				  isBuffer(value) || isTypedArray(value) || isArguments(value))) {
				return !value.length;
			}
			var tag = getTag(value);
			if (tag == mapTag || tag == setTag) {
				return !value.size;
			}
			if (isPrototype(value)) {
				return !baseKeys(value).length;
			}
			for (var key in value) {
				if (hasOwnProperty.call(value, key)) {
					return false;
				}
			}
			return true;
		}

		/**
		 * Performs a deep comparison between two values to determine if they are
		 * equivalent.
		 *
		 * **Note:** This method supports comparing arrays, array buffers, booleans,
		 * date objects, error objects, maps, numbers, `Object` objects, regexes,
		 * sets, strings, symbols, and typed arrays. `Object` objects are compared
		 * by their own, not inherited, enumerable properties. Functions and DOM
		 * nodes are compared by strict equality, i.e. `===`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to compare.
		 * @param {*} other The other value to compare.
		 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		 * @example
		 *
		 * var object = { 'a': 1 };
		 * var other = { 'a': 1 };
		 *
		 * _.isEqual(object, other);
		 * // => true
		 *
		 * object === other;
		 * // => false
		 */
		function isEqual(value, other) {
			return baseIsEqual(value, other);
		}

		/**
		 * This method is like `_.isEqual` except that it accepts `customizer` which
		 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
		 * are handled by the method instead. The `customizer` is invoked with up to
		 * six arguments: (objValue, othValue [, index|key, object, other, stack]).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to compare.
		 * @param {*} other The other value to compare.
		 * @param {Function} [customizer] The function to customize comparisons.
		 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		 * @example
		 *
		 * function isGreeting(value) {
		 *   return /^h(?:i|ello)$/.test(value);
		 * }
		 *
		 * function customizer(objValue, othValue) {
		 *   if (isGreeting(objValue) && isGreeting(othValue)) {
		 *     return true;
		 *   }
		 * }
		 *
		 * var array = ['hello', 'goodbye'];
		 * var other = ['hi', 'goodbye'];
		 *
		 * _.isEqualWith(array, other, customizer);
		 * // => true
		 */
		function isEqualWith(value, other, customizer) {
			customizer = typeof customizer == 'function' ? customizer : undefined;
			var result = customizer ? customizer(value, other) : undefined;
			return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
		}

		/**
		 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
		 * `SyntaxError`, `TypeError`, or `URIError` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
		 * @example
		 *
		 * _.isError(new Error);
		 * // => true
		 *
		 * _.isError(Error);
		 * // => false
		 */
		function isError(value) {
			if (!isObjectLike(value)) {
				return false;
			}
			var tag = baseGetTag(value);
			return tag == errorTag || tag == domExcTag ||
			  (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
		}

		/**
		 * Checks if `value` is a finite primitive number.
		 *
		 * **Note:** This method is based on
		 * [`Number.isFinite`](https://mdn.io/Number/isFinite).
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
		 * @example
		 *
		 * _.isFinite(3);
		 * // => true
		 *
		 * _.isFinite(Number.MIN_VALUE);
		 * // => true
		 *
		 * _.isFinite(Infinity);
		 * // => false
		 *
		 * _.isFinite('3');
		 * // => false
		 */
		function isFinite(value) {
			return typeof value == 'number' && nativeIsFinite(value);
		}

		/**
		 * Checks if `value` is classified as a `Function` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
		 * @example
		 *
		 * _.isFunction(_);
		 * // => true
		 *
		 * _.isFunction(/abc/);
		 * // => false
		 */
		function isFunction(value) {
			if (!isObject(value)) {
				return false;
			}
			// The use of `Object#toString` avoids issues with the `typeof` operator
			// in Safari 9 which returns 'object' for typed arrays and other constructors.
			var tag = baseGetTag(value);
			return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
		}

		/**
		 * Checks if `value` is an integer.
		 *
		 * **Note:** This method is based on
		 * [`Number.isInteger`](https://mdn.io/Number/isInteger).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
		 * @example
		 *
		 * _.isInteger(3);
		 * // => true
		 *
		 * _.isInteger(Number.MIN_VALUE);
		 * // => false
		 *
		 * _.isInteger(Infinity);
		 * // => false
		 *
		 * _.isInteger('3');
		 * // => false
		 */
		function isInteger(value) {
			return typeof value == 'number' && value == toInteger(value);
		}

		/**
		 * Checks if `value` is a valid array-like length.
		 *
		 * **Note:** This method is loosely based on
		 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
		 * @example
		 *
		 * _.isLength(3);
		 * // => true
		 *
		 * _.isLength(Number.MIN_VALUE);
		 * // => false
		 *
		 * _.isLength(Infinity);
		 * // => false
		 *
		 * _.isLength('3');
		 * // => false
		 */
		function isLength(value) {
			return typeof value == 'number' &&
			  value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
		}

		/**
		 * Checks if `value` is the
		 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
		 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
		 * @example
		 *
		 * _.isObject({});
		 * // => true
		 *
		 * _.isObject([1, 2, 3]);
		 * // => true
		 *
		 * _.isObject(_.noop);
		 * // => true
		 *
		 * _.isObject(null);
		 * // => false
		 */
		function isObject(value) {
			var type = typeof value;
			return value != null && (type == 'object' || type == 'function');
		}

		/**
		 * Checks if `value` is object-like. A value is object-like if it's not `null`
		 * and has a `typeof` result of "object".
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
		 * @example
		 *
		 * _.isObjectLike({});
		 * // => true
		 *
		 * _.isObjectLike([1, 2, 3]);
		 * // => true
		 *
		 * _.isObjectLike(_.noop);
		 * // => false
		 *
		 * _.isObjectLike(null);
		 * // => false
		 */
		function isObjectLike(value) {
			return value != null && typeof value == 'object';
		}

		/**
		 * Checks if `value` is classified as a `Map` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.3.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
		 * @example
		 *
		 * _.isMap(new Map);
		 * // => true
		 *
		 * _.isMap(new WeakMap);
		 * // => false
		 */
		var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

		/**
		 * Performs a partial deep comparison between `object` and `source` to
		 * determine if `object` contains equivalent property values.
		 *
		 * **Note:** This method is equivalent to `_.matches` when `source` is
		 * partially applied.
		 *
		 * Partial comparisons will match empty array and empty object `source`
		 * values against any array or object value, respectively. See `_.isEqual`
		 * for a list of supported value comparisons.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Lang
		 * @param {Object} object The object to inspect.
		 * @param {Object} source The object of property values to match.
		 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
		 * @example
		 *
		 * var object = { 'a': 1, 'b': 2 };
		 *
		 * _.isMatch(object, { 'b': 2 });
		 * // => true
		 *
		 * _.isMatch(object, { 'b': 1 });
		 * // => false
		 */
		function isMatch(object, source) {
			return object === source || baseIsMatch(object, source, getMatchData(source));
		}

		/**
		 * This method is like `_.isMatch` except that it accepts `customizer` which
		 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
		 * are handled by the method instead. The `customizer` is invoked with five
		 * arguments: (objValue, srcValue, index|key, object, source).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {Object} object The object to inspect.
		 * @param {Object} source The object of property values to match.
		 * @param {Function} [customizer] The function to customize comparisons.
		 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
		 * @example
		 *
		 * function isGreeting(value) {
		 *   return /^h(?:i|ello)$/.test(value);
		 * }
		 *
		 * function customizer(objValue, srcValue) {
		 *   if (isGreeting(objValue) && isGreeting(srcValue)) {
		 *     return true;
		 *   }
		 * }
		 *
		 * var object = { 'greeting': 'hello' };
		 * var source = { 'greeting': 'hi' };
		 *
		 * _.isMatchWith(object, source, customizer);
		 * // => true
		 */
		function isMatchWith(object, source, customizer) {
			customizer = typeof customizer == 'function' ? customizer : undefined;
			return baseIsMatch(object, source, getMatchData(source), customizer);
		}

		/**
		 * Checks if `value` is `NaN`.
		 *
		 * **Note:** This method is based on
		 * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
		 * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
		 * `undefined` and other non-number values.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
		 * @example
		 *
		 * _.isNaN(NaN);
		 * // => true
		 *
		 * _.isNaN(new Number(NaN));
		 * // => true
		 *
		 * isNaN(undefined);
		 * // => true
		 *
		 * _.isNaN(undefined);
		 * // => false
		 */
		function isNaN(value) {
			// An `NaN` primitive is the only value that is not equal to itself.
			// Perform the `toStringTag` check first to avoid errors with some
			// ActiveX objects in IE.
			return isNumber(value) && value != +value;
		}

		/**
		 * Checks if `value` is a pristine native function.
		 *
		 * **Note:** This method can't reliably detect native functions in the presence
		 * of the core-js package because core-js circumvents this kind of detection.
		 * Despite multiple requests, the core-js maintainer has made it clear: any
		 * attempt to fix the detection will be obstructed. As a result, we're left
		 * with little choice but to throw an error. Unfortunately, this also affects
		 * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
		 * which rely on core-js.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a native function,
		 *  else `false`.
		 * @example
		 *
		 * _.isNative(Array.prototype.push);
		 * // => true
		 *
		 * _.isNative(_);
		 * // => false
		 */
		function isNative(value) {
			if (isMaskable(value)) {
				throw new Error(CORE_ERROR_TEXT);
			}
			return baseIsNative(value);
		}

		/**
		 * Checks if `value` is `null`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
		 * @example
		 *
		 * _.isNull(null);
		 * // => true
		 *
		 * _.isNull(void 0);
		 * // => false
		 */
		function isNull(value) {
			return value === null;
		}

		/**
		 * Checks if `value` is `null` or `undefined`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
		 * @example
		 *
		 * _.isNil(null);
		 * // => true
		 *
		 * _.isNil(void 0);
		 * // => true
		 *
		 * _.isNil(NaN);
		 * // => false
		 */
		function isNil(value) {
			return value == null;
		}

		/**
		 * Checks if `value` is classified as a `Number` primitive or object.
		 *
		 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
		 * classified as numbers, use the `_.isFinite` method.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
		 * @example
		 *
		 * _.isNumber(3);
		 * // => true
		 *
		 * _.isNumber(Number.MIN_VALUE);
		 * // => true
		 *
		 * _.isNumber(Infinity);
		 * // => true
		 *
		 * _.isNumber('3');
		 * // => false
		 */
		function isNumber(value) {
			return typeof value == 'number' ||
			  (isObjectLike(value) && baseGetTag(value) == numberTag);
		}

		/**
		 * Checks if `value` is a plain object, that is, an object created by the
		 * `Object` constructor or one with a `[[Prototype]]` of `null`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.8.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 * }
		 *
		 * _.isPlainObject(new Foo);
		 * // => false
		 *
		 * _.isPlainObject([1, 2, 3]);
		 * // => false
		 *
		 * _.isPlainObject({ 'x': 0, 'y': 0 });
		 * // => true
		 *
		 * _.isPlainObject(Object.create(null));
		 * // => true
		 */
		function isPlainObject(value) {
			if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
				return false;
			}
			var proto = getPrototype(value);
			if (proto === null) {
				return true;
			}
			var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
			return typeof Ctor == 'function' && Ctor instanceof Ctor &&
			  funcToString.call(Ctor) == objectCtorString;
		}

		/**
		 * Checks if `value` is classified as a `RegExp` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
		 * @example
		 *
		 * _.isRegExp(/abc/);
		 * // => true
		 *
		 * _.isRegExp('/abc/');
		 * // => false
		 */
		var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

		/**
		 * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
		 * double precision number which isn't the result of a rounded unsafe integer.
		 *
		 * **Note:** This method is based on
		 * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
		 * @example
		 *
		 * _.isSafeInteger(3);
		 * // => true
		 *
		 * _.isSafeInteger(Number.MIN_VALUE);
		 * // => false
		 *
		 * _.isSafeInteger(Infinity);
		 * // => false
		 *
		 * _.isSafeInteger('3');
		 * // => false
		 */
		function isSafeInteger(value) {
			return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
		}

		/**
		 * Checks if `value` is classified as a `Set` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.3.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
		 * @example
		 *
		 * _.isSet(new Set);
		 * // => true
		 *
		 * _.isSet(new WeakSet);
		 * // => false
		 */
		var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

		/**
		 * Checks if `value` is classified as a `String` primitive or object.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
		 * @example
		 *
		 * _.isString('abc');
		 * // => true
		 *
		 * _.isString(1);
		 * // => false
		 */
		function isString(value) {
			return typeof value == 'string' ||
			  (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
		}

		/**
		 * Checks if `value` is classified as a `Symbol` primitive or object.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
		 * @example
		 *
		 * _.isSymbol(Symbol.iterator);
		 * // => true
		 *
		 * _.isSymbol('abc');
		 * // => false
		 */
		function isSymbol(value) {
			return typeof value == 'symbol' ||
			  (isObjectLike(value) && baseGetTag(value) == symbolTag);
		}

		/**
		 * Checks if `value` is classified as a typed array.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
		 * @example
		 *
		 * _.isTypedArray(new Uint8Array);
		 * // => true
		 *
		 * _.isTypedArray([]);
		 * // => false
		 */
		var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

		/**
		 * Checks if `value` is `undefined`.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
		 * @example
		 *
		 * _.isUndefined(void 0);
		 * // => true
		 *
		 * _.isUndefined(null);
		 * // => false
		 */
		function isUndefined(value) {
			return value === undefined;
		}

		/**
		 * Checks if `value` is classified as a `WeakMap` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.3.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
		 * @example
		 *
		 * _.isWeakMap(new WeakMap);
		 * // => true
		 *
		 * _.isWeakMap(new Map);
		 * // => false
		 */
		function isWeakMap(value) {
			return isObjectLike(value) && getTag(value) == weakMapTag;
		}

		/**
		 * Checks if `value` is classified as a `WeakSet` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.3.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
		 * @example
		 *
		 * _.isWeakSet(new WeakSet);
		 * // => true
		 *
		 * _.isWeakSet(new Set);
		 * // => false
		 */
		function isWeakSet(value) {
			return isObjectLike(value) && baseGetTag(value) == weakSetTag;
		}

		/**
		 * Checks if `value` is less than `other`.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.9.0
		 * @category Lang
		 * @param {*} value The value to compare.
		 * @param {*} other The other value to compare.
		 * @returns {boolean} Returns `true` if `value` is less than `other`,
		 *  else `false`.
		 * @see _.gt
		 * @example
		 *
		 * _.lt(1, 3);
		 * // => true
		 *
		 * _.lt(3, 3);
		 * // => false
		 *
		 * _.lt(3, 1);
		 * // => false
		 */
		var lt = createRelationalOperation(baseLt);

		/**
		 * Checks if `value` is less than or equal to `other`.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.9.0
		 * @category Lang
		 * @param {*} value The value to compare.
		 * @param {*} other The other value to compare.
		 * @returns {boolean} Returns `true` if `value` is less than or equal to
		 *  `other`, else `false`.
		 * @see _.gte
		 * @example
		 *
		 * _.lte(1, 3);
		 * // => true
		 *
		 * _.lte(3, 3);
		 * // => true
		 *
		 * _.lte(3, 1);
		 * // => false
		 */
		var lte = createRelationalOperation(function (value, other) {
			return value <= other;
		});

		/**
		 * Converts `value` to an array.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Lang
		 * @param {*} value The value to convert.
		 * @returns {Array} Returns the converted array.
		 * @example
		 *
		 * _.toArray({ 'a': 1, 'b': 2 });
		 * // => [1, 2]
		 *
		 * _.toArray('abc');
		 * // => ['a', 'b', 'c']
		 *
		 * _.toArray(1);
		 * // => []
		 *
		 * _.toArray(null);
		 * // => []
		 */
		function toArray(value) {
			if (!value) {
				return [];
			}
			if (isArrayLike(value)) {
				return isString(value) ? stringToArray(value) : copyArray(value);
			}
			if (symIterator && value[symIterator]) {
				return iteratorToArray(value[symIterator]());
			}
			var tag = getTag(value),
				func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

			return func(value);
		}

		/**
		 * Converts `value` to a finite number.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.12.0
		 * @category Lang
		 * @param {*} value The value to convert.
		 * @returns {number} Returns the converted number.
		 * @example
		 *
		 * _.toFinite(3.2);
		 * // => 3.2
		 *
		 * _.toFinite(Number.MIN_VALUE);
		 * // => 5e-324
		 *
		 * _.toFinite(Infinity);
		 * // => 1.7976931348623157e+308
		 *
		 * _.toFinite('3.2');
		 * // => 3.2
		 */
		function toFinite(value) {
			if (!value) {
				return value === 0 ? value : 0;
			}
			value = toNumber(value);
			if (value === INFINITY || value === -INFINITY) {
				var sign = (value < 0 ? -1 : 1);
				return sign * MAX_INTEGER;
			}
			return value === value ? value : 0;
		}

		/**
		 * Converts `value` to an integer.
		 *
		 * **Note:** This method is loosely based on
		 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to convert.
		 * @returns {number} Returns the converted integer.
		 * @example
		 *
		 * _.toInteger(3.2);
		 * // => 3
		 *
		 * _.toInteger(Number.MIN_VALUE);
		 * // => 0
		 *
		 * _.toInteger(Infinity);
		 * // => 1.7976931348623157e+308
		 *
		 * _.toInteger('3.2');
		 * // => 3
		 */
		function toInteger(value) {
			var result = toFinite(value),
				remainder = result % 1;

			return result === result ? (remainder ? result - remainder : result) : 0;
		}

		/**
		 * Converts `value` to an integer suitable for use as the length of an
		 * array-like object.
		 *
		 * **Note:** This method is based on
		 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to convert.
		 * @returns {number} Returns the converted integer.
		 * @example
		 *
		 * _.toLength(3.2);
		 * // => 3
		 *
		 * _.toLength(Number.MIN_VALUE);
		 * // => 0
		 *
		 * _.toLength(Infinity);
		 * // => 4294967295
		 *
		 * _.toLength('3.2');
		 * // => 3
		 */
		function toLength(value) {
			return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
		}

		/**
		 * Converts `value` to a number.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to process.
		 * @returns {number} Returns the number.
		 * @example
		 *
		 * _.toNumber(3.2);
		 * // => 3.2
		 *
		 * _.toNumber(Number.MIN_VALUE);
		 * // => 5e-324
		 *
		 * _.toNumber(Infinity);
		 * // => Infinity
		 *
		 * _.toNumber('3.2');
		 * // => 3.2
		 */
		function toNumber(value) {
			if (typeof value == 'number') {
				return value;
			}
			if (isSymbol(value)) {
				return NAN;
			}
			if (isObject(value)) {
				var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
				value = isObject(other) ? (other + '') : other;
			}
			if (typeof value != 'string') {
				return value === 0 ? value : +value;
			}
			value = value.replace(reTrim, '');
			var isBinary = reIsBinary.test(value);
			return (isBinary || reIsOctal.test(value))
			  ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
			  : (reIsBadHex.test(value) ? NAN : +value);
		}

		/**
		 * Converts `value` to a plain object flattening inherited enumerable string
		 * keyed properties of `value` to own properties of the plain object.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Lang
		 * @param {*} value The value to convert.
		 * @returns {Object} Returns the converted plain object.
		 * @example
		 *
		 * function Foo() {
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.assign({ 'a': 1 }, new Foo);
		 * // => { 'a': 1, 'b': 2 }
		 *
		 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
		 * // => { 'a': 1, 'b': 2, 'c': 3 }
		 */
		function toPlainObject(value) {
			return copyObject(value, keysIn(value));
		}

		/**
		 * Converts `value` to a safe integer. A safe integer can be compared and
		 * represented correctly.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to convert.
		 * @returns {number} Returns the converted integer.
		 * @example
		 *
		 * _.toSafeInteger(3.2);
		 * // => 3
		 *
		 * _.toSafeInteger(Number.MIN_VALUE);
		 * // => 0
		 *
		 * _.toSafeInteger(Infinity);
		 * // => 9007199254740991
		 *
		 * _.toSafeInteger('3.2');
		 * // => 3
		 */
		function toSafeInteger(value) {
			return value
			  ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
			  : (value === 0 ? value : 0);
		}

		/**
		 * Converts `value` to a string. An empty string is returned for `null`
		 * and `undefined` values. The sign of `-0` is preserved.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to convert.
		 * @returns {string} Returns the converted string.
		 * @example
		 *
		 * _.toString(null);
		 * // => ''
		 *
		 * _.toString(-0);
		 * // => '-0'
		 *
		 * _.toString([1, 2, 3]);
		 * // => '1,2,3'
		 */
		function toString(value) {
			return value == null ? '' : baseToString(value);
		}

		/*------------------------------------------------------------------------*/

		/**
		 * Assigns own enumerable string keyed properties of source objects to the
		 * destination object. Source objects are applied from left to right.
		 * Subsequent sources overwrite property assignments of previous sources.
		 *
		 * **Note:** This method mutates `object` and is loosely based on
		 * [`Object.assign`](https://mdn.io/Object/assign).
		 *
		 * @static
		 * @memberOf _
		 * @since 0.10.0
		 * @category Object
		 * @param {Object} object The destination object.
		 * @param {...Object} [sources] The source objects.
		 * @returns {Object} Returns `object`.
		 * @see _.assignIn
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 * }
		 *
		 * function Bar() {
		 *   this.c = 3;
		 * }
		 *
		 * Foo.prototype.b = 2;
		 * Bar.prototype.d = 4;
		 *
		 * _.assign({ 'a': 0 }, new Foo, new Bar);
		 * // => { 'a': 1, 'c': 3 }
		 */
		var assign = createAssigner(function (object, source) {
			if (isPrototype(source) || isArrayLike(source)) {
				copyObject(source, keys(source), object);
				return;
			}
			for (var key in source) {
				if (hasOwnProperty.call(source, key)) {
					assignValue(object, key, source[key]);
				}
			}
		});

		/**
		 * This method is like `_.assign` except that it iterates over own and
		 * inherited source properties.
		 *
		 * **Note:** This method mutates `object`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @alias extend
		 * @category Object
		 * @param {Object} object The destination object.
		 * @param {...Object} [sources] The source objects.
		 * @returns {Object} Returns `object`.
		 * @see _.assign
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 * }
		 *
		 * function Bar() {
		 *   this.c = 3;
		 * }
		 *
		 * Foo.prototype.b = 2;
		 * Bar.prototype.d = 4;
		 *
		 * _.assignIn({ 'a': 0 }, new Foo, new Bar);
		 * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
		 */
		var assignIn = createAssigner(function (object, source) {
			copyObject(source, keysIn(source), object);
		});

		/**
		 * This method is like `_.assignIn` except that it accepts `customizer`
		 * which is invoked to produce the assigned values. If `customizer` returns
		 * `undefined`, assignment is handled by the method instead. The `customizer`
		 * is invoked with five arguments: (objValue, srcValue, key, object, source).
		 *
		 * **Note:** This method mutates `object`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @alias extendWith
		 * @category Object
		 * @param {Object} object The destination object.
		 * @param {...Object} sources The source objects.
		 * @param {Function} [customizer] The function to customize assigned values.
		 * @returns {Object} Returns `object`.
		 * @see _.assignWith
		 * @example
		 *
		 * function customizer(objValue, srcValue) {
		 *   return _.isUndefined(objValue) ? srcValue : objValue;
		 * }
		 *
		 * var defaults = _.partialRight(_.assignInWith, customizer);
		 *
		 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
		 * // => { 'a': 1, 'b': 2 }
		 */
		var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
			copyObject(source, keysIn(source), object, customizer);
		});

		/**
		 * This method is like `_.assign` except that it accepts `customizer`
		 * which is invoked to produce the assigned values. If `customizer` returns
		 * `undefined`, assignment is handled by the method instead. The `customizer`
		 * is invoked with five arguments: (objValue, srcValue, key, object, source).
		 *
		 * **Note:** This method mutates `object`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Object
		 * @param {Object} object The destination object.
		 * @param {...Object} sources The source objects.
		 * @param {Function} [customizer] The function to customize assigned values.
		 * @returns {Object} Returns `object`.
		 * @see _.assignInWith
		 * @example
		 *
		 * function customizer(objValue, srcValue) {
		 *   return _.isUndefined(objValue) ? srcValue : objValue;
		 * }
		 *
		 * var defaults = _.partialRight(_.assignWith, customizer);
		 *
		 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
		 * // => { 'a': 1, 'b': 2 }
		 */
		var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
			copyObject(source, keys(source), object, customizer);
		});

		/**
		 * Creates an array of values corresponding to `paths` of `object`.
		 *
		 * @static
		 * @memberOf _
		 * @since 1.0.0
		 * @category Object
		 * @param {Object} object The object to iterate over.
		 * @param {...(string|string[])} [paths] The property paths to pick.
		 * @returns {Array} Returns the picked values.
		 * @example
		 *
		 * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
		 *
		 * _.at(object, ['a[0].b.c', 'a[1]']);
		 * // => [3, 4]
		 */
		var at = flatRest(baseAt);

		/**
		 * Creates an object that inherits from the `prototype` object. If a
		 * `properties` object is given, its own enumerable string keyed properties
		 * are assigned to the created object.
		 *
		 * @static
		 * @memberOf _
		 * @since 2.3.0
		 * @category Object
		 * @param {Object} prototype The object to inherit from.
		 * @param {Object} [properties] The properties to assign to the object.
		 * @returns {Object} Returns the new object.
		 * @example
		 *
		 * function Shape() {
		 *   this.x = 0;
		 *   this.y = 0;
		 * }
		 *
		 * function Circle() {
		 *   Shape.call(this);
		 * }
		 *
		 * Circle.prototype = _.create(Shape.prototype, {
		 *   'constructor': Circle
		 * });
		 *
		 * var circle = new Circle;
		 * circle instanceof Circle;
		 * // => true
		 *
		 * circle instanceof Shape;
		 * // => true
		 */
		function create(prototype, properties) {
			var result = baseCreate(prototype);
			return properties == null ? result : baseAssign(result, properties);
		}

		/**
		 * Assigns own and inherited enumerable string keyed properties of source
		 * objects to the destination object for all destination properties that
		 * resolve to `undefined`. Source objects are applied from left to right.
		 * Once a property is set, additional values of the same property are ignored.
		 *
		 * **Note:** This method mutates `object`.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The destination object.
		 * @param {...Object} [sources] The source objects.
		 * @returns {Object} Returns `object`.
		 * @see _.defaultsDeep
		 * @example
		 *
		 * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
		 * // => { 'a': 1, 'b': 2 }
		 */
		var defaults = baseRest(function (args) {
			args.push(undefined, customDefaultsAssignIn);
			return apply(assignInWith, undefined, args);
		});

		/**
		 * This method is like `_.defaults` except that it recursively assigns
		 * default properties.
		 *
		 * **Note:** This method mutates `object`.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.10.0
		 * @category Object
		 * @param {Object} object The destination object.
		 * @param {...Object} [sources] The source objects.
		 * @returns {Object} Returns `object`.
		 * @see _.defaults
		 * @example
		 *
		 * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
		 * // => { 'a': { 'b': 2, 'c': 3 } }
		 */
		var defaultsDeep = baseRest(function (args) {
			args.push(undefined, customDefaultsMerge);
			return apply(mergeWith, undefined, args);
		});

		/**
		 * This method is like `_.find` except that it returns the key of the first
		 * element `predicate` returns truthy for instead of the element itself.
		 *
		 * @static
		 * @memberOf _
		 * @since 1.1.0
		 * @category Object
		 * @param {Object} object The object to inspect.
		 * @param {Function} [predicate=_.identity] The function invoked per iteration.
		 * @returns {string|undefined} Returns the key of the matched element,
		 *  else `undefined`.
		 * @example
		 *
		 * var users = {
		 *   'barney':  { 'age': 36, 'active': true },
		 *   'fred':    { 'age': 40, 'active': false },
		 *   'pebbles': { 'age': 1,  'active': true }
		 * };
		 *
		 * _.findKey(users, function(o) { return o.age < 40; });
		 * // => 'barney' (iteration order is not guaranteed)
		 *
		 * // The `_.matches` iteratee shorthand.
		 * _.findKey(users, { 'age': 1, 'active': true });
		 * // => 'pebbles'
		 *
		 * // The `_.matchesProperty` iteratee shorthand.
		 * _.findKey(users, ['active', false]);
		 * // => 'fred'
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.findKey(users, 'active');
		 * // => 'barney'
		 */
		function findKey(object, predicate) {
			return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
		}

		/**
		 * This method is like `_.findKey` except that it iterates over elements of
		 * a collection in the opposite order.
		 *
		 * @static
		 * @memberOf _
		 * @since 2.0.0
		 * @category Object
		 * @param {Object} object The object to inspect.
		 * @param {Function} [predicate=_.identity] The function invoked per iteration.
		 * @returns {string|undefined} Returns the key of the matched element,
		 *  else `undefined`.
		 * @example
		 *
		 * var users = {
		 *   'barney':  { 'age': 36, 'active': true },
		 *   'fred':    { 'age': 40, 'active': false },
		 *   'pebbles': { 'age': 1,  'active': true }
		 * };
		 *
		 * _.findLastKey(users, function(o) { return o.age < 40; });
		 * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
		 *
		 * // The `_.matches` iteratee shorthand.
		 * _.findLastKey(users, { 'age': 36, 'active': true });
		 * // => 'barney'
		 *
		 * // The `_.matchesProperty` iteratee shorthand.
		 * _.findLastKey(users, ['active', false]);
		 * // => 'fred'
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.findLastKey(users, 'active');
		 * // => 'pebbles'
		 */
		function findLastKey(object, predicate) {
			return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
		}

		/**
		 * Iterates over own and inherited enumerable string keyed properties of an
		 * object and invokes `iteratee` for each property. The iteratee is invoked
		 * with three arguments: (value, key, object). Iteratee functions may exit
		 * iteration early by explicitly returning `false`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.3.0
		 * @category Object
		 * @param {Object} object The object to iterate over.
		 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		 * @returns {Object} Returns `object`.
		 * @see _.forInRight
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.forIn(new Foo, function(value, key) {
		 *   console.log(key);
		 * });
		 * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
		 */
		function forIn(object, iteratee) {
			return object == null
			  ? object
			  : baseFor(object, getIteratee(iteratee, 3), keysIn);
		}

		/**
		 * This method is like `_.forIn` except that it iterates over properties of
		 * `object` in the opposite order.
		 *
		 * @static
		 * @memberOf _
		 * @since 2.0.0
		 * @category Object
		 * @param {Object} object The object to iterate over.
		 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		 * @returns {Object} Returns `object`.
		 * @see _.forIn
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.forInRight(new Foo, function(value, key) {
		 *   console.log(key);
		 * });
		 * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
		 */
		function forInRight(object, iteratee) {
			return object == null
			  ? object
			  : baseForRight(object, getIteratee(iteratee, 3), keysIn);
		}

		/**
		 * Iterates over own enumerable string keyed properties of an object and
		 * invokes `iteratee` for each property. The iteratee is invoked with three
		 * arguments: (value, key, object). Iteratee functions may exit iteration
		 * early by explicitly returning `false`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.3.0
		 * @category Object
		 * @param {Object} object The object to iterate over.
		 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		 * @returns {Object} Returns `object`.
		 * @see _.forOwnRight
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.forOwn(new Foo, function(value, key) {
		 *   console.log(key);
		 * });
		 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
		 */
		function forOwn(object, iteratee) {
			return object && baseForOwn(object, getIteratee(iteratee, 3));
		}

		/**
		 * This method is like `_.forOwn` except that it iterates over properties of
		 * `object` in the opposite order.
		 *
		 * @static
		 * @memberOf _
		 * @since 2.0.0
		 * @category Object
		 * @param {Object} object The object to iterate over.
		 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		 * @returns {Object} Returns `object`.
		 * @see _.forOwn
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.forOwnRight(new Foo, function(value, key) {
		 *   console.log(key);
		 * });
		 * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
		 */
		function forOwnRight(object, iteratee) {
			return object && baseForOwnRight(object, getIteratee(iteratee, 3));
		}

		/**
		 * Creates an array of function property names from own enumerable properties
		 * of `object`.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The object to inspect.
		 * @returns {Array} Returns the function names.
		 * @see _.functionsIn
		 * @example
		 *
		 * function Foo() {
		 *   this.a = _.constant('a');
		 *   this.b = _.constant('b');
		 * }
		 *
		 * Foo.prototype.c = _.constant('c');
		 *
		 * _.functions(new Foo);
		 * // => ['a', 'b']
		 */
		function functions(object) {
			return object == null ? [] : baseFunctions(object, keys(object));
		}

		/**
		 * Creates an array of function property names from own and inherited
		 * enumerable properties of `object`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Object
		 * @param {Object} object The object to inspect.
		 * @returns {Array} Returns the function names.
		 * @see _.functions
		 * @example
		 *
		 * function Foo() {
		 *   this.a = _.constant('a');
		 *   this.b = _.constant('b');
		 * }
		 *
		 * Foo.prototype.c = _.constant('c');
		 *
		 * _.functionsIn(new Foo);
		 * // => ['a', 'b', 'c']
		 */
		function functionsIn(object) {
			return object == null ? [] : baseFunctions(object, keysIn(object));
		}

		/**
		 * Gets the value at `path` of `object`. If the resolved value is
		 * `undefined`, the `defaultValue` is returned in its place.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.7.0
		 * @category Object
		 * @param {Object} object The object to query.
		 * @param {Array|string} path The path of the property to get.
		 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
		 * @returns {*} Returns the resolved value.
		 * @example
		 *
		 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
		 *
		 * _.get(object, 'a[0].b.c');
		 * // => 3
		 *
		 * _.get(object, ['a', '0', 'b', 'c']);
		 * // => 3
		 *
		 * _.get(object, 'a.b.c', 'default');
		 * // => 'default'
		 */
		function get(object, path, defaultValue) {
			var result = object == null ? undefined : baseGet(object, path);
			return result === undefined ? defaultValue : result;
		}

		/**
		 * Checks if `path` is a direct property of `object`.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The object to query.
		 * @param {Array|string} path The path to check.
		 * @returns {boolean} Returns `true` if `path` exists, else `false`.
		 * @example
		 *
		 * var object = { 'a': { 'b': 2 } };
		 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
		 *
		 * _.has(object, 'a');
		 * // => true
		 *
		 * _.has(object, 'a.b');
		 * // => true
		 *
		 * _.has(object, ['a', 'b']);
		 * // => true
		 *
		 * _.has(other, 'a');
		 * // => false
		 */
		function has(object, path) {
			return object != null && hasPath(object, path, baseHas);
		}

		/**
		 * Checks if `path` is a direct or inherited property of `object`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Object
		 * @param {Object} object The object to query.
		 * @param {Array|string} path The path to check.
		 * @returns {boolean} Returns `true` if `path` exists, else `false`.
		 * @example
		 *
		 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
		 *
		 * _.hasIn(object, 'a');
		 * // => true
		 *
		 * _.hasIn(object, 'a.b');
		 * // => true
		 *
		 * _.hasIn(object, ['a', 'b']);
		 * // => true
		 *
		 * _.hasIn(object, 'b');
		 * // => false
		 */
		function hasIn(object, path) {
			return object != null && hasPath(object, path, baseHasIn);
		}

		/**
		 * Creates an object composed of the inverted keys and values of `object`.
		 * If `object` contains duplicate values, subsequent values overwrite
		 * property assignments of previous values.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.7.0
		 * @category Object
		 * @param {Object} object The object to invert.
		 * @returns {Object} Returns the new inverted object.
		 * @example
		 *
		 * var object = { 'a': 1, 'b': 2, 'c': 1 };
		 *
		 * _.invert(object);
		 * // => { '1': 'c', '2': 'b' }
		 */
		var invert = createInverter(function (result, value, key) {
			result[value] = key;
		}, constant(identity));

		/**
		 * This method is like `_.invert` except that the inverted object is generated
		 * from the results of running each element of `object` thru `iteratee`. The
		 * corresponding inverted value of each inverted key is an array of keys
		 * responsible for generating the inverted value. The iteratee is invoked
		 * with one argument: (value).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.1.0
		 * @category Object
		 * @param {Object} object The object to invert.
		 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		 * @returns {Object} Returns the new inverted object.
		 * @example
		 *
		 * var object = { 'a': 1, 'b': 2, 'c': 1 };
		 *
		 * _.invertBy(object);
		 * // => { '1': ['a', 'c'], '2': ['b'] }
		 *
		 * _.invertBy(object, function(value) {
		 *   return 'group' + value;
		 * });
		 * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
		 */
		var invertBy = createInverter(function (result, value, key) {
			if (hasOwnProperty.call(result, value)) {
				result[value].push(key);
			} else {
				result[value] = [key];
			}
		}, getIteratee);

		/**
		 * Invokes the method at `path` of `object`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Object
		 * @param {Object} object The object to query.
		 * @param {Array|string} path The path of the method to invoke.
		 * @param {...*} [args] The arguments to invoke the method with.
		 * @returns {*} Returns the result of the invoked method.
		 * @example
		 *
		 * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
		 *
		 * _.invoke(object, 'a[0].b.c.slice', 1, 3);
		 * // => [2, 3]
		 */
		var invoke = baseRest(baseInvoke);

		/**
		 * Creates an array of the own enumerable property names of `object`.
		 *
		 * **Note:** Non-object values are coerced to objects. See the
		 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
		 * for more details.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.keys(new Foo);
		 * // => ['a', 'b'] (iteration order is not guaranteed)
		 *
		 * _.keys('hi');
		 * // => ['0', '1']
		 */
		function keys(object) {
			return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
		}

		/**
		 * Creates an array of the own and inherited enumerable property names of `object`.
		 *
		 * **Note:** Non-object values are coerced to objects.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Object
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.keysIn(new Foo);
		 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
		 */
		function keysIn(object) {
			return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
		}

		/**
		 * The opposite of `_.mapValues`; this method creates an object with the
		 * same values as `object` and keys generated by running each own enumerable
		 * string keyed property of `object` thru `iteratee`. The iteratee is invoked
		 * with three arguments: (value, key, object).
		 *
		 * @static
		 * @memberOf _
		 * @since 3.8.0
		 * @category Object
		 * @param {Object} object The object to iterate over.
		 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		 * @returns {Object} Returns the new mapped object.
		 * @see _.mapValues
		 * @example
		 *
		 * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
		 *   return key + value;
		 * });
		 * // => { 'a1': 1, 'b2': 2 }
		 */
		function mapKeys(object, iteratee) {
			var result = {};
			iteratee = getIteratee(iteratee, 3);

			baseForOwn(object, function (value, key, object) {
				baseAssignValue(result, iteratee(value, key, object), value);
			});
			return result;
		}

		/**
		 * Creates an object with the same keys as `object` and values generated
		 * by running each own enumerable string keyed property of `object` thru
		 * `iteratee`. The iteratee is invoked with three arguments:
		 * (value, key, object).
		 *
		 * @static
		 * @memberOf _
		 * @since 2.4.0
		 * @category Object
		 * @param {Object} object The object to iterate over.
		 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		 * @returns {Object} Returns the new mapped object.
		 * @see _.mapKeys
		 * @example
		 *
		 * var users = {
		 *   'fred':    { 'user': 'fred',    'age': 40 },
		 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
		 * };
		 *
		 * _.mapValues(users, function(o) { return o.age; });
		 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.mapValues(users, 'age');
		 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
		 */
		function mapValues(object, iteratee) {
			var result = {};
			iteratee = getIteratee(iteratee, 3);

			baseForOwn(object, function (value, key, object) {
				baseAssignValue(result, key, iteratee(value, key, object));
			});
			return result;
		}

		/**
		 * This method is like `_.assign` except that it recursively merges own and
		 * inherited enumerable string keyed properties of source objects into the
		 * destination object. Source properties that resolve to `undefined` are
		 * skipped if a destination value exists. Array and plain object properties
		 * are merged recursively. Other objects and value types are overridden by
		 * assignment. Source objects are applied from left to right. Subsequent
		 * sources overwrite property assignments of previous sources.
		 *
		 * **Note:** This method mutates `object`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.5.0
		 * @category Object
		 * @param {Object} object The destination object.
		 * @param {...Object} [sources] The source objects.
		 * @returns {Object} Returns `object`.
		 * @example
		 *
		 * var object = {
		 *   'a': [{ 'b': 2 }, { 'd': 4 }]
		 * };
		 *
		 * var other = {
		 *   'a': [{ 'c': 3 }, { 'e': 5 }]
		 * };
		 *
		 * _.merge(object, other);
		 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
		 */
		var merge = createAssigner(function (object, source, srcIndex) {
			baseMerge(object, source, srcIndex);
		});

		/**
		 * This method is like `_.merge` except that it accepts `customizer` which
		 * is invoked to produce the merged values of the destination and source
		 * properties. If `customizer` returns `undefined`, merging is handled by the
		 * method instead. The `customizer` is invoked with six arguments:
		 * (objValue, srcValue, key, object, source, stack).
		 *
		 * **Note:** This method mutates `object`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Object
		 * @param {Object} object The destination object.
		 * @param {...Object} sources The source objects.
		 * @param {Function} customizer The function to customize assigned values.
		 * @returns {Object} Returns `object`.
		 * @example
		 *
		 * function customizer(objValue, srcValue) {
		 *   if (_.isArray(objValue)) {
		 *     return objValue.concat(srcValue);
		 *   }
		 * }
		 *
		 * var object = { 'a': [1], 'b': [2] };
		 * var other = { 'a': [3], 'b': [4] };
		 *
		 * _.mergeWith(object, other, customizer);
		 * // => { 'a': [1, 3], 'b': [2, 4] }
		 */
		var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
			baseMerge(object, source, srcIndex, customizer);
		});

		/**
		 * The opposite of `_.pick`; this method creates an object composed of the
		 * own and inherited enumerable property paths of `object` that are not omitted.
		 *
		 * **Note:** This method is considerably slower than `_.pick`.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The source object.
		 * @param {...(string|string[])} [paths] The property paths to omit.
		 * @returns {Object} Returns the new object.
		 * @example
		 *
		 * var object = { 'a': 1, 'b': '2', 'c': 3 };
		 *
		 * _.omit(object, ['a', 'c']);
		 * // => { 'b': '2' }
		 */
		var omit = flatRest(function (object, paths) {
			var result = {};
			if (object == null) {
				return result;
			}
			var isDeep = false;
			paths = arrayMap(paths, function (path) {
				path = castPath(path, object);
				isDeep || (isDeep = path.length > 1);
				return path;
			});
			copyObject(object, getAllKeysIn(object), result);
			if (isDeep) {
				result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
			}
			var length = paths.length;
			while (length--) {
				baseUnset(result, paths[length]);
			}
			return result;
		});

		/**
		 * The opposite of `_.pickBy`; this method creates an object composed of
		 * the own and inherited enumerable string keyed properties of `object` that
		 * `predicate` doesn't return truthy for. The predicate is invoked with two
		 * arguments: (value, key).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Object
		 * @param {Object} object The source object.
		 * @param {Function} [predicate=_.identity] The function invoked per property.
		 * @returns {Object} Returns the new object.
		 * @example
		 *
		 * var object = { 'a': 1, 'b': '2', 'c': 3 };
		 *
		 * _.omitBy(object, _.isNumber);
		 * // => { 'b': '2' }
		 */
		function omitBy(object, predicate) {
			return pickBy(object, negate(getIteratee(predicate)));
		}

		/**
		 * Creates an object composed of the picked `object` properties.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The source object.
		 * @param {...(string|string[])} [paths] The property paths to pick.
		 * @returns {Object} Returns the new object.
		 * @example
		 *
		 * var object = { 'a': 1, 'b': '2', 'c': 3 };
		 *
		 * _.pick(object, ['a', 'c']);
		 * // => { 'a': 1, 'c': 3 }
		 */
		var pick = flatRest(function (object, paths) {
			return object == null ? {} : basePick(object, paths);
		});

		/**
		 * Creates an object composed of the `object` properties `predicate` returns
		 * truthy for. The predicate is invoked with two arguments: (value, key).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Object
		 * @param {Object} object The source object.
		 * @param {Function} [predicate=_.identity] The function invoked per property.
		 * @returns {Object} Returns the new object.
		 * @example
		 *
		 * var object = { 'a': 1, 'b': '2', 'c': 3 };
		 *
		 * _.pickBy(object, _.isNumber);
		 * // => { 'a': 1, 'c': 3 }
		 */
		function pickBy(object, predicate) {
			if (object == null) {
				return {};
			}
			var props = arrayMap(getAllKeysIn(object), function (prop) {
				return [prop];
			});
			predicate = getIteratee(predicate);
			return basePickBy(object, props, function (value, path) {
				return predicate(value, path[0]);
			});
		}

		/**
		 * This method is like `_.get` except that if the resolved value is a
		 * function it's invoked with the `this` binding of its parent object and
		 * its result is returned.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The object to query.
		 * @param {Array|string} path The path of the property to resolve.
		 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
		 * @returns {*} Returns the resolved value.
		 * @example
		 *
		 * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
		 *
		 * _.result(object, 'a[0].b.c1');
		 * // => 3
		 *
		 * _.result(object, 'a[0].b.c2');
		 * // => 4
		 *
		 * _.result(object, 'a[0].b.c3', 'default');
		 * // => 'default'
		 *
		 * _.result(object, 'a[0].b.c3', _.constant('default'));
		 * // => 'default'
		 */
		function result(object, path, defaultValue) {
			path = castPath(path, object);

			var index = -1,
				length = path.length;

			// Ensure the loop is entered when path is empty.
			if (!length) {
				length = 1;
				object = undefined;
			}
			while (++index < length) {
				var value = object == null ? undefined : object[toKey(path[index])];
				if (value === undefined) {
					index = length;
					value = defaultValue;
				}
				object = isFunction(value) ? value.call(object) : value;
			}
			return object;
		}

		/**
		 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
		 * it's created. Arrays are created for missing index properties while objects
		 * are created for all other missing properties. Use `_.setWith` to customize
		 * `path` creation.
		 *
		 * **Note:** This method mutates `object`.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.7.0
		 * @category Object
		 * @param {Object} object The object to modify.
		 * @param {Array|string} path The path of the property to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns `object`.
		 * @example
		 *
		 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
		 *
		 * _.set(object, 'a[0].b.c', 4);
		 * console.log(object.a[0].b.c);
		 * // => 4
		 *
		 * _.set(object, ['x', '0', 'y', 'z'], 5);
		 * console.log(object.x[0].y.z);
		 * // => 5
		 */
		function set(object, path, value) {
			return object == null ? object : baseSet(object, path, value);
		}

		/**
		 * This method is like `_.set` except that it accepts `customizer` which is
		 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
		 * path creation is handled by the method instead. The `customizer` is invoked
		 * with three arguments: (nsValue, key, nsObject).
		 *
		 * **Note:** This method mutates `object`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Object
		 * @param {Object} object The object to modify.
		 * @param {Array|string} path The path of the property to set.
		 * @param {*} value The value to set.
		 * @param {Function} [customizer] The function to customize assigned values.
		 * @returns {Object} Returns `object`.
		 * @example
		 *
		 * var object = {};
		 *
		 * _.setWith(object, '[0][1]', 'a', Object);
		 * // => { '0': { '1': 'a' } }
		 */
		function setWith(object, path, value, customizer) {
			customizer = typeof customizer == 'function' ? customizer : undefined;
			return object == null ? object : baseSet(object, path, value, customizer);
		}

		/**
		 * Creates an array of own enumerable string keyed-value pairs for `object`
		 * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
		 * entries are returned.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @alias entries
		 * @category Object
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the key-value pairs.
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.toPairs(new Foo);
		 * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
		 */
		var toPairs = createToPairs(keys);

		/**
		 * Creates an array of own and inherited enumerable string keyed-value pairs
		 * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
		 * or set, its entries are returned.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @alias entriesIn
		 * @category Object
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the key-value pairs.
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.toPairsIn(new Foo);
		 * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
		 */
		var toPairsIn = createToPairs(keysIn);

		/**
		 * An alternative to `_.reduce`; this method transforms `object` to a new
		 * `accumulator` object which is the result of running each of its own
		 * enumerable string keyed properties thru `iteratee`, with each invocation
		 * potentially mutating the `accumulator` object. If `accumulator` is not
		 * provided, a new object with the same `[[Prototype]]` will be used. The
		 * iteratee is invoked with four arguments: (accumulator, value, key, object).
		 * Iteratee functions may exit iteration early by explicitly returning `false`.
		 *
		 * @static
		 * @memberOf _
		 * @since 1.3.0
		 * @category Object
		 * @param {Object} object The object to iterate over.
		 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		 * @param {*} [accumulator] The custom accumulator value.
		 * @returns {*} Returns the accumulated value.
		 * @example
		 *
		 * _.transform([2, 3, 4], function(result, n) {
		 *   result.push(n *= n);
		 *   return n % 2 == 0;
		 * }, []);
		 * // => [4, 9]
		 *
		 * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
		 *   (result[value] || (result[value] = [])).push(key);
		 * }, {});
		 * // => { '1': ['a', 'c'], '2': ['b'] }
		 */
		function transform(object, iteratee, accumulator) {
			var isArr = isArray(object),
				isArrLike = isArr || isBuffer(object) || isTypedArray(object);

			iteratee = getIteratee(iteratee, 4);
			if (accumulator == null) {
				var Ctor = object && object.constructor;
				if (isArrLike) {
					accumulator = isArr ? new Ctor : [];
				}
				else if (isObject(object)) {
					accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
				}
				else {
					accumulator = {};
				}
			}
			(isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
				return iteratee(accumulator, value, index, object);
			});
			return accumulator;
		}

		/**
		 * Removes the property at `path` of `object`.
		 *
		 * **Note:** This method mutates `object`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Object
		 * @param {Object} object The object to modify.
		 * @param {Array|string} path The path of the property to unset.
		 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
		 * @example
		 *
		 * var object = { 'a': [{ 'b': { 'c': 7 } }] };
		 * _.unset(object, 'a[0].b.c');
		 * // => true
		 *
		 * console.log(object);
		 * // => { 'a': [{ 'b': {} }] };
		 *
		 * _.unset(object, ['a', '0', 'b', 'c']);
		 * // => true
		 *
		 * console.log(object);
		 * // => { 'a': [{ 'b': {} }] };
		 */
		function unset(object, path) {
			return object == null ? true : baseUnset(object, path);
		}

		/**
		 * This method is like `_.set` except that accepts `updater` to produce the
		 * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
		 * is invoked with one argument: (value).
		 *
		 * **Note:** This method mutates `object`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.6.0
		 * @category Object
		 * @param {Object} object The object to modify.
		 * @param {Array|string} path The path of the property to set.
		 * @param {Function} updater The function to produce the updated value.
		 * @returns {Object} Returns `object`.
		 * @example
		 *
		 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
		 *
		 * _.update(object, 'a[0].b.c', function(n) { return n * n; });
		 * console.log(object.a[0].b.c);
		 * // => 9
		 *
		 * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
		 * console.log(object.x[0].y.z);
		 * // => 0
		 */
		function update(object, path, updater) {
			return object == null ? object : baseUpdate(object, path, castFunction(updater));
		}

		/**
		 * This method is like `_.update` except that it accepts `customizer` which is
		 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
		 * path creation is handled by the method instead. The `customizer` is invoked
		 * with three arguments: (nsValue, key, nsObject).
		 *
		 * **Note:** This method mutates `object`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.6.0
		 * @category Object
		 * @param {Object} object The object to modify.
		 * @param {Array|string} path The path of the property to set.
		 * @param {Function} updater The function to produce the updated value.
		 * @param {Function} [customizer] The function to customize assigned values.
		 * @returns {Object} Returns `object`.
		 * @example
		 *
		 * var object = {};
		 *
		 * _.updateWith(object, '[0][1]', _.constant('a'), Object);
		 * // => { '0': { '1': 'a' } }
		 */
		function updateWith(object, path, updater, customizer) {
			customizer = typeof customizer == 'function' ? customizer : undefined;
			return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
		}

		/**
		 * Creates an array of the own enumerable string keyed property values of `object`.
		 *
		 * **Note:** Non-object values are coerced to objects.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property values.
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.values(new Foo);
		 * // => [1, 2] (iteration order is not guaranteed)
		 *
		 * _.values('hi');
		 * // => ['h', 'i']
		 */
		function values(object) {
			return object == null ? [] : baseValues(object, keys(object));
		}

		/**
		 * Creates an array of the own and inherited enumerable string keyed property
		 * values of `object`.
		 *
		 * **Note:** Non-object values are coerced to objects.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Object
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property values.
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.valuesIn(new Foo);
		 * // => [1, 2, 3] (iteration order is not guaranteed)
		 */
		function valuesIn(object) {
			return object == null ? [] : baseValues(object, keysIn(object));
		}

		/*------------------------------------------------------------------------*/

		/**
		 * Clamps `number` within the inclusive `lower` and `upper` bounds.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Number
		 * @param {number} number The number to clamp.
		 * @param {number} [lower] The lower bound.
		 * @param {number} upper The upper bound.
		 * @returns {number} Returns the clamped number.
		 * @example
		 *
		 * _.clamp(-10, -5, 5);
		 * // => -5
		 *
		 * _.clamp(10, -5, 5);
		 * // => 5
		 */
		function clamp(number, lower, upper) {
			if (upper === undefined) {
				upper = lower;
				lower = undefined;
			}
			if (upper !== undefined) {
				upper = toNumber(upper);
				upper = upper === upper ? upper : 0;
			}
			if (lower !== undefined) {
				lower = toNumber(lower);
				lower = lower === lower ? lower : 0;
			}
			return baseClamp(toNumber(number), lower, upper);
		}

		/**
		 * Checks if `n` is between `start` and up to, but not including, `end`. If
		 * `end` is not specified, it's set to `start` with `start` then set to `0`.
		 * If `start` is greater than `end` the params are swapped to support
		 * negative ranges.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.3.0
		 * @category Number
		 * @param {number} number The number to check.
		 * @param {number} [start=0] The start of the range.
		 * @param {number} end The end of the range.
		 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
		 * @see _.range, _.rangeRight
		 * @example
		 *
		 * _.inRange(3, 2, 4);
		 * // => true
		 *
		 * _.inRange(4, 8);
		 * // => true
		 *
		 * _.inRange(4, 2);
		 * // => false
		 *
		 * _.inRange(2, 2);
		 * // => false
		 *
		 * _.inRange(1.2, 2);
		 * // => true
		 *
		 * _.inRange(5.2, 4);
		 * // => false
		 *
		 * _.inRange(-3, -2, -6);
		 * // => true
		 */
		function inRange(number, start, end) {
			start = toFinite(start);
			if (end === undefined) {
				end = start;
				start = 0;
			} else {
				end = toFinite(end);
			}
			number = toNumber(number);
			return baseInRange(number, start, end);
		}

		/**
		 * Produces a random number between the inclusive `lower` and `upper` bounds.
		 * If only one argument is provided a number between `0` and the given number
		 * is returned. If `floating` is `true`, or either `lower` or `upper` are
		 * floats, a floating-point number is returned instead of an integer.
		 *
		 * **Note:** JavaScript follows the IEEE-754 standard for resolving
		 * floating-point values which can produce unexpected results.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.7.0
		 * @category Number
		 * @param {number} [lower=0] The lower bound.
		 * @param {number} [upper=1] The upper bound.
		 * @param {boolean} [floating] Specify returning a floating-point number.
		 * @returns {number} Returns the random number.
		 * @example
		 *
		 * _.random(0, 5);
		 * // => an integer between 0 and 5
		 *
		 * _.random(5);
		 * // => also an integer between 0 and 5
		 *
		 * _.random(5, true);
		 * // => a floating-point number between 0 and 5
		 *
		 * _.random(1.2, 5.2);
		 * // => a floating-point number between 1.2 and 5.2
		 */
		function random(lower, upper, floating) {
			if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
				upper = floating = undefined;
			}
			if (floating === undefined) {
				if (typeof upper == 'boolean') {
					floating = upper;
					upper = undefined;
				}
				else if (typeof lower == 'boolean') {
					floating = lower;
					lower = undefined;
				}
			}
			if (lower === undefined && upper === undefined) {
				lower = 0;
				upper = 1;
			}
			else {
				lower = toFinite(lower);
				if (upper === undefined) {
					upper = lower;
					lower = 0;
				} else {
					upper = toFinite(upper);
				}
			}
			if (lower > upper) {
				var temp = lower;
				lower = upper;
				upper = temp;
			}
			if (floating || lower % 1 || upper % 1) {
				var rand = nativeRandom();
				return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
			}
			return baseRandom(lower, upper);
		}

		/*------------------------------------------------------------------------*/

		/**
		 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category String
		 * @param {string} [string=''] The string to convert.
		 * @returns {string} Returns the camel cased string.
		 * @example
		 *
		 * _.camelCase('Foo Bar');
		 * // => 'fooBar'
		 *
		 * _.camelCase('--foo-bar--');
		 * // => 'fooBar'
		 *
		 * _.camelCase('__FOO_BAR__');
		 * // => 'fooBar'
		 */
		var camelCase = createCompounder(function (result, word, index) {
			word = word.toLowerCase();
			return result + (index ? capitalize(word) : word);
		});

		/**
		 * Converts the first character of `string` to upper case and the remaining
		 * to lower case.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category String
		 * @param {string} [string=''] The string to capitalize.
		 * @returns {string} Returns the capitalized string.
		 * @example
		 *
		 * _.capitalize('FRED');
		 * // => 'Fred'
		 */
		function capitalize(string) {
			return upperFirst(toString(string).toLowerCase());
		}

		/**
		 * Deburrs `string` by converting
		 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
		 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
		 * letters to basic Latin letters and removing
		 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category String
		 * @param {string} [string=''] The string to deburr.
		 * @returns {string} Returns the deburred string.
		 * @example
		 *
		 * _.deburr('déjà vu');
		 * // => 'deja vu'
		 */
		function deburr(string) {
			string = toString(string);
			return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
		}

		/**
		 * Checks if `string` ends with the given target string.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category String
		 * @param {string} [string=''] The string to inspect.
		 * @param {string} [target] The string to search for.
		 * @param {number} [position=string.length] The position to search up to.
		 * @returns {boolean} Returns `true` if `string` ends with `target`,
		 *  else `false`.
		 * @example
		 *
		 * _.endsWith('abc', 'c');
		 * // => true
		 *
		 * _.endsWith('abc', 'b');
		 * // => false
		 *
		 * _.endsWith('abc', 'b', 2);
		 * // => true
		 */
		function endsWith(string, target, position) {
			string = toString(string);
			target = baseToString(target);

			var length = string.length;
			position = position === undefined
			  ? length
			  : baseClamp(toInteger(position), 0, length);

			var end = position;
			position -= target.length;
			return position >= 0 && string.slice(position, end) == target;
		}

		/**
		 * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
		 * corresponding HTML entities.
		 *
		 * **Note:** No other characters are escaped. To escape additional
		 * characters use a third-party library like [_he_](https://mths.be/he).
		 *
		 * Though the ">" character is escaped for symmetry, characters like
		 * ">" and "/" don't need escaping in HTML and have no special meaning
		 * unless they're part of a tag or unquoted attribute value. See
		 * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
		 * (under "semi-related fun fact") for more details.
		 *
		 * When working with HTML you should always
		 * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
		 * XSS vectors.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category String
		 * @param {string} [string=''] The string to escape.
		 * @returns {string} Returns the escaped string.
		 * @example
		 *
		 * _.escape('fred, barney, & pebbles');
		 * // => 'fred, barney, &amp; pebbles'
		 */
		function escape(string) {
			string = toString(string);
			return (string && reHasUnescapedHtml.test(string))
			  ? string.replace(reUnescapedHtml, escapeHtmlChar)
			  : string;
		}

		/**
		 * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
		 * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category String
		 * @param {string} [string=''] The string to escape.
		 * @returns {string} Returns the escaped string.
		 * @example
		 *
		 * _.escapeRegExp('[lodash](https://lodash.com/)');
		 * // => '\[lodash\]\(https://lodash\.com/\)'
		 */
		function escapeRegExp(string) {
			string = toString(string);
			return (string && reHasRegExpChar.test(string))
			  ? string.replace(reRegExpChar, '\\$&')
			  : string;
		}

		/**
		 * Converts `string` to
		 * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category String
		 * @param {string} [string=''] The string to convert.
		 * @returns {string} Returns the kebab cased string.
		 * @example
		 *
		 * _.kebabCase('Foo Bar');
		 * // => 'foo-bar'
		 *
		 * _.kebabCase('fooBar');
		 * // => 'foo-bar'
		 *
		 * _.kebabCase('__FOO_BAR__');
		 * // => 'foo-bar'
		 */
		var kebabCase = createCompounder(function (result, word, index) {
			return result + (index ? '-' : '') + word.toLowerCase();
		});

		/**
		 * Converts `string`, as space separated words, to lower case.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category String
		 * @param {string} [string=''] The string to convert.
		 * @returns {string} Returns the lower cased string.
		 * @example
		 *
		 * _.lowerCase('--Foo-Bar--');
		 * // => 'foo bar'
		 *
		 * _.lowerCase('fooBar');
		 * // => 'foo bar'
		 *
		 * _.lowerCase('__FOO_BAR__');
		 * // => 'foo bar'
		 */
		var lowerCase = createCompounder(function (result, word, index) {
			return result + (index ? ' ' : '') + word.toLowerCase();
		});

		/**
		 * Converts the first character of `string` to lower case.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category String
		 * @param {string} [string=''] The string to convert.
		 * @returns {string} Returns the converted string.
		 * @example
		 *
		 * _.lowerFirst('Fred');
		 * // => 'fred'
		 *
		 * _.lowerFirst('FRED');
		 * // => 'fRED'
		 */
		var lowerFirst = createCaseFirst('toLowerCase');

		/**
		 * Pads `string` on the left and right sides if it's shorter than `length`.
		 * Padding characters are truncated if they can't be evenly divided by `length`.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category String
		 * @param {string} [string=''] The string to pad.
		 * @param {number} [length=0] The padding length.
		 * @param {string} [chars=' '] The string used as padding.
		 * @returns {string} Returns the padded string.
		 * @example
		 *
		 * _.pad('abc', 8);
		 * // => '  abc   '
		 *
		 * _.pad('abc', 8, '_-');
		 * // => '_-abc_-_'
		 *
		 * _.pad('abc', 3);
		 * // => 'abc'
		 */
		function pad(string, length, chars) {
			string = toString(string);
			length = toInteger(length);

			var strLength = length ? stringSize(string) : 0;
			if (!length || strLength >= length) {
				return string;
			}
			var mid = (length - strLength) / 2;
			return (
			  createPadding(nativeFloor(mid), chars) +
			  string +
			  createPadding(nativeCeil(mid), chars)
			);
		}

		/**
		 * Pads `string` on the right side if it's shorter than `length`. Padding
		 * characters are truncated if they exceed `length`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category String
		 * @param {string} [string=''] The string to pad.
		 * @param {number} [length=0] The padding length.
		 * @param {string} [chars=' '] The string used as padding.
		 * @returns {string} Returns the padded string.
		 * @example
		 *
		 * _.padEnd('abc', 6);
		 * // => 'abc   '
		 *
		 * _.padEnd('abc', 6, '_-');
		 * // => 'abc_-_'
		 *
		 * _.padEnd('abc', 3);
		 * // => 'abc'
		 */
		function padEnd(string, length, chars) {
			string = toString(string);
			length = toInteger(length);

			var strLength = length ? stringSize(string) : 0;
			return (length && strLength < length)
			  ? (string + createPadding(length - strLength, chars))
			  : string;
		}

		/**
		 * Pads `string` on the left side if it's shorter than `length`. Padding
		 * characters are truncated if they exceed `length`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category String
		 * @param {string} [string=''] The string to pad.
		 * @param {number} [length=0] The padding length.
		 * @param {string} [chars=' '] The string used as padding.
		 * @returns {string} Returns the padded string.
		 * @example
		 *
		 * _.padStart('abc', 6);
		 * // => '   abc'
		 *
		 * _.padStart('abc', 6, '_-');
		 * // => '_-_abc'
		 *
		 * _.padStart('abc', 3);
		 * // => 'abc'
		 */
		function padStart(string, length, chars) {
			string = toString(string);
			length = toInteger(length);

			var strLength = length ? stringSize(string) : 0;
			return (length && strLength < length)
			  ? (createPadding(length - strLength, chars) + string)
			  : string;
		}

		/**
		 * Converts `string` to an integer of the specified radix. If `radix` is
		 * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
		 * hexadecimal, in which case a `radix` of `16` is used.
		 *
		 * **Note:** This method aligns with the
		 * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
		 *
		 * @static
		 * @memberOf _
		 * @since 1.1.0
		 * @category String
		 * @param {string} string The string to convert.
		 * @param {number} [radix=10] The radix to interpret `value` by.
		 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		 * @returns {number} Returns the converted integer.
		 * @example
		 *
		 * _.parseInt('08');
		 * // => 8
		 *
		 * _.map(['6', '08', '10'], _.parseInt);
		 * // => [6, 8, 10]
		 */
		function parseInt(string, radix, guard) {
			if (guard || radix == null) {
				radix = 0;
			} else if (radix) {
				radix = +radix;
			}
			return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
		}

		/**
		 * Repeats the given string `n` times.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category String
		 * @param {string} [string=''] The string to repeat.
		 * @param {number} [n=1] The number of times to repeat the string.
		 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		 * @returns {string} Returns the repeated string.
		 * @example
		 *
		 * _.repeat('*', 3);
		 * // => '***'
		 *
		 * _.repeat('abc', 2);
		 * // => 'abcabc'
		 *
		 * _.repeat('abc', 0);
		 * // => ''
		 */
		function repeat(string, n, guard) {
			if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
				n = 1;
			} else {
				n = toInteger(n);
			}
			return baseRepeat(toString(string), n);
		}

		/**
		 * Replaces matches for `pattern` in `string` with `replacement`.
		 *
		 * **Note:** This method is based on
		 * [`String#replace`](https://mdn.io/String/replace).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category String
		 * @param {string} [string=''] The string to modify.
		 * @param {RegExp|string} pattern The pattern to replace.
		 * @param {Function|string} replacement The match replacement.
		 * @returns {string} Returns the modified string.
		 * @example
		 *
		 * _.replace('Hi Fred', 'Fred', 'Barney');
		 * // => 'Hi Barney'
		 */
		function replace() {
			var args = arguments,
				string = toString(args[0]);

			return args.length < 3 ? string : string.replace(args[1], args[2]);
		}

		/**
		 * Converts `string` to
		 * [snake case](https://en.wikipedia.org/wiki/Snake_case).
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category String
		 * @param {string} [string=''] The string to convert.
		 * @returns {string} Returns the snake cased string.
		 * @example
		 *
		 * _.snakeCase('Foo Bar');
		 * // => 'foo_bar'
		 *
		 * _.snakeCase('fooBar');
		 * // => 'foo_bar'
		 *
		 * _.snakeCase('--FOO-BAR--');
		 * // => 'foo_bar'
		 */
		var snakeCase = createCompounder(function (result, word, index) {
			return result + (index ? '_' : '') + word.toLowerCase();
		});

		/**
		 * Splits `string` by `separator`.
		 *
		 * **Note:** This method is based on
		 * [`String#split`](https://mdn.io/String/split).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category String
		 * @param {string} [string=''] The string to split.
		 * @param {RegExp|string} separator The separator pattern to split by.
		 * @param {number} [limit] The length to truncate results to.
		 * @returns {Array} Returns the string segments.
		 * @example
		 *
		 * _.split('a-b-c', '-', 2);
		 * // => ['a', 'b']
		 */
		function split(string, separator, limit) {
			if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
				separator = limit = undefined;
			}
			limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
			if (!limit) {
				return [];
			}
			string = toString(string);
			if (string && (
				  typeof separator == 'string' ||
				  (separator != null && !isRegExp(separator))
				)) {
				separator = baseToString(separator);
				if (!separator && hasUnicode(string)) {
					return castSlice(stringToArray(string), 0, limit);
				}
			}
			return string.split(separator, limit);
		}

		/**
		 * Converts `string` to
		 * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
		 *
		 * @static
		 * @memberOf _
		 * @since 3.1.0
		 * @category String
		 * @param {string} [string=''] The string to convert.
		 * @returns {string} Returns the start cased string.
		 * @example
		 *
		 * _.startCase('--foo-bar--');
		 * // => 'Foo Bar'
		 *
		 * _.startCase('fooBar');
		 * // => 'Foo Bar'
		 *
		 * _.startCase('__FOO_BAR__');
		 * // => 'FOO BAR'
		 */
		var startCase = createCompounder(function (result, word, index) {
			return result + (index ? ' ' : '') + upperFirst(word);
		});

		/**
		 * Checks if `string` starts with the given target string.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category String
		 * @param {string} [string=''] The string to inspect.
		 * @param {string} [target] The string to search for.
		 * @param {number} [position=0] The position to search from.
		 * @returns {boolean} Returns `true` if `string` starts with `target`,
		 *  else `false`.
		 * @example
		 *
		 * _.startsWith('abc', 'a');
		 * // => true
		 *
		 * _.startsWith('abc', 'b');
		 * // => false
		 *
		 * _.startsWith('abc', 'b', 1);
		 * // => true
		 */
		function startsWith(string, target, position) {
			string = toString(string);
			position = position == null
			  ? 0
			  : baseClamp(toInteger(position), 0, string.length);

			target = baseToString(target);
			return string.slice(position, position + target.length) == target;
		}

		/**
		 * Creates a compiled template function that can interpolate data properties
		 * in "interpolate" delimiters, HTML-escape interpolated data properties in
		 * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
		 * properties may be accessed as free variables in the template. If a setting
		 * object is given, it takes precedence over `_.templateSettings` values.
		 *
		 * **Note:** In the development build `_.template` utilizes
		 * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
		 * for easier debugging.
		 *
		 * For more information on precompiling templates see
		 * [lodash's custom builds documentation](https://lodash.com/custom-builds).
		 *
		 * For more information on Chrome extension sandboxes see
		 * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category String
		 * @param {string} [string=''] The template string.
		 * @param {Object} [options={}] The options object.
		 * @param {RegExp} [options.escape=_.templateSettings.escape]
		 *  The HTML "escape" delimiter.
		 * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
		 *  The "evaluate" delimiter.
		 * @param {Object} [options.imports=_.templateSettings.imports]
		 *  An object to import into the template as free variables.
		 * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
		 *  The "interpolate" delimiter.
		 * @param {string} [options.sourceURL='lodash.templateSources[n]']
		 *  The sourceURL of the compiled template.
		 * @param {string} [options.variable='obj']
		 *  The data object variable name.
		 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		 * @returns {Function} Returns the compiled template function.
		 * @example
		 *
		 * // Use the "interpolate" delimiter to create a compiled template.
		 * var compiled = _.template('hello <%= user %>!');
		 * compiled({ 'user': 'fred' });
		 * // => 'hello fred!'
		 *
		 * // Use the HTML "escape" delimiter to escape data property values.
		 * var compiled = _.template('<b><%- value %></b>');
		 * compiled({ 'value': '<script>' });
		 * // => '<b>&lt;script&gt;</b>'
		 *
		 * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
		 * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
		 * compiled({ 'users': ['fred', 'barney'] });
		 * // => '<li>fred</li><li>barney</li>'
		 *
		 * // Use the internal `print` function in "evaluate" delimiters.
		 * var compiled = _.template('<% print("hello " + user); %>!');
		 * compiled({ 'user': 'barney' });
		 * // => 'hello barney!'
		 *
		 * // Use the ES template literal delimiter as an "interpolate" delimiter.
		 * // Disable support by replacing the "interpolate" delimiter.
		 * var compiled = _.template('hello ${ user }!');
		 * compiled({ 'user': 'pebbles' });
		 * // => 'hello pebbles!'
		 *
		 * // Use backslashes to treat delimiters as plain text.
		 * var compiled = _.template('<%= "\\<%- value %\\>" %>');
		 * compiled({ 'value': 'ignored' });
		 * // => '<%- value %>'
		 *
		 * // Use the `imports` option to import `jQuery` as `jq`.
		 * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
		 * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
		 * compiled({ 'users': ['fred', 'barney'] });
		 * // => '<li>fred</li><li>barney</li>'
		 *
		 * // Use the `sourceURL` option to specify a custom sourceURL for the template.
		 * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
		 * compiled(data);
		 * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
		 *
		 * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
		 * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
		 * compiled.source;
		 * // => function(data) {
		 * //   var __t, __p = '';
		 * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
		 * //   return __p;
		 * // }
		 *
		 * // Use custom template delimiters.
		 * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
		 * var compiled = _.template('hello {{ user }}!');
		 * compiled({ 'user': 'mustache' });
		 * // => 'hello mustache!'
		 *
		 * // Use the `source` property to inline compiled templates for meaningful
		 * // line numbers in error messages and stack traces.
		 * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
		 *   var JST = {\
		 *     "main": ' + _.template(mainText).source + '\
		 *   };\
		 * ');
		 */
		function template(string, options, guard) {
			// Based on John Resig's `tmpl` implementation
			// (http://ejohn.org/blog/javascript-micro-templating/)
			// and Laura Doktorova's doT.js (https://github.com/olado/doT).
			var settings = lodash.templateSettings;

			if (guard && isIterateeCall(string, options, guard)) {
				options = undefined;
			}
			string = toString(string);
			options = assignInWith({}, options, settings, customDefaultsAssignIn);

			var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
				importsKeys = keys(imports),
				importsValues = baseValues(imports, importsKeys);

			var isEscaping,
				isEvaluating,
				index = 0,
				interpolate = options.interpolate || reNoMatch,
				source = "__p += '";

			// Compile the regexp to match each delimiter.
			var reDelimiters = RegExp(
			  (options.escape || reNoMatch).source + '|' +
			  interpolate.source + '|' +
			  (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
			  (options.evaluate || reNoMatch).source + '|$'
			, 'g');

			// Use a sourceURL for easier debugging.
			var sourceURL = '//# sourceURL=' +
			  ('sourceURL' in options
				? options.sourceURL
				: ('lodash.templateSources[' + (++templateCounter) + ']')
			  ) + '\n';

			string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
				interpolateValue || (interpolateValue = esTemplateValue);

				// Escape characters that can't be included in string literals.
				source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

				// Replace delimiters with snippets.
				if (escapeValue) {
					isEscaping = true;
					source += "' +\n__e(" + escapeValue + ") +\n'";
				}
				if (evaluateValue) {
					isEvaluating = true;
					source += "';\n" + evaluateValue + ";\n__p += '";
				}
				if (interpolateValue) {
					source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
				}
				index = offset + match.length;

				// The JS engine embedded in Adobe products needs `match` returned in
				// order to produce the correct `offset` value.
				return match;
			});

			source += "';\n";

			// If `variable` is not specified wrap a with-statement around the generated
			// code to add the data object to the top of the scope chain.
			var variable = options.variable;
			if (!variable) {
				source = 'with (obj) {\n' + source + '\n}\n';
			}
			// Cleanup code by stripping empty strings.
			source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
			  .replace(reEmptyStringMiddle, '$1')
			  .replace(reEmptyStringTrailing, '$1;');

			// Frame code as the function body.
			source = 'function(' + (variable || 'obj') + ') {\n' +
			  (variable
				? ''
				: 'obj || (obj = {});\n'
			  ) +
			  "var __t, __p = ''" +
			  (isEscaping
				 ? ', __e = _.escape'
				 : ''
			  ) +
			  (isEvaluating
				? ', __j = Array.prototype.join;\n' +
				  "function print() { __p += __j.call(arguments, '') }\n"
				: ';\n'
			  ) +
			  source +
			  'return __p\n}';

			var result = attempt(function () {
				return Function(importsKeys, sourceURL + 'return ' + source)
				  .apply(undefined, importsValues);
			});

			// Provide the compiled function's source by its `toString` method or
			// the `source` property as a convenience for inlining compiled templates.
			result.source = source;
			if (isError(result)) {
				throw result;
			}
			return result;
		}

		/**
		 * Converts `string`, as a whole, to lower case just like
		 * [String#toLowerCase](https://mdn.io/toLowerCase).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category String
		 * @param {string} [string=''] The string to convert.
		 * @returns {string} Returns the lower cased string.
		 * @example
		 *
		 * _.toLower('--Foo-Bar--');
		 * // => '--foo-bar--'
		 *
		 * _.toLower('fooBar');
		 * // => 'foobar'
		 *
		 * _.toLower('__FOO_BAR__');
		 * // => '__foo_bar__'
		 */
		function toLower(value) {
			return toString(value).toLowerCase();
		}

		/**
		 * Converts `string`, as a whole, to upper case just like
		 * [String#toUpperCase](https://mdn.io/toUpperCase).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category String
		 * @param {string} [string=''] The string to convert.
		 * @returns {string} Returns the upper cased string.
		 * @example
		 *
		 * _.toUpper('--foo-bar--');
		 * // => '--FOO-BAR--'
		 *
		 * _.toUpper('fooBar');
		 * // => 'FOOBAR'
		 *
		 * _.toUpper('__foo_bar__');
		 * // => '__FOO_BAR__'
		 */
		function toUpper(value) {
			return toString(value).toUpperCase();
		}

		/**
		 * Removes leading and trailing whitespace or specified characters from `string`.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category String
		 * @param {string} [string=''] The string to trim.
		 * @param {string} [chars=whitespace] The characters to trim.
		 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		 * @returns {string} Returns the trimmed string.
		 * @example
		 *
		 * _.trim('  abc  ');
		 * // => 'abc'
		 *
		 * _.trim('-_-abc-_-', '_-');
		 * // => 'abc'
		 *
		 * _.map(['  foo  ', '  bar  '], _.trim);
		 * // => ['foo', 'bar']
		 */
		function trim(string, chars, guard) {
			string = toString(string);
			if (string && (guard || chars === undefined)) {
				return string.replace(reTrim, '');
			}
			if (!string || !(chars = baseToString(chars))) {
				return string;
			}
			var strSymbols = stringToArray(string),
				chrSymbols = stringToArray(chars),
				start = charsStartIndex(strSymbols, chrSymbols),
				end = charsEndIndex(strSymbols, chrSymbols) + 1;

			return castSlice(strSymbols, start, end).join('');
		}

		/**
		 * Removes trailing whitespace or specified characters from `string`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category String
		 * @param {string} [string=''] The string to trim.
		 * @param {string} [chars=whitespace] The characters to trim.
		 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		 * @returns {string} Returns the trimmed string.
		 * @example
		 *
		 * _.trimEnd('  abc  ');
		 * // => '  abc'
		 *
		 * _.trimEnd('-_-abc-_-', '_-');
		 * // => '-_-abc'
		 */
		function trimEnd(string, chars, guard) {
			string = toString(string);
			if (string && (guard || chars === undefined)) {
				return string.replace(reTrimEnd, '');
			}
			if (!string || !(chars = baseToString(chars))) {
				return string;
			}
			var strSymbols = stringToArray(string),
				end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

			return castSlice(strSymbols, 0, end).join('');
		}

		/**
		 * Removes leading whitespace or specified characters from `string`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category String
		 * @param {string} [string=''] The string to trim.
		 * @param {string} [chars=whitespace] The characters to trim.
		 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		 * @returns {string} Returns the trimmed string.
		 * @example
		 *
		 * _.trimStart('  abc  ');
		 * // => 'abc  '
		 *
		 * _.trimStart('-_-abc-_-', '_-');
		 * // => 'abc-_-'
		 */
		function trimStart(string, chars, guard) {
			string = toString(string);
			if (string && (guard || chars === undefined)) {
				return string.replace(reTrimStart, '');
			}
			if (!string || !(chars = baseToString(chars))) {
				return string;
			}
			var strSymbols = stringToArray(string),
				start = charsStartIndex(strSymbols, stringToArray(chars));

			return castSlice(strSymbols, start).join('');
		}

		/**
		 * Truncates `string` if it's longer than the given maximum string length.
		 * The last characters of the truncated string are replaced with the omission
		 * string which defaults to "...".
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category String
		 * @param {string} [string=''] The string to truncate.
		 * @param {Object} [options={}] The options object.
		 * @param {number} [options.length=30] The maximum string length.
		 * @param {string} [options.omission='...'] The string to indicate text is omitted.
		 * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
		 * @returns {string} Returns the truncated string.
		 * @example
		 *
		 * _.truncate('hi-diddly-ho there, neighborino');
		 * // => 'hi-diddly-ho there, neighbo...'
		 *
		 * _.truncate('hi-diddly-ho there, neighborino', {
		 *   'length': 24,
		 *   'separator': ' '
		 * });
		 * // => 'hi-diddly-ho there,...'
		 *
		 * _.truncate('hi-diddly-ho there, neighborino', {
		 *   'length': 24,
		 *   'separator': /,? +/
		 * });
		 * // => 'hi-diddly-ho there...'
		 *
		 * _.truncate('hi-diddly-ho there, neighborino', {
		 *   'omission': ' [...]'
		 * });
		 * // => 'hi-diddly-ho there, neig [...]'
		 */
		function truncate(string, options) {
			var length = DEFAULT_TRUNC_LENGTH,
				omission = DEFAULT_TRUNC_OMISSION;

			if (isObject(options)) {
				var separator = 'separator' in options ? options.separator : separator;
				length = 'length' in options ? toInteger(options.length) : length;
				omission = 'omission' in options ? baseToString(options.omission) : omission;
			}
			string = toString(string);

			var strLength = string.length;
			if (hasUnicode(string)) {
				var strSymbols = stringToArray(string);
				strLength = strSymbols.length;
			}
			if (length >= strLength) {
				return string;
			}
			var end = length - stringSize(omission);
			if (end < 1) {
				return omission;
			}
			var result = strSymbols
			  ? castSlice(strSymbols, 0, end).join('')
			  : string.slice(0, end);

			if (separator === undefined) {
				return result + omission;
			}
			if (strSymbols) {
				end += (result.length - end);
			}
			if (isRegExp(separator)) {
				if (string.slice(end).search(separator)) {
					var match,
						substring = result;

					if (!separator.global) {
						separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
					}
					separator.lastIndex = 0;
					while ((match = separator.exec(substring))) {
						var newEnd = match.index;
					}
					result = result.slice(0, newEnd === undefined ? end : newEnd);
				}
			} else if (string.indexOf(baseToString(separator), end) != end) {
				var index = result.lastIndexOf(separator);
				if (index > -1) {
					result = result.slice(0, index);
				}
			}
			return result + omission;
		}

		/**
		 * The inverse of `_.escape`; this method converts the HTML entities
		 * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
		 * their corresponding characters.
		 *
		 * **Note:** No other HTML entities are unescaped. To unescape additional
		 * HTML entities use a third-party library like [_he_](https://mths.be/he).
		 *
		 * @static
		 * @memberOf _
		 * @since 0.6.0
		 * @category String
		 * @param {string} [string=''] The string to unescape.
		 * @returns {string} Returns the unescaped string.
		 * @example
		 *
		 * _.unescape('fred, barney, &amp; pebbles');
		 * // => 'fred, barney, & pebbles'
		 */
		function unescape(string) {
			string = toString(string);
			return (string && reHasEscapedHtml.test(string))
			  ? string.replace(reEscapedHtml, unescapeHtmlChar)
			  : string;
		}

		/**
		 * Converts `string`, as space separated words, to upper case.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category String
		 * @param {string} [string=''] The string to convert.
		 * @returns {string} Returns the upper cased string.
		 * @example
		 *
		 * _.upperCase('--foo-bar');
		 * // => 'FOO BAR'
		 *
		 * _.upperCase('fooBar');
		 * // => 'FOO BAR'
		 *
		 * _.upperCase('__foo_bar__');
		 * // => 'FOO BAR'
		 */
		var upperCase = createCompounder(function (result, word, index) {
			return result + (index ? ' ' : '') + word.toUpperCase();
		});

		/**
		 * Converts the first character of `string` to upper case.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category String
		 * @param {string} [string=''] The string to convert.
		 * @returns {string} Returns the converted string.
		 * @example
		 *
		 * _.upperFirst('fred');
		 * // => 'Fred'
		 *
		 * _.upperFirst('FRED');
		 * // => 'FRED'
		 */
		var upperFirst = createCaseFirst('toUpperCase');

		/**
		 * Splits `string` into an array of its words.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category String
		 * @param {string} [string=''] The string to inspect.
		 * @param {RegExp|string} [pattern] The pattern to match words.
		 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		 * @returns {Array} Returns the words of `string`.
		 * @example
		 *
		 * _.words('fred, barney, & pebbles');
		 * // => ['fred', 'barney', 'pebbles']
		 *
		 * _.words('fred, barney, & pebbles', /[^, ]+/g);
		 * // => ['fred', 'barney', '&', 'pebbles']
		 */
		function words(string, pattern, guard) {
			string = toString(string);
			pattern = guard ? undefined : pattern;

			if (pattern === undefined) {
				return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
			}
			return string.match(pattern) || [];
		}

		/*------------------------------------------------------------------------*/

		/**
		 * Attempts to invoke `func`, returning either the result or the caught error
		 * object. Any additional arguments are provided to `func` when it's invoked.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Util
		 * @param {Function} func The function to attempt.
		 * @param {...*} [args] The arguments to invoke `func` with.
		 * @returns {*} Returns the `func` result or error object.
		 * @example
		 *
		 * // Avoid throwing errors for invalid selectors.
		 * var elements = _.attempt(function(selector) {
		 *   return document.querySelectorAll(selector);
		 * }, '>_>');
		 *
		 * if (_.isError(elements)) {
		 *   elements = [];
		 * }
		 */
		var attempt = baseRest(function (func, args) {
			try {
				return apply(func, undefined, args);
			} catch (e) {
				return isError(e) ? e : new Error(e);
			}
		});

		/**
		 * Binds methods of an object to the object itself, overwriting the existing
		 * method.
		 *
		 * **Note:** This method doesn't set the "length" property of bound functions.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Util
		 * @param {Object} object The object to bind and assign the bound methods to.
		 * @param {...(string|string[])} methodNames The object method names to bind.
		 * @returns {Object} Returns `object`.
		 * @example
		 *
		 * var view = {
		 *   'label': 'docs',
		 *   'click': function() {
		 *     console.log('clicked ' + this.label);
		 *   }
		 * };
		 *
		 * _.bindAll(view, ['click']);
		 * jQuery(element).on('click', view.click);
		 * // => Logs 'clicked docs' when clicked.
		 */
		var bindAll = flatRest(function (object, methodNames) {
			arrayEach(methodNames, function (key) {
				key = toKey(key);
				baseAssignValue(object, key, bind(object[key], object));
			});
			return object;
		});

		/**
		 * Creates a function that iterates over `pairs` and invokes the corresponding
		 * function of the first predicate to return truthy. The predicate-function
		 * pairs are invoked with the `this` binding and arguments of the created
		 * function.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Util
		 * @param {Array} pairs The predicate-function pairs.
		 * @returns {Function} Returns the new composite function.
		 * @example
		 *
		 * var func = _.cond([
		 *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
		 *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
		 *   [_.stubTrue,                      _.constant('no match')]
		 * ]);
		 *
		 * func({ 'a': 1, 'b': 2 });
		 * // => 'matches A'
		 *
		 * func({ 'a': 0, 'b': 1 });
		 * // => 'matches B'
		 *
		 * func({ 'a': '1', 'b': '2' });
		 * // => 'no match'
		 */
		function cond(pairs) {
			var length = pairs == null ? 0 : pairs.length,
				toIteratee = getIteratee();

			pairs = !length ? [] : arrayMap(pairs, function (pair) {
				if (typeof pair[1] != 'function') {
					throw new TypeError(FUNC_ERROR_TEXT);
				}
				return [toIteratee(pair[0]), pair[1]];
			});

			return baseRest(function (args) {
				var index = -1;
				while (++index < length) {
					var pair = pairs[index];
					if (apply(pair[0], this, args)) {
						return apply(pair[1], this, args);
					}
				}
			});
		}

		/**
		 * Creates a function that invokes the predicate properties of `source` with
		 * the corresponding property values of a given object, returning `true` if
		 * all predicates return truthy, else `false`.
		 *
		 * **Note:** The created function is equivalent to `_.conformsTo` with
		 * `source` partially applied.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Util
		 * @param {Object} source The object of property predicates to conform to.
		 * @returns {Function} Returns the new spec function.
		 * @example
		 *
		 * var objects = [
		 *   { 'a': 2, 'b': 1 },
		 *   { 'a': 1, 'b': 2 }
		 * ];
		 *
		 * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
		 * // => [{ 'a': 1, 'b': 2 }]
		 */
		function conforms(source) {
			return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
		}

		/**
		 * Creates a function that returns `value`.
		 *
		 * @static
		 * @memberOf _
		 * @since 2.4.0
		 * @category Util
		 * @param {*} value The value to return from the new function.
		 * @returns {Function} Returns the new constant function.
		 * @example
		 *
		 * var objects = _.times(2, _.constant({ 'a': 1 }));
		 *
		 * console.log(objects);
		 * // => [{ 'a': 1 }, { 'a': 1 }]
		 *
		 * console.log(objects[0] === objects[1]);
		 * // => true
		 */
		function constant(value) {
			return function () {
				return value;
			};
		}

		/**
		 * Checks `value` to determine whether a default value should be returned in
		 * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
		 * or `undefined`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.14.0
		 * @category Util
		 * @param {*} value The value to check.
		 * @param {*} defaultValue The default value.
		 * @returns {*} Returns the resolved value.
		 * @example
		 *
		 * _.defaultTo(1, 10);
		 * // => 1
		 *
		 * _.defaultTo(undefined, 10);
		 * // => 10
		 */
		function defaultTo(value, defaultValue) {
			return (value == null || value !== value) ? defaultValue : value;
		}

		/**
		 * Creates a function that returns the result of invoking the given functions
		 * with the `this` binding of the created function, where each successive
		 * invocation is supplied the return value of the previous.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Util
		 * @param {...(Function|Function[])} [funcs] The functions to invoke.
		 * @returns {Function} Returns the new composite function.
		 * @see _.flowRight
		 * @example
		 *
		 * function square(n) {
		 *   return n * n;
		 * }
		 *
		 * var addSquare = _.flow([_.add, square]);
		 * addSquare(1, 2);
		 * // => 9
		 */
		var flow = createFlow();

		/**
		 * This method is like `_.flow` except that it creates a function that
		 * invokes the given functions from right to left.
		 *
		 * @static
		 * @since 3.0.0
		 * @memberOf _
		 * @category Util
		 * @param {...(Function|Function[])} [funcs] The functions to invoke.
		 * @returns {Function} Returns the new composite function.
		 * @see _.flow
		 * @example
		 *
		 * function square(n) {
		 *   return n * n;
		 * }
		 *
		 * var addSquare = _.flowRight([square, _.add]);
		 * addSquare(1, 2);
		 * // => 9
		 */
		var flowRight = createFlow(true);

		/**
		 * This method returns the first argument it receives.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Util
		 * @param {*} value Any value.
		 * @returns {*} Returns `value`.
		 * @example
		 *
		 * var object = { 'a': 1 };
		 *
		 * console.log(_.identity(object) === object);
		 * // => true
		 */
		function identity(value) {
			return value;
		}

		/**
		 * Creates a function that invokes `func` with the arguments of the created
		 * function. If `func` is a property name, the created function returns the
		 * property value for a given element. If `func` is an array or object, the
		 * created function returns `true` for elements that contain the equivalent
		 * source properties, otherwise it returns `false`.
		 *
		 * @static
		 * @since 4.0.0
		 * @memberOf _
		 * @category Util
		 * @param {*} [func=_.identity] The value to convert to a callback.
		 * @returns {Function} Returns the callback.
		 * @example
		 *
		 * var users = [
		 *   { 'user': 'barney', 'age': 36, 'active': true },
		 *   { 'user': 'fred',   'age': 40, 'active': false }
		 * ];
		 *
		 * // The `_.matches` iteratee shorthand.
		 * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
		 * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
		 *
		 * // The `_.matchesProperty` iteratee shorthand.
		 * _.filter(users, _.iteratee(['user', 'fred']));
		 * // => [{ 'user': 'fred', 'age': 40 }]
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.map(users, _.iteratee('user'));
		 * // => ['barney', 'fred']
		 *
		 * // Create custom iteratee shorthands.
		 * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
		 *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
		 *     return func.test(string);
		 *   };
		 * });
		 *
		 * _.filter(['abc', 'def'], /ef/);
		 * // => ['def']
		 */
		function iteratee(func) {
			return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
		}

		/**
		 * Creates a function that performs a partial deep comparison between a given
		 * object and `source`, returning `true` if the given object has equivalent
		 * property values, else `false`.
		 *
		 * **Note:** The created function is equivalent to `_.isMatch` with `source`
		 * partially applied.
		 *
		 * Partial comparisons will match empty array and empty object `source`
		 * values against any array or object value, respectively. See `_.isEqual`
		 * for a list of supported value comparisons.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Util
		 * @param {Object} source The object of property values to match.
		 * @returns {Function} Returns the new spec function.
		 * @example
		 *
		 * var objects = [
		 *   { 'a': 1, 'b': 2, 'c': 3 },
		 *   { 'a': 4, 'b': 5, 'c': 6 }
		 * ];
		 *
		 * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
		 * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
		 */
		function matches(source) {
			return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
		}

		/**
		 * Creates a function that performs a partial deep comparison between the
		 * value at `path` of a given object to `srcValue`, returning `true` if the
		 * object value is equivalent, else `false`.
		 *
		 * **Note:** Partial comparisons will match empty array and empty object
		 * `srcValue` values against any array or object value, respectively. See
		 * `_.isEqual` for a list of supported value comparisons.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.2.0
		 * @category Util
		 * @param {Array|string} path The path of the property to get.
		 * @param {*} srcValue The value to match.
		 * @returns {Function} Returns the new spec function.
		 * @example
		 *
		 * var objects = [
		 *   { 'a': 1, 'b': 2, 'c': 3 },
		 *   { 'a': 4, 'b': 5, 'c': 6 }
		 * ];
		 *
		 * _.find(objects, _.matchesProperty('a', 4));
		 * // => { 'a': 4, 'b': 5, 'c': 6 }
		 */
		function matchesProperty(path, srcValue) {
			return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
		}

		/**
		 * Creates a function that invokes the method at `path` of a given object.
		 * Any additional arguments are provided to the invoked method.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.7.0
		 * @category Util
		 * @param {Array|string} path The path of the method to invoke.
		 * @param {...*} [args] The arguments to invoke the method with.
		 * @returns {Function} Returns the new invoker function.
		 * @example
		 *
		 * var objects = [
		 *   { 'a': { 'b': _.constant(2) } },
		 *   { 'a': { 'b': _.constant(1) } }
		 * ];
		 *
		 * _.map(objects, _.method('a.b'));
		 * // => [2, 1]
		 *
		 * _.map(objects, _.method(['a', 'b']));
		 * // => [2, 1]
		 */
		var method = baseRest(function (path, args) {
			return function (object) {
				return baseInvoke(object, path, args);
			};
		});

		/**
		 * The opposite of `_.method`; this method creates a function that invokes
		 * the method at a given path of `object`. Any additional arguments are
		 * provided to the invoked method.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.7.0
		 * @category Util
		 * @param {Object} object The object to query.
		 * @param {...*} [args] The arguments to invoke the method with.
		 * @returns {Function} Returns the new invoker function.
		 * @example
		 *
		 * var array = _.times(3, _.constant),
		 *     object = { 'a': array, 'b': array, 'c': array };
		 *
		 * _.map(['a[2]', 'c[0]'], _.methodOf(object));
		 * // => [2, 0]
		 *
		 * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
		 * // => [2, 0]
		 */
		var methodOf = baseRest(function (object, args) {
			return function (path) {
				return baseInvoke(object, path, args);
			};
		});

		/**
		 * Adds all own enumerable string keyed function properties of a source
		 * object to the destination object. If `object` is a function, then methods
		 * are added to its prototype as well.
		 *
		 * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
		 * avoid conflicts caused by modifying the original.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Util
		 * @param {Function|Object} [object=lodash] The destination object.
		 * @param {Object} source The object of functions to add.
		 * @param {Object} [options={}] The options object.
		 * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
		 * @returns {Function|Object} Returns `object`.
		 * @example
		 *
		 * function vowels(string) {
		 *   return _.filter(string, function(v) {
		 *     return /[aeiou]/i.test(v);
		 *   });
		 * }
		 *
		 * _.mixin({ 'vowels': vowels });
		 * _.vowels('fred');
		 * // => ['e']
		 *
		 * _('fred').vowels().value();
		 * // => ['e']
		 *
		 * _.mixin({ 'vowels': vowels }, { 'chain': false });
		 * _('fred').vowels();
		 * // => ['e']
		 */
		function mixin(object, source, options) {
			var props = keys(source),
				methodNames = baseFunctions(source, props);

			if (options == null &&
				!(isObject(source) && (methodNames.length || !props.length))) {
				options = source;
				source = object;
				object = this;
				methodNames = baseFunctions(source, keys(source));
			}
			var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
				isFunc = isFunction(object);

			arrayEach(methodNames, function (methodName) {
				var func = source[methodName];
				object[methodName] = func;
				if (isFunc) {
					object.prototype[methodName] = function () {
						var chainAll = this.__chain__;
						if (chain || chainAll) {
							var result = object(this.__wrapped__),
								actions = result.__actions__ = copyArray(this.__actions__);

							actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
							result.__chain__ = chainAll;
							return result;
						}
						return func.apply(object, arrayPush([this.value()], arguments));
					};
				}
			});

			return object;
		}

		/**
		 * Reverts the `_` variable to its previous value and returns a reference to
		 * the `lodash` function.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Util
		 * @returns {Function} Returns the `lodash` function.
		 * @example
		 *
		 * var lodash = _.noConflict();
		 */
		function noConflict() {
			if (root._ === this) {
				root._ = oldDash;
			}
			return this;
		}

		/**
		 * This method returns `undefined`.
		 *
		 * @static
		 * @memberOf _
		 * @since 2.3.0
		 * @category Util
		 * @example
		 *
		 * _.times(2, _.noop);
		 * // => [undefined, undefined]
		 */
		function noop() {
			// No operation performed.
		}

		/**
		 * Creates a function that gets the argument at index `n`. If `n` is negative,
		 * the nth argument from the end is returned.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Util
		 * @param {number} [n=0] The index of the argument to return.
		 * @returns {Function} Returns the new pass-thru function.
		 * @example
		 *
		 * var func = _.nthArg(1);
		 * func('a', 'b', 'c', 'd');
		 * // => 'b'
		 *
		 * var func = _.nthArg(-2);
		 * func('a', 'b', 'c', 'd');
		 * // => 'c'
		 */
		function nthArg(n) {
			n = toInteger(n);
			return baseRest(function (args) {
				return baseNth(args, n);
			});
		}

		/**
		 * Creates a function that invokes `iteratees` with the arguments it receives
		 * and returns their results.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Util
		 * @param {...(Function|Function[])} [iteratees=[_.identity]]
		 *  The iteratees to invoke.
		 * @returns {Function} Returns the new function.
		 * @example
		 *
		 * var func = _.over([Math.max, Math.min]);
		 *
		 * func(1, 2, 3, 4);
		 * // => [4, 1]
		 */
		var over = createOver(arrayMap);

		/**
		 * Creates a function that checks if **all** of the `predicates` return
		 * truthy when invoked with the arguments it receives.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Util
		 * @param {...(Function|Function[])} [predicates=[_.identity]]
		 *  The predicates to check.
		 * @returns {Function} Returns the new function.
		 * @example
		 *
		 * var func = _.overEvery([Boolean, isFinite]);
		 *
		 * func('1');
		 * // => true
		 *
		 * func(null);
		 * // => false
		 *
		 * func(NaN);
		 * // => false
		 */
		var overEvery = createOver(arrayEvery);

		/**
		 * Creates a function that checks if **any** of the `predicates` return
		 * truthy when invoked with the arguments it receives.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Util
		 * @param {...(Function|Function[])} [predicates=[_.identity]]
		 *  The predicates to check.
		 * @returns {Function} Returns the new function.
		 * @example
		 *
		 * var func = _.overSome([Boolean, isFinite]);
		 *
		 * func('1');
		 * // => true
		 *
		 * func(null);
		 * // => true
		 *
		 * func(NaN);
		 * // => false
		 */
		var overSome = createOver(arraySome);

		/**
		 * Creates a function that returns the value at `path` of a given object.
		 *
		 * @static
		 * @memberOf _
		 * @since 2.4.0
		 * @category Util
		 * @param {Array|string} path The path of the property to get.
		 * @returns {Function} Returns the new accessor function.
		 * @example
		 *
		 * var objects = [
		 *   { 'a': { 'b': 2 } },
		 *   { 'a': { 'b': 1 } }
		 * ];
		 *
		 * _.map(objects, _.property('a.b'));
		 * // => [2, 1]
		 *
		 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
		 * // => [1, 2]
		 */
		function property(path) {
			return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
		}

		/**
		 * The opposite of `_.property`; this method creates a function that returns
		 * the value at a given path of `object`.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Util
		 * @param {Object} object The object to query.
		 * @returns {Function} Returns the new accessor function.
		 * @example
		 *
		 * var array = [0, 1, 2],
		 *     object = { 'a': array, 'b': array, 'c': array };
		 *
		 * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
		 * // => [2, 0]
		 *
		 * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
		 * // => [2, 0]
		 */
		function propertyOf(object) {
			return function (path) {
				return object == null ? undefined : baseGet(object, path);
			};
		}

		/**
		 * Creates an array of numbers (positive and/or negative) progressing from
		 * `start` up to, but not including, `end`. A step of `-1` is used if a negative
		 * `start` is specified without an `end` or `step`. If `end` is not specified,
		 * it's set to `start` with `start` then set to `0`.
		 *
		 * **Note:** JavaScript follows the IEEE-754 standard for resolving
		 * floating-point values which can produce unexpected results.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Util
		 * @param {number} [start=0] The start of the range.
		 * @param {number} end The end of the range.
		 * @param {number} [step=1] The value to increment or decrement by.
		 * @returns {Array} Returns the range of numbers.
		 * @see _.inRange, _.rangeRight
		 * @example
		 *
		 * _.range(4);
		 * // => [0, 1, 2, 3]
		 *
		 * _.range(-4);
		 * // => [0, -1, -2, -3]
		 *
		 * _.range(1, 5);
		 * // => [1, 2, 3, 4]
		 *
		 * _.range(0, 20, 5);
		 * // => [0, 5, 10, 15]
		 *
		 * _.range(0, -4, -1);
		 * // => [0, -1, -2, -3]
		 *
		 * _.range(1, 4, 0);
		 * // => [1, 1, 1]
		 *
		 * _.range(0);
		 * // => []
		 */
		var range = createRange();

		/**
		 * This method is like `_.range` except that it populates values in
		 * descending order.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Util
		 * @param {number} [start=0] The start of the range.
		 * @param {number} end The end of the range.
		 * @param {number} [step=1] The value to increment or decrement by.
		 * @returns {Array} Returns the range of numbers.
		 * @see _.inRange, _.range
		 * @example
		 *
		 * _.rangeRight(4);
		 * // => [3, 2, 1, 0]
		 *
		 * _.rangeRight(-4);
		 * // => [-3, -2, -1, 0]
		 *
		 * _.rangeRight(1, 5);
		 * // => [4, 3, 2, 1]
		 *
		 * _.rangeRight(0, 20, 5);
		 * // => [15, 10, 5, 0]
		 *
		 * _.rangeRight(0, -4, -1);
		 * // => [-3, -2, -1, 0]
		 *
		 * _.rangeRight(1, 4, 0);
		 * // => [1, 1, 1]
		 *
		 * _.rangeRight(0);
		 * // => []
		 */
		var rangeRight = createRange(true);

		/**
		 * This method returns a new empty array.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.13.0
		 * @category Util
		 * @returns {Array} Returns the new empty array.
		 * @example
		 *
		 * var arrays = _.times(2, _.stubArray);
		 *
		 * console.log(arrays);
		 * // => [[], []]
		 *
		 * console.log(arrays[0] === arrays[1]);
		 * // => false
		 */
		function stubArray() {
			return [];
		}

		/**
		 * This method returns `false`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.13.0
		 * @category Util
		 * @returns {boolean} Returns `false`.
		 * @example
		 *
		 * _.times(2, _.stubFalse);
		 * // => [false, false]
		 */
		function stubFalse() {
			return false;
		}

		/**
		 * This method returns a new empty object.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.13.0
		 * @category Util
		 * @returns {Object} Returns the new empty object.
		 * @example
		 *
		 * var objects = _.times(2, _.stubObject);
		 *
		 * console.log(objects);
		 * // => [{}, {}]
		 *
		 * console.log(objects[0] === objects[1]);
		 * // => false
		 */
		function stubObject() {
			return {};
		}

		/**
		 * This method returns an empty string.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.13.0
		 * @category Util
		 * @returns {string} Returns the empty string.
		 * @example
		 *
		 * _.times(2, _.stubString);
		 * // => ['', '']
		 */
		function stubString() {
			return '';
		}

		/**
		 * This method returns `true`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.13.0
		 * @category Util
		 * @returns {boolean} Returns `true`.
		 * @example
		 *
		 * _.times(2, _.stubTrue);
		 * // => [true, true]
		 */
		function stubTrue() {
			return true;
		}

		/**
		 * Invokes the iteratee `n` times, returning an array of the results of
		 * each invocation. The iteratee is invoked with one argument; (index).
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Util
		 * @param {number} n The number of times to invoke `iteratee`.
		 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		 * @returns {Array} Returns the array of results.
		 * @example
		 *
		 * _.times(3, String);
		 * // => ['0', '1', '2']
		 *
		 *  _.times(4, _.constant(0));
		 * // => [0, 0, 0, 0]
		 */
		function times(n, iteratee) {
			n = toInteger(n);
			if (n < 1 || n > MAX_SAFE_INTEGER) {
				return [];
			}
			var index = MAX_ARRAY_LENGTH,
				length = nativeMin(n, MAX_ARRAY_LENGTH);

			iteratee = getIteratee(iteratee);
			n -= MAX_ARRAY_LENGTH;

			var result = baseTimes(length, iteratee);
			while (++index < n) {
				iteratee(index);
			}
			return result;
		}

		/**
		 * Converts `value` to a property path array.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Util
		 * @param {*} value The value to convert.
		 * @returns {Array} Returns the new property path array.
		 * @example
		 *
		 * _.toPath('a.b.c');
		 * // => ['a', 'b', 'c']
		 *
		 * _.toPath('a[0].b.c');
		 * // => ['a', '0', 'b', 'c']
		 */
		function toPath(value) {
			if (isArray(value)) {
				return arrayMap(value, toKey);
			}
			return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
		}

		/**
		 * Generates a unique ID. If `prefix` is given, the ID is appended to it.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Util
		 * @param {string} [prefix=''] The value to prefix the ID with.
		 * @returns {string} Returns the unique ID.
		 * @example
		 *
		 * _.uniqueId('contact_');
		 * // => 'contact_104'
		 *
		 * _.uniqueId();
		 * // => '105'
		 */
		function uniqueId(prefix) {
			var id = ++idCounter;
			return toString(prefix) + id;
		}

		/*------------------------------------------------------------------------*/

		/**
		 * Adds two numbers.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.4.0
		 * @category Math
		 * @param {number} augend The first number in an addition.
		 * @param {number} addend The second number in an addition.
		 * @returns {number} Returns the total.
		 * @example
		 *
		 * _.add(6, 4);
		 * // => 10
		 */
		var add = createMathOperation(function (augend, addend) {
			return augend + addend;
		}, 0);

		/**
		 * Computes `number` rounded up to `precision`.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.10.0
		 * @category Math
		 * @param {number} number The number to round up.
		 * @param {number} [precision=0] The precision to round up to.
		 * @returns {number} Returns the rounded up number.
		 * @example
		 *
		 * _.ceil(4.006);
		 * // => 5
		 *
		 * _.ceil(6.004, 2);
		 * // => 6.01
		 *
		 * _.ceil(6040, -2);
		 * // => 6100
		 */
		var ceil = createRound('ceil');

		/**
		 * Divide two numbers.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.7.0
		 * @category Math
		 * @param {number} dividend The first number in a division.
		 * @param {number} divisor The second number in a division.
		 * @returns {number} Returns the quotient.
		 * @example
		 *
		 * _.divide(6, 4);
		 * // => 1.5
		 */
		var divide = createMathOperation(function (dividend, divisor) {
			return dividend / divisor;
		}, 1);

		/**
		 * Computes `number` rounded down to `precision`.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.10.0
		 * @category Math
		 * @param {number} number The number to round down.
		 * @param {number} [precision=0] The precision to round down to.
		 * @returns {number} Returns the rounded down number.
		 * @example
		 *
		 * _.floor(4.006);
		 * // => 4
		 *
		 * _.floor(0.046, 2);
		 * // => 0.04
		 *
		 * _.floor(4060, -2);
		 * // => 4000
		 */
		var floor = createRound('floor');

		/**
		 * Computes the maximum value of `array`. If `array` is empty or falsey,
		 * `undefined` is returned.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Math
		 * @param {Array} array The array to iterate over.
		 * @returns {*} Returns the maximum value.
		 * @example
		 *
		 * _.max([4, 2, 8, 6]);
		 * // => 8
		 *
		 * _.max([]);
		 * // => undefined
		 */
		function max(array) {
			return (array && array.length)
			  ? baseExtremum(array, identity, baseGt)
			  : undefined;
		}

		/**
		 * This method is like `_.max` except that it accepts `iteratee` which is
		 * invoked for each element in `array` to generate the criterion by which
		 * the value is ranked. The iteratee is invoked with one argument: (value).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Math
		 * @param {Array} array The array to iterate over.
		 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		 * @returns {*} Returns the maximum value.
		 * @example
		 *
		 * var objects = [{ 'n': 1 }, { 'n': 2 }];
		 *
		 * _.maxBy(objects, function(o) { return o.n; });
		 * // => { 'n': 2 }
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.maxBy(objects, 'n');
		 * // => { 'n': 2 }
		 */
		function maxBy(array, iteratee) {
			return (array && array.length)
			  ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
			  : undefined;
		}

		/**
		 * Computes the mean of the values in `array`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Math
		 * @param {Array} array The array to iterate over.
		 * @returns {number} Returns the mean.
		 * @example
		 *
		 * _.mean([4, 2, 8, 6]);
		 * // => 5
		 */
		function mean(array) {
			return baseMean(array, identity);
		}

		/**
		 * This method is like `_.mean` except that it accepts `iteratee` which is
		 * invoked for each element in `array` to generate the value to be averaged.
		 * The iteratee is invoked with one argument: (value).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.7.0
		 * @category Math
		 * @param {Array} array The array to iterate over.
		 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		 * @returns {number} Returns the mean.
		 * @example
		 *
		 * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
		 *
		 * _.meanBy(objects, function(o) { return o.n; });
		 * // => 5
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.meanBy(objects, 'n');
		 * // => 5
		 */
		function meanBy(array, iteratee) {
			return baseMean(array, getIteratee(iteratee, 2));
		}

		/**
		 * Computes the minimum value of `array`. If `array` is empty or falsey,
		 * `undefined` is returned.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Math
		 * @param {Array} array The array to iterate over.
		 * @returns {*} Returns the minimum value.
		 * @example
		 *
		 * _.min([4, 2, 8, 6]);
		 * // => 2
		 *
		 * _.min([]);
		 * // => undefined
		 */
		function min(array) {
			return (array && array.length)
			  ? baseExtremum(array, identity, baseLt)
			  : undefined;
		}

		/**
		 * This method is like `_.min` except that it accepts `iteratee` which is
		 * invoked for each element in `array` to generate the criterion by which
		 * the value is ranked. The iteratee is invoked with one argument: (value).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Math
		 * @param {Array} array The array to iterate over.
		 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		 * @returns {*} Returns the minimum value.
		 * @example
		 *
		 * var objects = [{ 'n': 1 }, { 'n': 2 }];
		 *
		 * _.minBy(objects, function(o) { return o.n; });
		 * // => { 'n': 1 }
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.minBy(objects, 'n');
		 * // => { 'n': 1 }
		 */
		function minBy(array, iteratee) {
			return (array && array.length)
			  ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
			  : undefined;
		}

		/**
		 * Multiply two numbers.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.7.0
		 * @category Math
		 * @param {number} multiplier The first number in a multiplication.
		 * @param {number} multiplicand The second number in a multiplication.
		 * @returns {number} Returns the product.
		 * @example
		 *
		 * _.multiply(6, 4);
		 * // => 24
		 */
		var multiply = createMathOperation(function (multiplier, multiplicand) {
			return multiplier * multiplicand;
		}, 1);

		/**
		 * Computes `number` rounded to `precision`.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.10.0
		 * @category Math
		 * @param {number} number The number to round.
		 * @param {number} [precision=0] The precision to round to.
		 * @returns {number} Returns the rounded number.
		 * @example
		 *
		 * _.round(4.006);
		 * // => 4
		 *
		 * _.round(4.006, 2);
		 * // => 4.01
		 *
		 * _.round(4060, -2);
		 * // => 4100
		 */
		var round = createRound('round');

		/**
		 * Subtract two numbers.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Math
		 * @param {number} minuend The first number in a subtraction.
		 * @param {number} subtrahend The second number in a subtraction.
		 * @returns {number} Returns the difference.
		 * @example
		 *
		 * _.subtract(6, 4);
		 * // => 2
		 */
		var subtract = createMathOperation(function (minuend, subtrahend) {
			return minuend - subtrahend;
		}, 0);

		/**
		 * Computes the sum of the values in `array`.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.4.0
		 * @category Math
		 * @param {Array} array The array to iterate over.
		 * @returns {number} Returns the sum.
		 * @example
		 *
		 * _.sum([4, 2, 8, 6]);
		 * // => 20
		 */
		function sum(array) {
			return (array && array.length)
			  ? baseSum(array, identity)
			  : 0;
		}

		/**
		 * This method is like `_.sum` except that it accepts `iteratee` which is
		 * invoked for each element in `array` to generate the value to be summed.
		 * The iteratee is invoked with one argument: (value).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Math
		 * @param {Array} array The array to iterate over.
		 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		 * @returns {number} Returns the sum.
		 * @example
		 *
		 * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
		 *
		 * _.sumBy(objects, function(o) { return o.n; });
		 * // => 20
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.sumBy(objects, 'n');
		 * // => 20
		 */
		function sumBy(array, iteratee) {
			return (array && array.length)
			  ? baseSum(array, getIteratee(iteratee, 2))
			  : 0;
		}

		/*------------------------------------------------------------------------*/

		// Add methods that return wrapped values in chain sequences.
		lodash.after = after;
		lodash.ary = ary;
		lodash.assign = assign;
		lodash.assignIn = assignIn;
		lodash.assignInWith = assignInWith;
		lodash.assignWith = assignWith;
		lodash.at = at;
		lodash.before = before;
		lodash.bind = bind;
		lodash.bindAll = bindAll;
		lodash.bindKey = bindKey;
		lodash.castArray = castArray;
		lodash.chain = chain;
		lodash.chunk = chunk;
		lodash.compact = compact;
		lodash.concat = concat;
		lodash.cond = cond;
		lodash.conforms = conforms;
		lodash.constant = constant;
		lodash.countBy = countBy;
		lodash.create = create;
		lodash.curry = curry;
		lodash.curryRight = curryRight;
		lodash.debounce = debounce;
		lodash.defaults = defaults;
		lodash.defaultsDeep = defaultsDeep;
		lodash.defer = defer;
		lodash.delay = delay;
		lodash.difference = difference;
		lodash.differenceBy = differenceBy;
		lodash.differenceWith = differenceWith;
		lodash.drop = drop;
		lodash.dropRight = dropRight;
		lodash.dropRightWhile = dropRightWhile;
		lodash.dropWhile = dropWhile;
		lodash.fill = fill;
		lodash.filter = filter;
		lodash.flatMap = flatMap;
		lodash.flatMapDeep = flatMapDeep;
		lodash.flatMapDepth = flatMapDepth;
		lodash.flatten = flatten;
		lodash.flattenDeep = flattenDeep;
		lodash.flattenDepth = flattenDepth;
		lodash.flip = flip;
		lodash.flow = flow;
		lodash.flowRight = flowRight;
		lodash.fromPairs = fromPairs;
		lodash.functions = functions;
		lodash.functionsIn = functionsIn;
		lodash.groupBy = groupBy;
		lodash.initial = initial;
		lodash.intersection = intersection;
		lodash.intersectionBy = intersectionBy;
		lodash.intersectionWith = intersectionWith;
		lodash.invert = invert;
		lodash.invertBy = invertBy;
		lodash.invokeMap = invokeMap;
		lodash.iteratee = iteratee;
		lodash.keyBy = keyBy;
		lodash.keys = keys;
		lodash.keysIn = keysIn;
		lodash.map = map;
		lodash.mapKeys = mapKeys;
		lodash.mapValues = mapValues;
		lodash.matches = matches;
		lodash.matchesProperty = matchesProperty;
		lodash.memoize = memoize;
		lodash.merge = merge;
		lodash.mergeWith = mergeWith;
		lodash.method = method;
		lodash.methodOf = methodOf;
		lodash.mixin = mixin;
		lodash.negate = negate;
		lodash.nthArg = nthArg;
		lodash.omit = omit;
		lodash.omitBy = omitBy;
		lodash.once = once;
		lodash.orderBy = orderBy;
		lodash.over = over;
		lodash.overArgs = overArgs;
		lodash.overEvery = overEvery;
		lodash.overSome = overSome;
		lodash.partial = partial;
		lodash.partialRight = partialRight;
		lodash.partition = partition;
		lodash.pick = pick;
		lodash.pickBy = pickBy;
		lodash.property = property;
		lodash.propertyOf = propertyOf;
		lodash.pull = pull;
		lodash.pullAll = pullAll;
		lodash.pullAllBy = pullAllBy;
		lodash.pullAllWith = pullAllWith;
		lodash.pullAt = pullAt;
		lodash.range = range;
		lodash.rangeRight = rangeRight;
		lodash.rearg = rearg;
		lodash.reject = reject;
		lodash.remove = remove;
		lodash.rest = rest;
		lodash.reverse = reverse;
		lodash.sampleSize = sampleSize;
		lodash.set = set;
		lodash.setWith = setWith;
		lodash.shuffle = shuffle;
		lodash.slice = slice;
		lodash.sortBy = sortBy;
		lodash.sortedUniq = sortedUniq;
		lodash.sortedUniqBy = sortedUniqBy;
		lodash.split = split;
		lodash.spread = spread;
		lodash.tail = tail;
		lodash.take = take;
		lodash.takeRight = takeRight;
		lodash.takeRightWhile = takeRightWhile;
		lodash.takeWhile = takeWhile;
		lodash.tap = tap;
		lodash.throttle = throttle;
		lodash.thru = thru;
		lodash.toArray = toArray;
		lodash.toPairs = toPairs;
		lodash.toPairsIn = toPairsIn;
		lodash.toPath = toPath;
		lodash.toPlainObject = toPlainObject;
		lodash.transform = transform;
		lodash.unary = unary;
		lodash.union = union;
		lodash.unionBy = unionBy;
		lodash.unionWith = unionWith;
		lodash.uniq = uniq;
		lodash.uniqBy = uniqBy;
		lodash.uniqWith = uniqWith;
		lodash.unset = unset;
		lodash.unzip = unzip;
		lodash.unzipWith = unzipWith;
		lodash.update = update;
		lodash.updateWith = updateWith;
		lodash.values = values;
		lodash.valuesIn = valuesIn;
		lodash.without = without;
		lodash.words = words;
		lodash.wrap = wrap;
		lodash.xor = xor;
		lodash.xorBy = xorBy;
		lodash.xorWith = xorWith;
		lodash.zip = zip;
		lodash.zipObject = zipObject;
		lodash.zipObjectDeep = zipObjectDeep;
		lodash.zipWith = zipWith;

		// Add aliases.
		lodash.entries = toPairs;
		lodash.entriesIn = toPairsIn;
		lodash.extend = assignIn;
		lodash.extendWith = assignInWith;

		// Add methods to `lodash.prototype`.
		mixin(lodash, lodash);

		/*------------------------------------------------------------------------*/

		// Add methods that return unwrapped values in chain sequences.
		lodash.add = add;
		lodash.attempt = attempt;
		lodash.camelCase = camelCase;
		lodash.capitalize = capitalize;
		lodash.ceil = ceil;
		lodash.clamp = clamp;
		lodash.clone = clone;
		lodash.cloneDeep = cloneDeep;
		lodash.cloneDeepWith = cloneDeepWith;
		lodash.cloneWith = cloneWith;
		lodash.conformsTo = conformsTo;
		lodash.deburr = deburr;
		lodash.defaultTo = defaultTo;
		lodash.divide = divide;
		lodash.endsWith = endsWith;
		lodash.eq = eq;
		lodash.escape = escape;
		lodash.escapeRegExp = escapeRegExp;
		lodash.every = every;
		lodash.find = find;
		lodash.findIndex = findIndex;
		lodash.findKey = findKey;
		lodash.findLast = findLast;
		lodash.findLastIndex = findLastIndex;
		lodash.findLastKey = findLastKey;
		lodash.floor = floor;
		lodash.forEach = forEach;
		lodash.forEachRight = forEachRight;
		lodash.forIn = forIn;
		lodash.forInRight = forInRight;
		lodash.forOwn = forOwn;
		lodash.forOwnRight = forOwnRight;
		lodash.get = get;
		lodash.gt = gt;
		lodash.gte = gte;
		lodash.has = has;
		lodash.hasIn = hasIn;
		lodash.head = head;
		lodash.identity = identity;
		lodash.includes = includes;
		lodash.indexOf = indexOf;
		lodash.inRange = inRange;
		lodash.invoke = invoke;
		lodash.isArguments = isArguments;
		lodash.isArray = isArray;
		lodash.isArrayBuffer = isArrayBuffer;
		lodash.isArrayLike = isArrayLike;
		lodash.isArrayLikeObject = isArrayLikeObject;
		lodash.isBoolean = isBoolean;
		lodash.isBuffer = isBuffer;
		lodash.isDate = isDate;
		lodash.isElement = isElement;
		lodash.isEmpty = isEmpty;
		lodash.isEqual = isEqual;
		lodash.isEqualWith = isEqualWith;
		lodash.isError = isError;
		lodash.isFinite = isFinite;
		lodash.isFunction = isFunction;
		lodash.isInteger = isInteger;
		lodash.isLength = isLength;
		lodash.isMap = isMap;
		lodash.isMatch = isMatch;
		lodash.isMatchWith = isMatchWith;
		lodash.isNaN = isNaN;
		lodash.isNative = isNative;
		lodash.isNil = isNil;
		lodash.isNull = isNull;
		lodash.isNumber = isNumber;
		lodash.isObject = isObject;
		lodash.isObjectLike = isObjectLike;
		lodash.isPlainObject = isPlainObject;
		lodash.isRegExp = isRegExp;
		lodash.isSafeInteger = isSafeInteger;
		lodash.isSet = isSet;
		lodash.isString = isString;
		lodash.isSymbol = isSymbol;
		lodash.isTypedArray = isTypedArray;
		lodash.isUndefined = isUndefined;
		lodash.isWeakMap = isWeakMap;
		lodash.isWeakSet = isWeakSet;
		lodash.join = join;
		lodash.kebabCase = kebabCase;
		lodash.last = last;
		lodash.lastIndexOf = lastIndexOf;
		lodash.lowerCase = lowerCase;
		lodash.lowerFirst = lowerFirst;
		lodash.lt = lt;
		lodash.lte = lte;
		lodash.max = max;
		lodash.maxBy = maxBy;
		lodash.mean = mean;
		lodash.meanBy = meanBy;
		lodash.min = min;
		lodash.minBy = minBy;
		lodash.stubArray = stubArray;
		lodash.stubFalse = stubFalse;
		lodash.stubObject = stubObject;
		lodash.stubString = stubString;
		lodash.stubTrue = stubTrue;
		lodash.multiply = multiply;
		lodash.nth = nth;
		lodash.noConflict = noConflict;
		lodash.noop = noop;
		lodash.now = now;
		lodash.pad = pad;
		lodash.padEnd = padEnd;
		lodash.padStart = padStart;
		lodash.parseInt = parseInt;
		lodash.random = random;
		lodash.reduce = reduce;
		lodash.reduceRight = reduceRight;
		lodash.repeat = repeat;
		lodash.replace = replace;
		lodash.result = result;
		lodash.round = round;
		lodash.runInContext = runInContext;
		lodash.sample = sample;
		lodash.size = size;
		lodash.snakeCase = snakeCase;
		lodash.some = some;
		lodash.sortedIndex = sortedIndex;
		lodash.sortedIndexBy = sortedIndexBy;
		lodash.sortedIndexOf = sortedIndexOf;
		lodash.sortedLastIndex = sortedLastIndex;
		lodash.sortedLastIndexBy = sortedLastIndexBy;
		lodash.sortedLastIndexOf = sortedLastIndexOf;
		lodash.startCase = startCase;
		lodash.startsWith = startsWith;
		lodash.subtract = subtract;
		lodash.sum = sum;
		lodash.sumBy = sumBy;
		lodash.template = template;
		lodash.times = times;
		lodash.toFinite = toFinite;
		lodash.toInteger = toInteger;
		lodash.toLength = toLength;
		lodash.toLower = toLower;
		lodash.toNumber = toNumber;
		lodash.toSafeInteger = toSafeInteger;
		lodash.toString = toString;
		lodash.toUpper = toUpper;
		lodash.trim = trim;
		lodash.trimEnd = trimEnd;
		lodash.trimStart = trimStart;
		lodash.truncate = truncate;
		lodash.unescape = unescape;
		lodash.uniqueId = uniqueId;
		lodash.upperCase = upperCase;
		lodash.upperFirst = upperFirst;

		// Add aliases.
		lodash.each = forEach;
		lodash.eachRight = forEachRight;
		lodash.first = head;

		mixin(lodash, (function () {
			var source = {};
			baseForOwn(lodash, function (func, methodName) {
				if (!hasOwnProperty.call(lodash.prototype, methodName)) {
					source[methodName] = func;
				}
			});
			return source;
		}()), { 'chain': false });

		/*------------------------------------------------------------------------*/

		/**
		 * The semantic version number.
		 *
		 * @static
		 * @memberOf _
		 * @type {string}
		 */
		lodash.VERSION = VERSION;

		// Assign default placeholders.
		arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
			lodash[methodName].placeholder = lodash;
		});

		// Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
		arrayEach(['drop', 'take'], function (methodName, index) {
			LazyWrapper.prototype[methodName] = function (n) {
				n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

				var result = (this.__filtered__ && !index)
				  ? new LazyWrapper(this)
				  : this.clone();

				if (result.__filtered__) {
					result.__takeCount__ = nativeMin(n, result.__takeCount__);
				} else {
					result.__views__.push({
						'size': nativeMin(n, MAX_ARRAY_LENGTH),
						'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
					});
				}
				return result;
			};

			LazyWrapper.prototype[methodName + 'Right'] = function (n) {
				return this.reverse()[methodName](n).reverse();
			};
		});

		// Add `LazyWrapper` methods that accept an `iteratee` value.
		arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
			var type = index + 1,
				isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

			LazyWrapper.prototype[methodName] = function (iteratee) {
				var result = this.clone();
				result.__iteratees__.push({
					'iteratee': getIteratee(iteratee, 3),
					'type': type
				});
				result.__filtered__ = result.__filtered__ || isFilter;
				return result;
			};
		});

		// Add `LazyWrapper` methods for `_.head` and `_.last`.
		arrayEach(['head', 'last'], function (methodName, index) {
			var takeName = 'take' + (index ? 'Right' : '');

			LazyWrapper.prototype[methodName] = function () {
				return this[takeName](1).value()[0];
			};
		});

		// Add `LazyWrapper` methods for `_.initial` and `_.tail`.
		arrayEach(['initial', 'tail'], function (methodName, index) {
			var dropName = 'drop' + (index ? '' : 'Right');

			LazyWrapper.prototype[methodName] = function () {
				return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
			};
		});

		LazyWrapper.prototype.compact = function () {
			return this.filter(identity);
		};

		LazyWrapper.prototype.find = function (predicate) {
			return this.filter(predicate).head();
		};

		LazyWrapper.prototype.findLast = function (predicate) {
			return this.reverse().find(predicate);
		};

		LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
			if (typeof path == 'function') {
				return new LazyWrapper(this);
			}
			return this.map(function (value) {
				return baseInvoke(value, path, args);
			});
		});

		LazyWrapper.prototype.reject = function (predicate) {
			return this.filter(negate(getIteratee(predicate)));
		};

		LazyWrapper.prototype.slice = function (start, end) {
			start = toInteger(start);

			var result = this;
			if (result.__filtered__ && (start > 0 || end < 0)) {
				return new LazyWrapper(result);
			}
			if (start < 0) {
				result = result.takeRight(-start);
			} else if (start) {
				result = result.drop(start);
			}
			if (end !== undefined) {
				end = toInteger(end);
				result = end < 0 ? result.dropRight(-end) : result.take(end - start);
			}
			return result;
		};

		LazyWrapper.prototype.takeRightWhile = function (predicate) {
			return this.reverse().takeWhile(predicate).reverse();
		};

		LazyWrapper.prototype.toArray = function () {
			return this.take(MAX_ARRAY_LENGTH);
		};

		// Add `LazyWrapper` methods to `lodash.prototype`.
		baseForOwn(LazyWrapper.prototype, function (func, methodName) {
			var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
				isTaker = /^(?:head|last)$/.test(methodName),
				lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
				retUnwrapped = isTaker || /^find/.test(methodName);

			if (!lodashFunc) {
				return;
			}
			lodash.prototype[methodName] = function () {
				var value = this.__wrapped__,
					args = isTaker ? [1] : arguments,
					isLazy = value instanceof LazyWrapper,
					iteratee = args[0],
					useLazy = isLazy || isArray(value);

				var interceptor = function (value) {
					var result = lodashFunc.apply(lodash, arrayPush([value], args));
					return (isTaker && chainAll) ? result[0] : result;
				};

				if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
					// Avoid lazy use if the iteratee has a "length" value other than `1`.
					isLazy = useLazy = false;
				}
				var chainAll = this.__chain__,
					isHybrid = !!this.__actions__.length,
					isUnwrapped = retUnwrapped && !chainAll,
					onlyLazy = isLazy && !isHybrid;

				if (!retUnwrapped && useLazy) {
					value = onlyLazy ? value : new LazyWrapper(this);
					var result = func.apply(value, args);
					result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
					return new LodashWrapper(result, chainAll);
				}
				if (isUnwrapped && onlyLazy) {
					return func.apply(this, args);
				}
				result = this.thru(interceptor);
				return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
			};
		});

		// Add `Array` methods to `lodash.prototype`.
		arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
			var func = arrayProto[methodName],
				chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
				retUnwrapped = /^(?:pop|shift)$/.test(methodName);

			lodash.prototype[methodName] = function () {
				var args = arguments;
				if (retUnwrapped && !this.__chain__) {
					var value = this.value();
					return func.apply(isArray(value) ? value : [], args);
				}
				return this[chainName](function (value) {
					return func.apply(isArray(value) ? value : [], args);
				});
			};
		});

		// Map minified method names to their real names.
		baseForOwn(LazyWrapper.prototype, function (func, methodName) {
			var lodashFunc = lodash[methodName];
			if (lodashFunc) {
				var key = (lodashFunc.name + ''),
					names = realNames[key] || (realNames[key] = []);

				names.push({ 'name': methodName, 'func': lodashFunc });
			}
		});

		realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
			'name': 'wrapper',
			'func': undefined
		}];

		// Add methods to `LazyWrapper`.
		LazyWrapper.prototype.clone = lazyClone;
		LazyWrapper.prototype.reverse = lazyReverse;
		LazyWrapper.prototype.value = lazyValue;

		// Add chain sequence methods to the `lodash` wrapper.
		lodash.prototype.at = wrapperAt;
		lodash.prototype.chain = wrapperChain;
		lodash.prototype.commit = wrapperCommit;
		lodash.prototype.next = wrapperNext;
		lodash.prototype.plant = wrapperPlant;
		lodash.prototype.reverse = wrapperReverse;
		lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

		// Add lazy aliases.
		lodash.prototype.first = lodash.prototype.head;

		if (symIterator) {
			lodash.prototype[symIterator] = wrapperToIterator;
		}
		return lodash;
	});

	/*--------------------------------------------------------------------------*/

	// Export lodash.
	var _ = runInContext();

	// Some AMD build optimizers, like r.js, check for condition patterns like:
	if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
		// Expose Lodash on the global object to prevent errors when Lodash is
		// loaded by a script tag in the presence of an AMD loader.
		// See http://requirejs.org/docs/errors.html#mismatch for more details.
		// Use `_.noConflict` to remove Lodash from the global object.
		root._ = _;

		// Define as an anonymous module so, through path mapping, it can be
		// referenced as the "underscore" module.
		define(function () {
			return _;
		});
	}
		// Check for `exports` after `define` in case a build optimizer adds it.
	else if (freeModule) {
		// Export for Node.js.
		(freeModule.exports = _)._ = _;
		// Export for CommonJS support.
		freeExports._ = _;
	}
	else {
		// Export to the global object.
		root._ = _;
	}
}.call(this));